function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/* eslint-env jasmine */

var _libConfigExecutor = require('./../../lib/config/executor');

var _libConfigPathhelper = require('./../../lib/config/pathhelper');

var pathhelper = _interopRequireWildcard(_libConfigPathhelper);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _specHelpers = require('./../spec-helpers');

var _asyncSpecHelpers = require('../async-spec-helpers');

// eslint-disable-line

'use babel';describe('executor', function () {
  var executor = null;
  var prefix = null;

  (0, _asyncSpecHelpers.beforeEach)(function () {
    _specHelpers.lifecycle.setup();
    prefix = '/';
    if (_os2['default'].platform() === 'win32') {
      prefix = 'C:\\';
    }
    executor = new _libConfigExecutor.Executor();
  });

  describe('when asynchronously executing a command', function () {
    (0, _asyncSpecHelpers.it)('succeeds', _asyncToGenerator(function* () {
      var command = 'env';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'env', 'env_windows_amd64.exe');
      }

      var result = yield executor.exec(command, [], { cwd: prefix });
      expect(result).toBeDefined();
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(0);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).not.toBe('');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeFalsy();
    }));

    (0, _asyncSpecHelpers.it)('sets the working directory correctly', _asyncToGenerator(function* () {
      var command = 'pwd';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'pwd', 'pwd_windows_amd64.exe');
      }

      var result = yield executor.exec(command, [], {
        cwd: pathhelper.home()
      });
      expect(result).toBeDefined();
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(0);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).toBe(pathhelper.home() + '\n');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeFalsy();
    }));

    (0, _asyncSpecHelpers.it)('sets the environment correctly', _asyncToGenerator(function* () {
      var command = 'env';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'env', 'env_windows_amd64.exe');
      }
      var env = { testenv: 'testing' };
      var result = yield executor.exec(command, [], { env: env });

      expect(result).toBeDefined();
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(0);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).toContain('testenv=testing\n');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeFalsy();
    }));

    (0, _asyncSpecHelpers.it)('handles and returns an ENOENT error if the command was not found', _asyncToGenerator(function* () {
      var result = yield executor.exec('nonexistentcommand', [], executor.getOptions());
      expect(result).toBeTruthy();
      expect(result.error).toBeTruthy();
      expect(result.error.errno).toBe('ENOENT');
      expect(result.error.message).toBe('spawn nonexistentcommand ENOENT');
      expect(result.error.path).toBe('nonexistentcommand');
      expect(result.exitcode).toBe(127);
      expect(result.stdout).toBe('');
      expect(result.stderr).toBeDefined();
      if (_os2['default'].platform() === 'win32') {
        expect(result.stderr).toBe("'nonexistentcommand' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n");
      } else {
        expect(result.stderr).toBe('');
      }
    }));
  });

  describe('when synchronously executing a command', function () {
    (0, _asyncSpecHelpers.it)('succeeds', function () {
      var command = 'env';
      if (_os2['default'].platform() === 'win32') {
        command = _path2['default'].resolve(__dirname, 'tools', 'env', 'env_windows_amd64.exe');
      }

      var result = executor.execSync(command, [], executor.getOptions());
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(0);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).not.toBe('');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeFalsy();
    });

    (0, _asyncSpecHelpers.it)('returns a message if the command was not found', function () {
      var result = executor.execSync('nonexistentcommand', [], executor.getOptions());
      expect(result.exitcode).toBeDefined();
      expect(result.exitcode).toBe(127);
      expect(result.stdout).toBeDefined();
      expect(result.stdout).toBe('');
      expect(result.stderr).toBeDefined();
      expect(result.stderr).toBe('');
      expect(result.error).toBeTruthy();
      expect(result.error.code).toBe('ENOENT');
      expect(result.error.errno).toBe('ENOENT');
      expect(result.error.message).toBe('spawnSync nonexistentcommand ENOENT');
      expect(result.error.path).toBe('nonexistentcommand');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,