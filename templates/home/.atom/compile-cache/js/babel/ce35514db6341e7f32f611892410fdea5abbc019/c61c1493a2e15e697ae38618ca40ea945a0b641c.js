Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.serialize = serialize;
exports.getBreakpoints = getBreakpoints;
exports.indexOfBreakpoint = indexOfBreakpoint;
exports.indexOfBreakpointByName = indexOfBreakpointByName;
exports.getBreakpoint = getBreakpoint;
exports.getBreakpointByName = getBreakpointByName;
exports.subscribe = subscribe;

var _utils = require('./utils');

'use babel';

function serialize(store) {
  var state = store.getState();
  var mapBP = function mapBP(_ref) {
    var file = _ref.file;
    var line = _ref.line;
    var cond = _ref.cond;

    return { file: file, line: line, cond: cond };
  };
  return {
    selectedConfig: state.selectedConfig,
    delve: {
      breakpoints: state.delve.breakpoints.map(mapBP)
    }
  };
}

function getBreakpoints(store, file) {
  var bps = store.getState().delve.breakpoints;
  return !file ? bps : bps.filter(function (bp) {
    return bp.file === file;
  });
}

function indexOfBreakpoint(bps, file, line) {
  return bps.findIndex(function (bp) {
    return bp.file === file && bp.line === line;
  });
}

function indexOfBreakpointByName(bps, name) {
  return bps.findIndex(function (bp) {
    return bp.name === name;
  });
}

function getBreakpoint(store, file, line) {
  var bps = getBreakpoints(store, file);
  var index = indexOfBreakpoint(bps, file, line);
  return index === -1 ? null : bps[index];
}

function getBreakpointByName(store, name) {
  var bps = getBreakpoints(store);
  var index = indexOfBreakpointByName(bps, name);
  return index === -1 ? null : bps[index];
}

function subscribe(store, path, callback) {
  var t = typeof path;
  if (t !== 'string' && t !== 'function') {
    throw new Error('unknown value for "path"');
  }

  var currentValue = undefined;

  var check = function check(state) {
    if (!path) {
      callback(state);
      return state;
    }
    var newValue = undefined;
    if (t === 'string') {
      newValue = (0, _utils.getDeep)(state, path);
    } else if (t === 'function') {
      newValue = path(state);
    }
    if (newValue !== currentValue) {
      callback(newValue, currentValue);
    }
    return newValue;
  };
  var update = function update() {
    var state = store.getState();
    currentValue = check(state);
  };

  update();

  return { dispose: store.subscribe(update) };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLWRlYnVnL2xpYi9zdG9yZS11dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztxQkFFd0IsU0FBUzs7QUFGakMsV0FBVyxDQUFBOztBQUlKLFNBQVMsU0FBUyxDQUFFLEtBQUssRUFBRTtBQUNoQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDOUIsTUFBTSxLQUFLLEdBQUcsU0FBUixLQUFLLENBQUksSUFBb0IsRUFBSztRQUF2QixJQUFJLEdBQU4sSUFBb0IsQ0FBbEIsSUFBSTtRQUFFLElBQUksR0FBWixJQUFvQixDQUFaLElBQUk7UUFBRSxJQUFJLEdBQWxCLElBQW9CLENBQU4sSUFBSTs7QUFDL0IsV0FBTyxFQUFFLElBQUksRUFBSixJQUFJLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxJQUFJLEVBQUosSUFBSSxFQUFFLENBQUE7R0FDNUIsQ0FBQTtBQUNELFNBQU87QUFDTCxrQkFBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO0FBQ3BDLFNBQUssRUFBRTtBQUNMLGlCQUFXLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztLQUNoRDtHQUNGLENBQUE7Q0FDRjs7QUFFTSxTQUFTLGNBQWMsQ0FBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQzNDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFBO0FBQzlDLFNBQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBQyxFQUFFO1dBQUssRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJO0dBQUEsQ0FBQyxDQUFBO0NBQzFEOztBQUVNLFNBQVMsaUJBQWlCLENBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDbEQsU0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQUMsRUFBRTtXQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSTtHQUFBLENBQUMsQ0FBQTtDQUNuRTs7QUFDTSxTQUFTLHVCQUF1QixDQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDbEQsU0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQUMsRUFBRTtXQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSTtHQUFBLENBQUMsQ0FBQTtDQUMvQzs7QUFFTSxTQUFTLGFBQWEsQ0FBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNoRCxNQUFNLEdBQUcsR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ3ZDLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDaEQsU0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN4Qzs7QUFDTSxTQUFTLG1CQUFtQixDQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDaEQsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ2pDLE1BQU0sS0FBSyxHQUFHLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNoRCxTQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQ3hDOztBQUVNLFNBQVMsU0FBUyxDQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO0FBQ2hELE1BQU0sQ0FBQyxHQUFHLE9BQU8sSUFBSSxDQUFBO0FBQ3JCLE1BQUksQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtHQUM1Qzs7QUFFRCxNQUFJLFlBQVksWUFBQSxDQUFBOztBQUVoQixNQUFNLEtBQUssR0FBRyxTQUFSLEtBQUssQ0FBSSxLQUFLLEVBQUs7QUFDdkIsUUFBSSxDQUFDLElBQUksRUFBRTtBQUNULGNBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNmLGFBQU8sS0FBSyxDQUFBO0tBQ2I7QUFDRCxRQUFJLFFBQVEsWUFBQSxDQUFBO0FBQ1osUUFBSSxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQ2xCLGNBQVEsR0FBRyxvQkFBUSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7S0FDaEMsTUFBTSxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDM0IsY0FBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUN2QjtBQUNELFFBQUksUUFBUSxLQUFLLFlBQVksRUFBRTtBQUM3QixjQUFRLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFBO0tBQ2pDO0FBQ0QsV0FBTyxRQUFRLENBQUE7R0FDaEIsQ0FBQTtBQUNELE1BQU0sTUFBTSxHQUFHLFNBQVQsTUFBTSxHQUFTO0FBQ25CLFFBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUM5QixnQkFBWSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtHQUM1QixDQUFBOztBQUVELFFBQU0sRUFBRSxDQUFBOztBQUVSLFNBQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBO0NBQzVDIiwiZmlsZSI6Ii9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLWRlYnVnL2xpYi9zdG9yZS11dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCB7IGdldERlZXAgfSBmcm9tICcuL3V0aWxzJ1xuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChzdG9yZSkge1xuICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKClcbiAgY29uc3QgbWFwQlAgPSAoeyBmaWxlLCBsaW5lLCBjb25kIH0pID0+IHtcbiAgICByZXR1cm4geyBmaWxlLCBsaW5lLCBjb25kIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHNlbGVjdGVkQ29uZmlnOiBzdGF0ZS5zZWxlY3RlZENvbmZpZyxcbiAgICBkZWx2ZToge1xuICAgICAgYnJlYWtwb2ludHM6IHN0YXRlLmRlbHZlLmJyZWFrcG9pbnRzLm1hcChtYXBCUClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnRzIChzdG9yZSwgZmlsZSkge1xuICBjb25zdCBicHMgPSBzdG9yZS5nZXRTdGF0ZSgpLmRlbHZlLmJyZWFrcG9pbnRzXG4gIHJldHVybiAhZmlsZSA/IGJwcyA6IGJwcy5maWx0ZXIoKGJwKSA9PiBicC5maWxlID09PSBmaWxlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZkJyZWFrcG9pbnQgKGJwcywgZmlsZSwgbGluZSkge1xuICByZXR1cm4gYnBzLmZpbmRJbmRleCgoYnApID0+IGJwLmZpbGUgPT09IGZpbGUgJiYgYnAubGluZSA9PT0gbGluZSlcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mQnJlYWtwb2ludEJ5TmFtZSAoYnBzLCBuYW1lKSB7XG4gIHJldHVybiBicHMuZmluZEluZGV4KChicCkgPT4gYnAubmFtZSA9PT0gbmFtZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQgKHN0b3JlLCBmaWxlLCBsaW5lKSB7XG4gIGNvbnN0IGJwcyA9IGdldEJyZWFrcG9pbnRzKHN0b3JlLCBmaWxlKVxuICBjb25zdCBpbmRleCA9IGluZGV4T2ZCcmVha3BvaW50KGJwcywgZmlsZSwgbGluZSlcbiAgcmV0dXJuIGluZGV4ID09PSAtMSA/IG51bGwgOiBicHNbaW5kZXhdXG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludEJ5TmFtZSAoc3RvcmUsIG5hbWUpIHtcbiAgY29uc3QgYnBzID0gZ2V0QnJlYWtwb2ludHMoc3RvcmUpXG4gIGNvbnN0IGluZGV4ID0gaW5kZXhPZkJyZWFrcG9pbnRCeU5hbWUoYnBzLCBuYW1lKVxuICByZXR1cm4gaW5kZXggPT09IC0xID8gbnVsbCA6IGJwc1tpbmRleF1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZSAoc3RvcmUsIHBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHQgPSB0eXBlb2YgcGF0aFxuICBpZiAodCAhPT0gJ3N0cmluZycgJiYgdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biB2YWx1ZSBmb3IgXCJwYXRoXCInKVxuICB9XG5cbiAgbGV0IGN1cnJlbnRWYWx1ZVxuXG4gIGNvbnN0IGNoZWNrID0gKHN0YXRlKSA9PiB7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICBjYWxsYmFjayhzdGF0ZSlcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbiAgICBsZXQgbmV3VmFsdWVcbiAgICBpZiAodCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5ld1ZhbHVlID0gZ2V0RGVlcChzdGF0ZSwgcGF0aClcbiAgICB9IGVsc2UgaWYgKHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG5ld1ZhbHVlID0gcGF0aChzdGF0ZSlcbiAgICB9XG4gICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgIGNhbGxiYWNrKG5ld1ZhbHVlLCBjdXJyZW50VmFsdWUpXG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZVxuICB9XG4gIGNvbnN0IHVwZGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKClcbiAgICBjdXJyZW50VmFsdWUgPSBjaGVjayhzdGF0ZSlcbiAgfVxuXG4gIHVwZGF0ZSgpXG5cbiAgcmV0dXJuIHsgZGlzcG9zZTogc3RvcmUuc3Vic2NyaWJlKHVwZGF0ZSkgfVxufVxuIl19