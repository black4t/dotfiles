function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

describe('The Terraform provider for Linter', function () {
  var lint = require(path.join(__dirname, '../lib/main.js')).provideLinter().lint;

  beforeEach(function () {
    atom.workspace.destroyActivePaneItem();
    waitsForPromise(function () {
      atom.packages.activatePackage('linter-terraform-syntax');
      return atom.packages.activatePackage('language-terraform').then(function () {
        return atom.workspace.open(path.join(__dirname, 'fixtures/clean', 'test.tf'));
      });
    });
  });

  describe('checks a file with a syntax issue', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/syntax', 'test.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the first message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual("expected: IDENT | STRING | ASSIGN | LBRACE got: SUB");
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+test\.tf$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[8, 13], [8, 14]]);
        });
      });
    });
  });

  describe('checks a file with a syntax issue in the directory', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/syntax', 'test_two.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual("expected: IDENT | STRING | ASSIGN | LBRACE got: SUB");
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+test\.tf$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[8, 13], [8, 14]]);
        });
      });
    });
  });

  describe('checks a file with a syntax issue with the new format', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/unexpected_paran', 'test.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual('Error reading config for eks: expected "}" but found ")"');
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+test\.tf$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[0, 28], [0, 29]]);
        });
      });
    });
  });

  describe('checks a file with a syntax issue with an alternate format', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/bad_var_interpolate', 'test.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual('error parsing local value "kube_config_static": expected ")" but found opening quote');
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+test\.tf$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[8, 23], [8, 24]]);
        });
      });
    });
  });

  describe('checks a file with a syntax issue with an alternate format in the directory', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/bad_var_interpolate', 'test_two.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual('error parsing local value "kube_config_static": expected ")" but found opening quote');
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+test\.tf$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[8, 23], [8, 24]]);
        });
      });
    });
  });

  describe('checks a file with an unknown resource in the directory', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/unknown_resource', 'test.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual("Non-syntax error in directory: resource 'digitalocean_domain.domain' config: unknown resource 'digitalocean_droplet.droplet' referenced in variable digitalocean_droplet.droplet.ipv4_address.");
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+unknown_resource$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[0, 0], [0, 1]]);
        });
      });
    });
  });

  describe('checks a file with a required field missing in the directory', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/required_field', 'test.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(2);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual('Non-syntax error in directory: digitalocean_floating_ip.float: "region": required field is not set.');
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+required_field$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[0, 0], [0, 1]]);
          expect(messages[1].severity).toBeDefined();
          expect(messages[1].severity).toEqual('error');
          expect(messages[1].excerpt).toBeDefined();
          expect(messages[1].excerpt).toEqual('Non-syntax error in directory: digitalocean_floating_ip.float: droplet_id: cannot parse \'\' as int: strconv.ParseInt: parsing "droplet": invalid syntax.');
          expect(messages[1].location.file).toBeDefined();
          expect(messages[1].location.file).toMatch(/.+required_field$/);
          expect(messages[1].location.position).toBeDefined();
          expect(messages[1].location.position).toEqual([[0, 0], [0, 1]]);
        });
      });
    });
  });

  describe('checks a file with a missing file in the directory', function () {
    var editor = null;
    var badFile = path.join(__dirname, 'fixtures/missing_file', 'test.tf');
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badFile).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
        });
      });
    });

    it('verifies the message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].severity).toBeDefined();
          expect(messages[0].severity).toEqual('error');
          expect(messages[0].excerpt).toBeDefined();
          expect(messages[0].excerpt).toEqual("Non-syntax error in directory: digitalocean_ssh_key.key: file: open /foo/bar/baz: no such file or directory in:.");
          expect(messages[0].location.file).toBeDefined();
          expect(messages[0].location.file).toMatch(/.+missing_file$/);
          expect(messages[0].location.position).toBeDefined();
          expect(messages[0].location.position).toEqual([[0, 0], [0, 1]]);
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      var goodFile = path.join(__dirname, 'fixtures/clean', 'test.tf');
      return atom.workspace.open(goodFile).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,