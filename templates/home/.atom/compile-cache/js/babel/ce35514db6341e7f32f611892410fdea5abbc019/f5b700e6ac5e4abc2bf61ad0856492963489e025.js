function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

var path = _interopRequireWildcard(_path);

// eslint-disable-next-line no-unused-vars

var _jasmineFix = require('jasmine-fix');

'use babel';

var _require$provideLinter = require('../lib/main.js').provideLinter();

var lint = _require$provideLinter.lint;

var cleanPath = path.join(__dirname, 'fixtures', 'clean.sh');
var badPath = path.join(__dirname, 'fixtures', 'bad.sh');
var sourceFileRelativePath = path.join(__dirname, 'fixtures', 'source_directive', 'file_relative.sh');
var sourceProjectRelativePath = path.join(__dirname, 'fixtures', 'source_directive', 'project_relative.sh');

describe('The ShellCheck provider for Linter', function () {
  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    atom.workspace.destroyActivePaneItem();

    // Info about this beforeEach() implementation:
    // https://github.com/AtomLinter/Meta/issues/15
    var activationPromise = atom.packages.activatePackage('linter-shellcheck');

    yield atom.packages.activatePackage('language-shellscript');
    yield atom.workspace.open(cleanPath);

    atom.packages.triggerDeferredActivationHooks();
    yield activationPromise;
  }));

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(cleanPath);
    var messages = yield lint(editor);

    expect(messages.length).toBe(0);
  }));

  (0, _jasmineFix.it)('handles messages from ShellCheck', _asyncToGenerator(function* () {
    var expectedExcerpt = 'Tips depend on target shell and yours is unknown. Add a shebang. [SC2148]';
    var expectedURL = 'https://github.com/koalaman/shellcheck/wiki/SC2148';
    var editor = yield atom.workspace.open(badPath);
    var messages = yield lint(editor);

    expect(messages.length).toBe(1);
    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(expectedExcerpt);
    expect(messages[0].url).toBe(expectedURL);
    expect(messages[0].location.file).toBe(badPath);
    expect(messages[0].location.position).toEqual([[0, 0], [0, 4]]);
  }));

  describe('implements useProjectCwd and', function () {
    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      atom.config.set('linter-shellcheck.userParameters', '-x');
      atom.config.set('linter-shellcheck.enableNotice', true);
    }));

    (0, _jasmineFix.it)('uses file-relative source= directives by default', _asyncToGenerator(function* () {
      atom.config.set('linter-shellcheck.useProjectCwd', false);
      var editor = yield atom.workspace.open(sourceFileRelativePath);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));

    (0, _jasmineFix.it)('errors for file-relative source= path with useProjectCwd = true', _asyncToGenerator(function* () {
      atom.config.set('linter-shellcheck.useProjectCwd', true);
      var editor = yield atom.workspace.open(sourceFileRelativePath);
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);
      expect(messages[0].excerpt).toMatch(/openBinaryFile: does not exist/);
    }));

    (0, _jasmineFix.it)('uses project-relative source= directives via setting (based at fixtures/)', _asyncToGenerator(function* () {
      atom.config.set('linter-shellcheck.useProjectCwd', true);
      var editor = yield atom.workspace.open(sourceProjectRelativePath);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));

    (0, _jasmineFix.it)('errors for project-relative source= path with useProjectCwd = false (based at fixtures/)', _asyncToGenerator(function* () {
      atom.config.set('linter-shellcheck.useProjectCwd', false);
      var editor = yield atom.workspace.open(sourceProjectRelativePath);
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);
      expect(messages[0].excerpt).toMatch(/openBinaryFile: does not exist/);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,