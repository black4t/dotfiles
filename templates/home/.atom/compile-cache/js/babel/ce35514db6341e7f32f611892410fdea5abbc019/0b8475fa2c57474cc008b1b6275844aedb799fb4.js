Object.defineProperty(exports, '__esModule', {
  value: true
});

/* eslint-disable import/no-extraneous-dependencies, import/extensions */

var _atom = require('atom');

/* eslint-enable import/no-extraneous-dependencies, import/extensions */

// Some internal variables
'use babel';var baseUrl = 'https://github.com/koalaman/shellcheck/wiki';
var errorCodeRegex = /SC\d{4}/;
var regex = /.+?:(\d+):(\d+):\s(\w+?):\s(.+)/g;

var createURL = function createURL(text) {
  var match = errorCodeRegex.exec(text);
  if (match) {
    return baseUrl + '/' + match[0];
  }
  return undefined;
};

exports['default'] = {
  activate: function activate() {
    var _this = this;

    require('atom-package-deps').install('linter-shellcheck');

    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.config.observe('linter-shellcheck.shellcheckExecutablePath', function (value) {
      _this.executablePath = value;
    }), atom.config.observe('linter-shellcheck.enableNotice', function (value) {
      _this.enableNotice = value;
    }), atom.config.observe('linter-shellcheck.userParameters', function (value) {
      _this.userParameters = value.trim().split(' ').filter(Boolean);
    }), atom.config.observe('linter-shellcheck.useProjectCwd', function (value) {
      _this.useProjectCwd = value;
    }));
  },

  deactivate: function deactivate() {
    this.subscriptions.dispose();
  },

  provideLinter: function provideLinter() {
    var _this2 = this;

    var helpers = require('atom-linter');
    var path = require('path');

    return {
      name: 'ShellCheck',
      grammarScopes: ['source.shell'],
      scope: 'file',
      lintsOnChange: true,
      lint: function lint(textEditor) {
        if (!atom.workspace.isTextEditor(textEditor)) {
          return null;
        }

        var filePath = textEditor.getPath();
        if (!filePath) {
          // TextEditor has no path associated with it (yet)
          return null;
        }

        var fileExt = path.extname(filePath);
        if (fileExt === '.zsh' || fileExt === '.zsh-theme') {
          // shellcheck does not support zsh
          return [];
        }

        var text = textEditor.getText();
        var projectPath = atom.project.relativizePath(filePath)[0];
        var cwd = _this2.useProjectCwd && projectPath ? projectPath : path.dirname(filePath);
        var showAll = _this2.enableNotice;
        // The first -f parameter overrides any others
        var parameters = [].concat(['-f', 'gcc'], _this2.userParameters, ['-']);
        var options = { stdin: text, cwd: cwd, ignoreExitCode: true };

        return helpers.exec(_this2.executablePath, parameters, options).then(function (output) {
          if (textEditor.getText() !== text) {
            // The text has changed since the lint was triggered, tell Linter not to update
            return null;
          }
          var messages = [];
          var match = regex.exec(output);
          while (match !== null) {
            var type = match[3] !== 'note' ? match[3] : 'info';
            if (showAll || type === 'warning' || type === 'error') {
              var line = Number.parseInt(match[1], 10) - 1;
              var col = Number.parseInt(match[2], 10) - 1;
              messages.push({
                severity: type,
                location: {
                  file: filePath,
                  position: helpers.generateRange(textEditor, line, col)
                },
                excerpt: match[4],
                url: createURL(match[4])
              });
            }
            match = regex.exec(output);
          }
          return messages;
        });
      }
    };
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,