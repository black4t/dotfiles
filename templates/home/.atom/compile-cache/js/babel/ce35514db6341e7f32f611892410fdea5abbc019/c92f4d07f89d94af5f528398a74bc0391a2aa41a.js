function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/* eslint-env jasmine */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _specHelpers = require('./../spec-helpers');

var _asyncSpecHelpers = require('../async-spec-helpers');

// eslint-disable-line

'use babel';describe('gomodifytags', function () {
  var gopath = null;
  var editor = null;
  var gomodifytags = null;
  var source = null;
  var target = null;

  (0, _asyncSpecHelpers.beforeEach)(_asyncToGenerator(function* () {
    _specHelpers.lifecycle.setup();
    gopath = _fsExtra2['default'].realpathSync(_specHelpers.lifecycle.temp.mkdirSync('gopath-'));
    process.env.GOPATH = gopath;
    yield _specHelpers.lifecycle.activatePackage();
    var mainModule = _specHelpers.lifecycle.mainModule;

    mainModule.provideGoConfig();
    gomodifytags = mainModule.loadGoModifyTags();
  }));

  afterEach(function () {
    _specHelpers.lifecycle.teardown();
  });

  describe('when a file is open', function () {
    var tempfile = undefined;
    (0, _asyncSpecHelpers.beforeEach)(_asyncToGenerator(function* () {
      source = _path2['default'].join(__dirname, '..', 'fixtures', 'gomodifytags');
      target = _path2['default'].join(gopath, 'src', 'gomodifytags');
      _fsExtra2['default'].copySync(source, target);
      tempfile = _path2['default'].join(target, 'foo.go');
      editor = yield atom.workspace.open(tempfile);
    }));

    describe('argument builder', function () {
      var options = undefined;

      (0, _asyncSpecHelpers.beforeEach)(function () {
        options = {
          tags: [{ tag: 'xml', option: null }, { tag: 'bson', option: null }],
          transform: 'snakecase',
          sortTags: false
        };
      });

      (0, _asyncSpecHelpers.it)('includes the -file option', function () {
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        expect(args.length).toBeGreaterThan(1);
        expect(args[0]).toBe('-file');
        expect(args[1]).toBe(tempfile);
      });

      (0, _asyncSpecHelpers.it)('defaults to json if no tags are specified', function () {
        editor.setCursorBufferPosition([4, 6]);
        options.tags = [];
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        var i = args.indexOf('-add-tags');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('json');
        expect(args.includes('-add-options')).toBe(false);
      });

      (0, _asyncSpecHelpers.it)('specifies tags correctly', function () {
        editor.setCursorBufferPosition([4, 6]);
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        var i = args.indexOf('-add-tags');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('xml,bson');
      });

      (0, _asyncSpecHelpers.it)('uses the -offset flag if there is no selection', function () {
        editor.setCursorBufferPosition([4, 6]);
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        expect(args.length).toBeGreaterThan(3);
        expect(args[2]).toBe('-offset');
        expect(args[3]).toBe('54');
      });

      (0, _asyncSpecHelpers.it)('uses the -line flag when there is a selection', function () {
        editor.setSelectedBufferRange([[3, 2], [4, 6]]);
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        expect(args.length).toBeGreaterThan(3);
        expect(args[2]).toBe('-line');
        expect(args[3]).toBe('4,5');
      });

      (0, _asyncSpecHelpers.it)('uses the -modified flag when the buffer is modified', function () {
        editor.setCursorBufferPosition([4, 6]);
        editor.insertNewlineBelow();
        expect(editor.isModified()).toBe(true);
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        expect(args.includes('-modified')).toBe(true);
      });

      (0, _asyncSpecHelpers.it)('uses the -transform flag when camel case is specified', function () {
        options.transform = 'camelcase';
        editor.setCursorBufferPosition([4, 6]);
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        var i = args.indexOf('-transform');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('camelcase');
      });

      (0, _asyncSpecHelpers.it)('uses the -sort flag when the sort option is enabled', function () {
        options.sortTags = true;
        editor.setCursorBufferPosition([4, 6]);
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        expect(args.includes('-sort')).toBe(true);
      });

      (0, _asyncSpecHelpers.it)('includes the -add-options flag if options were specified for add', function () {
        editor.setCursorBufferPosition([4, 6]);
        options.tags = [{ tag: 'bson', option: 'omitempty' }, { tag: 'xml', option: 'foo' }];
        var args = gomodifytags.buildArgs(editor, options, 'Add');
        var i = args.indexOf('-add-tags');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('bson,xml');

        i = args.indexOf('-add-options');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('bson=omitempty,xml=foo');
      });

      (0, _asyncSpecHelpers.it)('uses the -clear-tags flag if no tags are specified for remove', function () {
        editor.setCursorBufferPosition([4, 6]);
        options.tags = [];
        var args = gomodifytags.buildArgs(editor, options, 'Remove');
        expect(args.includes('-clear-tags')).toBe(true);
      });

      (0, _asyncSpecHelpers.it)('includes the -remove-tags flag if no options are specified for remove', function () {
        editor.setCursorBufferPosition([4, 6]);
        options.tags = [{ tag: 'json', option: null }];
        var args = gomodifytags.buildArgs(editor, options, 'Remove');
        expect(args.includes('-remove-options')).toBe(false);
        var i = args.indexOf('-remove-tags');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('json');
      });

      (0, _asyncSpecHelpers.it)('includes the -remove-options flag if options are specified for remove', function () {
        editor.setCursorBufferPosition([4, 6]);
        options.tags = [{ tag: 'json', option: 'omitempty' }];
        var args = gomodifytags.buildArgs(editor, options, 'Remove');
        expect(args.includes('-remove-tags')).toBe(false);
        var i = args.indexOf('-remove-options');
        expect(i).not.toBe(-1);
        expect(args[i + 1]).toBe('json=omitempty');
      });
    });

    describe('when modifying tags', function () {
      (0, _asyncSpecHelpers.it)('adds json tags with options', _asyncToGenerator(function* () {
        editor.setCursorBufferPosition([4, 6]);
        var command = yield _specHelpers.lifecycle.mainModule.provideGoConfig().locator.findTool('gomodifytags');
        expect(command).toBeTruthy();

        var result = yield gomodifytags.modifyTags(editor, {
          tags: [{ tag: 'json', option: 'omitempty' }],
          transform: 'snakecase',
          sortTags: false
        }, 'Add', command);

        expect(result).toBeTruthy();
        expect(result.success).toBe(true);
        expect(result.result.stdout).toBe('package foo\n\ntype Bar struct {\n\tQuickBrownFox int    `json:"quick_brown_fox,omitempty"`\n\tLazyDog       string `json:"lazy_dog,omitempty"`\n}\n\n');
      }));

      (0, _asyncSpecHelpers.it)('returns an error if the cursor is not inside a struct declaration', _asyncToGenerator(function* () {
        editor.setCursorBufferPosition([0, 2]);
        var command = yield _specHelpers.lifecycle.mainModule.provideGoConfig().locator.findTool('gomodifytags');
        var result = yield gomodifytags.modifyTags(editor, { tags: [] }, 'Add', command);
        expect(result).toBeTruthy();
        expect(result.success).toBe(false);
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,