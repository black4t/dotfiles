function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _libElement = require("../lib/element");

var _libElement2 = _interopRequireDefault(_libElement);

describe("Element", function () {
  var element = undefined;

  beforeEach(function () {
    element = new _libElement2["default"]();
    spyOn(element, "setTooltip").andCallThrough();
    spyOn(element, "setBusy").andCallThrough();
  });
  afterEach(function () {
    element.dispose();
  });

  function validateSetTooltip(call, html) {
    expect(element.setTooltip.calls[call].args[0].innerHTML).toEqual(html);
  }

  it("sets a title properly", function () {
    element.update([{ title: "Hello" }], []);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    validateSetTooltip(0, "<strong>Current:</strong><div>Hello</div>");
  });
  it("escapes the given texts", function () {
    element.update([{ title: "<div>" }], []);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    validateSetTooltip(0, "<strong>Current:</strong><div>&lt;div&gt;</div>");
  });
  it("shows idle message when nothing is provided", function () {
    element.update([], []);
    expect(element.setBusy).toHaveBeenCalledWith(false);
    validateSetTooltip(0, "Idle");
  });
  it("shows only history when current is not present", function () {
    element.update([], [{ title: "Yo", duration: "1m" }]);
    expect(element.setBusy).toHaveBeenCalledWith(false);
    validateSetTooltip(0, "<strong>History:</strong><div>Yo (1m)</div>");
  });
  it("shows both history and current when both are present", function () {
    element.update([{ title: "Hey" }], [{ title: "Yo", duration: "1m" }]);
    expect(element.setBusy).toHaveBeenCalledWith(true);
    validateSetTooltip(0, "<strong>History:</strong><div>Yo (1m)</div><strong>Current:</strong><div>Hey</div>");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2J1c3ktc2lnbmFsL3NwZWMvZWxlbWVudC1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OzBCQUVvQixnQkFBZ0I7Ozs7QUFFcEMsUUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFXO0FBQzdCLE1BQUksT0FBTyxZQUFBLENBQUM7O0FBRVosWUFBVSxDQUFDLFlBQVc7QUFDcEIsV0FBTyxHQUFHLDZCQUFhLENBQUM7QUFDeEIsU0FBSyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM5QyxTQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0dBQzVDLENBQUMsQ0FBQztBQUNILFdBQVMsQ0FBQyxZQUFXO0FBQ25CLFdBQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUNuQixDQUFDLENBQUM7O0FBRUgsV0FBUyxrQkFBa0IsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFO0FBQ3RELFVBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3hFOztBQUVELElBQUUsQ0FBQyx1QkFBdUIsRUFBRSxZQUFXO0FBQ3JDLFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLFVBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkQsc0JBQWtCLENBQUMsQ0FBQyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7R0FDcEUsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQVc7QUFDdkMsV0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekMsVUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxzQkFBa0IsQ0FBQyxDQUFDLEVBQUUsaURBQWlELENBQUMsQ0FBQztHQUMxRSxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBVztBQUMzRCxXQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2QixVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELHNCQUFrQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztHQUMvQixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsZ0RBQWdELEVBQUUsWUFBVztBQUM5RCxXQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RELFVBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEQsc0JBQWtCLENBQUMsQ0FBQyxFQUFFLDZDQUE2QyxDQUFDLENBQUM7R0FDdEUsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHNEQUFzRCxFQUFFLFlBQVc7QUFDcEUsV0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RSxVQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25ELHNCQUFrQixDQUNoQixDQUFDLEVBQ0Qsb0ZBQW9GLENBQ3JGLENBQUM7R0FDSCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoiL2hvbWUvbXl1Z2EvLmF0b20vcGFja2FnZXMvYnVzeS1zaWduYWwvc3BlYy9lbGVtZW50LXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgRWxlbWVudCBmcm9tIFwiLi4vbGliL2VsZW1lbnRcIjtcblxuZGVzY3JpYmUoXCJFbGVtZW50XCIsIGZ1bmN0aW9uKCkge1xuICBsZXQgZWxlbWVudDtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQgPSBuZXcgRWxlbWVudCgpO1xuICAgIHNweU9uKGVsZW1lbnQsIFwic2V0VG9vbHRpcFwiKS5hbmRDYWxsVGhyb3VnaCgpO1xuICAgIHNweU9uKGVsZW1lbnQsIFwic2V0QnVzeVwiKS5hbmRDYWxsVGhyb3VnaCgpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQuZGlzcG9zZSgpO1xuICB9KTtcblxuICBmdW5jdGlvbiB2YWxpZGF0ZVNldFRvb2x0aXAoY2FsbDogbnVtYmVyLCBodG1sOiBzdHJpbmcpIHtcbiAgICBleHBlY3QoZWxlbWVudC5zZXRUb29sdGlwLmNhbGxzW2NhbGxdLmFyZ3NbMF0uaW5uZXJIVE1MKS50b0VxdWFsKGh0bWwpO1xuICB9XG5cbiAgaXQoXCJzZXRzIGEgdGl0bGUgcHJvcGVybHlcIiwgZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC51cGRhdGUoW3sgdGl0bGU6IFwiSGVsbG9cIiB9XSwgW10pO1xuICAgIGV4cGVjdChlbGVtZW50LnNldEJ1c3kpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuICAgIHZhbGlkYXRlU2V0VG9vbHRpcCgwLCBcIjxzdHJvbmc+Q3VycmVudDo8L3N0cm9uZz48ZGl2PkhlbGxvPC9kaXY+XCIpO1xuICB9KTtcbiAgaXQoXCJlc2NhcGVzIHRoZSBnaXZlbiB0ZXh0c1wiLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbeyB0aXRsZTogXCI8ZGl2PlwiIH1dLCBbXSk7XG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0QnVzeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgodHJ1ZSk7XG4gICAgdmFsaWRhdGVTZXRUb29sdGlwKDAsIFwiPHN0cm9uZz5DdXJyZW50Ojwvc3Ryb25nPjxkaXY+Jmx0O2RpdiZndDs8L2Rpdj5cIik7XG4gIH0pO1xuICBpdChcInNob3dzIGlkbGUgbWVzc2FnZSB3aGVuIG5vdGhpbmcgaXMgcHJvdmlkZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC51cGRhdGUoW10sIFtdKTtcbiAgICBleHBlY3QoZWxlbWVudC5zZXRCdXN5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmYWxzZSk7XG4gICAgdmFsaWRhdGVTZXRUb29sdGlwKDAsIFwiSWRsZVwiKTtcbiAgfSk7XG4gIGl0KFwic2hvd3Mgb25seSBoaXN0b3J5IHdoZW4gY3VycmVudCBpcyBub3QgcHJlc2VudFwiLCBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnVwZGF0ZShbXSwgW3sgdGl0bGU6IFwiWW9cIiwgZHVyYXRpb246IFwiMW1cIiB9XSk7XG4gICAgZXhwZWN0KGVsZW1lbnQuc2V0QnVzeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZmFsc2UpO1xuICAgIHZhbGlkYXRlU2V0VG9vbHRpcCgwLCBcIjxzdHJvbmc+SGlzdG9yeTo8L3N0cm9uZz48ZGl2PllvICgxbSk8L2Rpdj5cIik7XG4gIH0pO1xuICBpdChcInNob3dzIGJvdGggaGlzdG9yeSBhbmQgY3VycmVudCB3aGVuIGJvdGggYXJlIHByZXNlbnRcIiwgZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC51cGRhdGUoW3sgdGl0bGU6IFwiSGV5XCIgfV0sIFt7IHRpdGxlOiBcIllvXCIsIGR1cmF0aW9uOiBcIjFtXCIgfV0pO1xuICAgIGV4cGVjdChlbGVtZW50LnNldEJ1c3kpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuICAgIHZhbGlkYXRlU2V0VG9vbHRpcChcbiAgICAgIDAsXG4gICAgICBcIjxzdHJvbmc+SGlzdG9yeTo8L3N0cm9uZz48ZGl2PllvICgxbSk8L2Rpdj48c3Ryb25nPkN1cnJlbnQ6PC9zdHJvbmc+PGRpdj5IZXk8L2Rpdj5cIlxuICAgICk7XG4gIH0pO1xufSk7XG4iXX0=