Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.wantedPackage = wantedPackage;
exports.addImport = addImport;
exports.getPackage = getPackage;
exports.getRelativePackagePath = getRelativePackagePath;
exports.getCurrentGoWorkspaceFromGOPATH = getCurrentGoWorkspaceFromGOPATH;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var vendorString = '/vendor/';

function wantedPackage(buffer, pos) {
  // get the pkg the user tries to autocomplete from the current line
  var lineTillPos = buffer.getTextInRange([[pos.row, 0], pos]);
  var matches = lineTillPos.match(/(\w+)\.$/);
  if (!matches) {
    return null;
  }
  return matches[1];
}

function addImport(buffer, pkg, offset) {
  // find the "package ..." statement
  var row = -1;
  buffer.scan(/^package /, function (result) {
    row = result.row;
    if (row === undefined && result.range && result.range.start) {
      row = result.range.start.row;
    }
  });
  if (row === -1) {
    return null;
  }

  var text = buffer.getText();

  // import the "pkg" right after the package statement
  var importStmt = 'import "' + pkg + '"\n';
  var index = buffer.characterIndexForPosition([row + 1, 0]);
  var newText = text.substr(0, index) + importStmt + text.substr(index);
  var newOffset = offset + importStmt.length;
  return { text: newText, offset: newOffset };
}

function getPackage(file, gopath, pkgs, useVendor) {
  if (useVendor) {
    var dir = _path2['default'].dirname(file);
    var workspace = getCurrentGoWorkspaceFromGOPATH(gopath, dir);
    var vendorPkgs = pkgs.filter(function (pkg) {
      return pkg.lastIndexOf(vendorString) > 0;
    });
    for (var vpkg of vendorPkgs) {
      var relativePath = getRelativePackagePath(dir, workspace, vpkg);
      if (relativePath) {
        return relativePath;
      }
    }
  }

  // take the first non-vendor package
  return pkgs.find(function (pkg) {
    return pkg.lastIndexOf(vendorString) === -1;
  });
}

function getRelativePackagePath(currentDir, currentWorkspace, pkg) {
  var magicVendorString = vendorString;
  var vendorIndex = pkg.lastIndexOf(magicVendorString);
  if (vendorIndex === -1) {
    magicVendorString = 'vendor/';
    if (pkg.startsWith(magicVendorString)) {
      vendorIndex = 0;
    }
  }
  // Check if current file and the vendor pkg belong to the same root project
  // If yes, then vendor pkg can be replaced with its relative path to the "vendor" folder
  // If not, then the vendor pkg should not be allowed to be imported.
  if (vendorIndex > -1) {
    var rootProjectForVendorPkg = _path2['default'].join(currentWorkspace, pkg.substr(0, vendorIndex));
    var relativePathForVendorPkg = pkg.substring(vendorIndex + magicVendorString.length);

    if (relativePathForVendorPkg && currentDir.startsWith(rootProjectForVendorPkg)) {
      return relativePathForVendorPkg;
    }
    return '';
  }

  return pkg;
}

function getCurrentGoWorkspaceFromGOPATH(gopath, currentDir) {
  var workspaces = gopath.split(_path2['default'].delimiter);
  var currentWorkspace = '';

  // Find current workspace by checking if current file is
  // under any of the workspaces in $GOPATH
  for (var i = 0; i < workspaces.length; i++) {
    var possibleCurrentWorkspace = _path2['default'].join(workspaces[i], 'src');
    if (currentDir.startsWith(possibleCurrentWorkspace)) {
      // In case of nested workspaces, (example: both /Users/me and /Users/me/src/a/b/c are in $GOPATH)
      // both parent & child workspace in the nested workspaces pair can make it inside the above if block
      // Therefore, the below check will take longer (more specific to current file) of the two
      if (possibleCurrentWorkspace.length > currentWorkspace.length) {
        currentWorkspace = possibleCurrentWorkspace;
      }
    }
  }
  return currentWorkspace;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,