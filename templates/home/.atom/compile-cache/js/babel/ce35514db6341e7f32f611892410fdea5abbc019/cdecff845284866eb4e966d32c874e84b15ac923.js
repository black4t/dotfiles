function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/* eslint-env jasmine */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _specHelpers = require('./../spec-helpers');

var _asyncSpecHelpers = require('../async-spec-helpers');

// eslint-disable-line

'use babel';describe('tester', function () {
  var tester = null;

  (0, _asyncSpecHelpers.beforeEach)(_asyncToGenerator(function* () {
    _specHelpers.lifecycle.setup();
    atom.config.set('go-plus.test.coverageHighlightMode', 'covered-and-uncovered');
    yield _specHelpers.lifecycle.activatePackage();
    var mainModule = _specHelpers.lifecycle.mainModule;

    tester = mainModule.loadTester();
  }));

  afterEach(function () {
    _specHelpers.lifecycle.teardown();
  });

  describe('go test args', function () {
    (0, _asyncSpecHelpers.beforeEach)(function () {
      atom.config.unset('go-plus.config.additionalTestArgs');
    });

    afterEach(function () {
      atom.config.set('go-plus.test.runTestsWithShortFlag', true);
      atom.config.set('go-plus.test.runTestsWithVerboseFlag', false);
    });

    (0, _asyncSpecHelpers.it)('uses the specified timeout', function () {
      var args = tester.buildGoTestArgs(10000, false);
      var foundTimeout = false;
      for (var arg of args) {
        if (arg.startsWith('-timeout')) {
          foundTimeout = true;
          expect(arg).toBe('-timeout=10000ms');
        }
      }
      expect(foundTimeout).toBe(true);
    });

    (0, _asyncSpecHelpers.it)('invokes the go test command with a coverprofile', function () {
      var args = tester.buildGoTestArgs(10000, true);
      expect(args[0]).toBe('test');
      expect(args[1].startsWith('-coverprofile=')).toBe(true);
    });

    describe('when specifying custom args', function () {
      (0, _asyncSpecHelpers.it)('prefers timeout from the custom args (if specified)', function () {
        atom.config.set('go-plus.config.additionalTestArgs', '-timeout=4000ms');
        var args = tester.buildGoTestArgs(8000, false);
        var foundTimeout = false;
        for (var arg of args) {
          if (arg.startsWith('-timeout')) {
            foundTimeout = true;
            expect(arg).toBe('-timeout=4000ms');
          }
        }
        expect(foundTimeout).toBe(true);
      });

      (0, _asyncSpecHelpers.it)('does not duplicate the -short or -verbose flags', function () {
        atom.config.set('go-plus.test.runTestsWithShortFlag', true);
        atom.config.set('go-plus.test.runTestsWithVerboseFlag', true);
        atom.config.set('go-plus.config.additionalTestArgs', '-short -verbose');

        var args = tester.buildGoTestArgs();
        var shortFlags = args.filter(function (a) {
          return a === '-short';
        }).length;
        var verboseFlags = args.filter(function (a) {
          return a === '-v';
        }).length;

        expect(shortFlags).toBe(1);
        expect(verboseFlags).toBe(1);
      });

      (0, _asyncSpecHelpers.it)('handles args with spaces', function () {
        atom.config.set('go-plus.config.additionalTestArgs', '-myarg="hello world"  -arg2   3');
        var args = tester.buildGoTestArgs();
        expect(args.length).toBeGreaterThan(3);
        expect(args[1]).toEqual('-myarg=hello world');
        expect(args[2]).toEqual('-arg2');
        expect(args[3]).toEqual('3');
      });
    });
  });

  describe('with a gopath setup', function () {
    var gopath = null;
    var filePath = undefined;
    var editor = undefined;

    (0, _asyncSpecHelpers.beforeEach)(_asyncToGenerator(function* () {
      gopath = _path2['default'].join(__dirname, '..', 'fixtures', 'test');
      process.env.GOPATH = gopath;
      atom.project.setPaths([gopath]);

      filePath = _path2['default'].join(gopath, 'src', 'github.com', 'testuser', 'example', 'go-plus.go');

      editor = yield atom.workspace.open(filePath);
    }));

    describe('when run tests on save is enabled, but compile on save is disabled', function () {
      (0, _asyncSpecHelpers.beforeEach)(function () {
        atom.config.set('go-plus.config.compileOnSave', false);
        atom.config.set('go-plus.test.runTestsOnSave', true);
        atom.config.set('go-plus.test.runTestsWithCoverage', false);
      });

      (0, _asyncSpecHelpers.it)('runs tests', _asyncToGenerator(function* () {
        spyOn(tester, 'runTests').andCallThrough();
        yield tester.handleSaveEvent(editor);
        expect(tester.runTests).toHaveBeenCalled();
      }));

      (0, _asyncSpecHelpers.it)('updates the busy signal', _asyncToGenerator(function* () {
        var fake = function fake(title, promiseFunc) {
          return promiseFunc();
        };
        var reportBusySpy = jasmine.createSpy('reportBusyWhile').andCallFake(fake);
        spyOn(tester, 'busySignal').andReturn({
          reportBusyWhile: reportBusySpy
        });
        yield tester.handleSaveEvent(editor);
        expect(reportBusySpy.calls.length).toEqual(1);
      }));
    });

    describe('when run tests on save is disabled', function () {
      (0, _asyncSpecHelpers.beforeEach)(function () {
        atom.config.set('go-plus.test.runTestsOnSave', false);
      });

      (0, _asyncSpecHelpers.it)('does not run tests automatically on save', _asyncToGenerator(function* () {
        spyOn(tester, 'runTests');
        yield tester.handleSaveEvent(editor);
        expect(tester.runTests).not.toHaveBeenCalled();
      }));

      (0, _asyncSpecHelpers.it)('displays coverage for go source', _asyncToGenerator(function* () {
        yield tester.runTests(editor);

        var layers = tester.markedEditors.get(editor.id);
        expect(layers).toBeTruthy();
        var layerids = layers.split(',');
        var coveredLayer = editor.getMarkerLayer(layerids[0]);
        var uncoveredLayer = editor.getMarkerLayer(layerids[1]);
        expect(coveredLayer).toBeTruthy();
        expect(uncoveredLayer).toBeTruthy();

        var coveredmarkers = coveredLayer.getMarkers();
        expect(coveredmarkers).toBeDefined();
        expect(coveredmarkers.length).toBe(1);
        expect(coveredmarkers[0]).toBeDefined();
        var range = coveredmarkers[0].getBufferRange();
        expect(range.start.row).toBe(8);
        expect(range.start.column).toBe(20);
        expect(range.end.row).toBe(10);
        expect(range.end.column).toBe(1);

        var uncoveredmarkers = uncoveredLayer.getMarkers();
        expect(uncoveredmarkers).toBeDefined();
        expect(uncoveredmarkers.length).toBe(1);
        expect(uncoveredmarkers[0]).toBeDefined();
        range = uncoveredmarkers[0].getBufferRange();
        expect(range).toBeDefined();
        expect(range.start.row).toBe(4);
        expect(range.start.column).toBe(12);
        expect(range.end.row).toBe(6);
        expect(range.end.column).toBe(1);
      }));

      (0, _asyncSpecHelpers.it)('clears coverage for go source', _asyncToGenerator(function* () {
        yield tester.runTests(editor);

        var layerids = tester.markedEditors.get(editor.id).split(',');
        var coveredLayer = editor.getMarkerLayer(layerids[0]);
        var uncoveredLayer = editor.getMarkerLayer(layerids[1]);
        expect(coveredLayer).toBeTruthy();
        expect(uncoveredLayer).toBeTruthy();

        var coveredmarkers = coveredLayer.getMarkers();
        expect(coveredmarkers).toBeDefined();
        expect(coveredmarkers.length).toBe(1);
        expect(coveredmarkers[0]).toBeDefined();
        var range = coveredmarkers[0].getBufferRange();
        expect(range.start.row).toBe(8);
        expect(range.start.column).toBe(20);
        expect(range.end.row).toBe(10);
        expect(range.end.column).toBe(1);

        var uncoveredmarkers = uncoveredLayer.getMarkers();
        expect(uncoveredmarkers).toBeDefined();
        expect(uncoveredmarkers.length).toBe(1);
        expect(uncoveredmarkers[0]).toBeDefined();
        range = uncoveredmarkers[0].getBufferRange();
        expect(range).toBeDefined();
        expect(range.start.row).toBe(4);
        expect(range.start.column).toBe(12);
        expect(range.end.row).toBe(6);
        expect(range.end.column).toBe(1);

        tester.clearMarkers(editor);
        expect(coveredLayer.getMarkers().length).toBe(0);
        expect(uncoveredLayer.getMarkers().length).toBe(0);
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,