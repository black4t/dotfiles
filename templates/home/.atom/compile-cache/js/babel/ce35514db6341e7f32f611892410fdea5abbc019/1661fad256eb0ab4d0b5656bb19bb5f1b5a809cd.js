function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

// eslint-disable-next-line no-unused-vars

var _jasmineFix = require('jasmine-fix');

'use babel';

var fixturePath = (0, _path.join)(__dirname, 'fixtures');
var goodPath = (0, _path.join)(fixturePath, 'good', 'Dockerfile');
var badPath = (0, _path.join)(fixturePath, 'bad', 'Dockerfile');
var badNoFromPath = (0, _path.join)(fixturePath, 'bad-no-from', 'Dockerfile');
var badRepeatedCMDPath = (0, _path.join)(fixturePath, 'bad-repeated-cmd', 'Dockerfile');
var emptyPath = (0, _path.join)(fixturePath, 'empty', 'Dockerfile');

describe('The docker provider for Linter', function () {
  var _require$provideLinter = require('../lib/init').provideLinter();

  var lint = _require$provideLinter.lint;

  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    yield atom.packages.activatePackage('linter-docker');
  }));

  (0, _jasmineFix.it)('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-docker')).toBe(true);
  });

  (0, _jasmineFix.it)('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-docker')).toBe(true);
  });

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(goodPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
  }));

  (0, _jasmineFix.it)('shows errors in an a file with issues', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(badPath);
    var expected = 'UNKNOWN_COMMAND is invalid';
    var messages = yield lint(editor);

    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(expected);
    expect(messages[0].location.file).toBe(badPath);
    expect(messages[0].location.position).toEqual([[1, 0], [1, 15]]);
    expect(messages.length).toBe(1);
  }));

  (0, _jasmineFix.it)("shows errors in an a file without instruction 'FROM'", _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(badNoFromPath);
    var expected = "First instruction must be 'FROM', is: RUN";
    var messages = yield lint(editor);

    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(expected);
    expect(messages[0].location.file).toBe(badNoFromPath);
    expect(messages[0].location.position).toEqual([[0, 0], [0, 18]]);
    expect(messages.length).toBe(1);
  }));

  (0, _jasmineFix.it)("shows errors in an a file with repeated instruction 'CMD'", _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(badRepeatedCMDPath);
    var expected = 'Multiple CMD instructions found';
    var messages = yield lint(editor);

    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(expected);
    expect(messages[0].location.file).toBe(badRepeatedCMDPath);
    expect(messages[0].location.position).toEqual([[2, 0], [2, 10]]);
    expect(messages.length).toBe(1);
  }));

  (0, _jasmineFix.it)('shows errors in an empty file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(emptyPath);
    var expected = emptyPath + ' does not contain any instructions';
    var messages = yield lint(editor);

    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(expected);
    expect(messages[0].location.file).toBe(emptyPath);
    expect(messages[0].location.position).toEqual([[0, 0], [0, 0]]);
    expect(messages.length).toBe(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1kb2NrZXIvc3BlYy9saW50ZXItZG9ja2VyLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7b0JBRXFCLE1BQU07Ozs7MEJBRTBCLGFBQWE7O0FBSmxFLFdBQVcsQ0FBQzs7QUFNWixJQUFNLFdBQVcsR0FBRyxnQkFBSyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDaEQsSUFBTSxRQUFRLEdBQUcsZ0JBQUssV0FBVyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6RCxJQUFNLE9BQU8sR0FBRyxnQkFBSyxXQUFXLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3ZELElBQU0sYUFBYSxHQUFHLGdCQUFLLFdBQVcsRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDckUsSUFBTSxrQkFBa0IsR0FBRyxnQkFBSyxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDL0UsSUFBTSxTQUFTLEdBQUcsZ0JBQUssV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQzs7QUFFM0QsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07K0JBQzlCLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxhQUFhLEVBQUU7O01BQS9DLElBQUksMEJBQUosSUFBSTs7QUFFWixnREFBVyxhQUFZO0FBQ3JCLFVBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7R0FDdEQsRUFBQyxDQUFDOztBQUVILHNCQUFHLGdDQUFnQyxFQUFFO1dBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7R0FBQSxDQUFDLENBQUM7O0FBRXJFLHNCQUFHLDZCQUE2QixFQUFFO1dBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7R0FBQSxDQUFDLENBQUM7O0FBRXJFLHNCQUFHLHVDQUF1QyxvQkFBRSxhQUFZO0FBQ3RELFFBQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkQsUUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEMsVUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDakMsRUFBQyxDQUFDOztBQUVILHNCQUFHLHVDQUF1QyxvQkFBRSxhQUFZO0FBQ3RELFFBQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEQsUUFBTSxRQUFRLEdBQUcsNEJBQTRCLENBQUM7QUFDOUMsUUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXBDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxVQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsVUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDakMsRUFBQyxDQUFDOztBQUVILHNCQUFHLHNEQUFzRCxvQkFBRSxhQUFZO0FBQ3JFLFFBQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDeEQsUUFBTSxRQUFRLEdBQUcsMkNBQTJDLENBQUM7QUFDN0QsUUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXBDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0RCxVQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsVUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDakMsRUFBQyxDQUFDOztBQUVILHNCQUFHLDJEQUEyRCxvQkFBRSxhQUFZO0FBQzFFLFFBQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUM3RCxRQUFNLFFBQVEsR0FBRyxpQ0FBaUMsQ0FBQztBQUNuRCxRQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFcEMsVUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0MsVUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0MsVUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDM0QsVUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLFVBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ2pDLEVBQUMsQ0FBQzs7QUFFSCxzQkFBRywrQkFBK0Isb0JBQUUsYUFBWTtBQUM5QyxRQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELFFBQU0sUUFBUSxHQUFNLFNBQVMsdUNBQW9DLENBQUM7QUFDbEUsUUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXBDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsRCxVQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsVUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDakMsRUFBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Ii9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1kb2NrZXIvc3BlYy9saW50ZXItZG9ja2VyLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQgeyBpdCwgZml0LCB3YWl0LCBiZWZvcmVFYWNoLCBhZnRlckVhY2ggfSBmcm9tICdqYXNtaW5lLWZpeCc7XG5cbmNvbnN0IGZpeHR1cmVQYXRoID0gam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycpO1xuY29uc3QgZ29vZFBhdGggPSBqb2luKGZpeHR1cmVQYXRoLCAnZ29vZCcsICdEb2NrZXJmaWxlJyk7XG5jb25zdCBiYWRQYXRoID0gam9pbihmaXh0dXJlUGF0aCwgJ2JhZCcsICdEb2NrZXJmaWxlJyk7XG5jb25zdCBiYWROb0Zyb21QYXRoID0gam9pbihmaXh0dXJlUGF0aCwgJ2JhZC1uby1mcm9tJywgJ0RvY2tlcmZpbGUnKTtcbmNvbnN0IGJhZFJlcGVhdGVkQ01EUGF0aCA9IGpvaW4oZml4dHVyZVBhdGgsICdiYWQtcmVwZWF0ZWQtY21kJywgJ0RvY2tlcmZpbGUnKTtcbmNvbnN0IGVtcHR5UGF0aCA9IGpvaW4oZml4dHVyZVBhdGgsICdlbXB0eScsICdEb2NrZXJmaWxlJyk7XG5cbmRlc2NyaWJlKCdUaGUgZG9ja2VyIHByb3ZpZGVyIGZvciBMaW50ZXInLCAoKSA9PiB7XG4gIGNvbnN0IHsgbGludCB9ID0gcmVxdWlyZSgnLi4vbGliL2luaXQnKS5wcm92aWRlTGludGVyKCk7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2xpbnRlci1kb2NrZXInKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBpbiB0aGUgcGFja2FnZXMgbGlzdCcsICgpID0+XG4gICAgZXhwZWN0KGF0b20ucGFja2FnZXMuaXNQYWNrYWdlTG9hZGVkKCdsaW50ZXItZG9ja2VyJykpLnRvQmUodHJ1ZSkpO1xuXG4gIGl0KCdzaG91bGQgYmUgYW4gYWN0aXZlIHBhY2thZ2UnLCAoKSA9PlxuICAgIGV4cGVjdChhdG9tLnBhY2thZ2VzLmlzUGFja2FnZUFjdGl2ZSgnbGludGVyLWRvY2tlcicpKS50b0JlKHRydWUpKTtcblxuICBpdCgnZmluZHMgbm90aGluZyB3cm9uZyB3aXRoIGEgdmFsaWQgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBlZGl0b3IgPSBhd2FpdCBhdG9tLndvcmtzcGFjZS5vcGVuKGdvb2RQYXRoKTtcbiAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGxpbnQoZWRpdG9yKTtcbiAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0JlKDApO1xuICB9KTtcblxuICBpdCgnc2hvd3MgZXJyb3JzIGluIGFuIGEgZmlsZSB3aXRoIGlzc3VlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBlZGl0b3IgPSBhd2FpdCBhdG9tLndvcmtzcGFjZS5vcGVuKGJhZFBhdGgpO1xuICAgIGNvbnN0IGV4cGVjdGVkID0gJ1VOS05PV05fQ09NTUFORCBpcyBpbnZhbGlkJztcbiAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGxpbnQoZWRpdG9yKTtcblxuICAgIGV4cGVjdChtZXNzYWdlc1swXS5zZXZlcml0eSkudG9CZSgnZXJyb3InKTtcbiAgICBleHBlY3QobWVzc2FnZXNbMF0uZXhjZXJwdCkudG9CZShleHBlY3RlZCk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmxvY2F0aW9uLmZpbGUpLnRvQmUoYmFkUGF0aCk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmxvY2F0aW9uLnBvc2l0aW9uKS50b0VxdWFsKFtbMSwgMF0sIFsxLCAxNV1dKTtcbiAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdChcInNob3dzIGVycm9ycyBpbiBhbiBhIGZpbGUgd2l0aG91dCBpbnN0cnVjdGlvbiAnRlJPTSdcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGVkaXRvciA9IGF3YWl0IGF0b20ud29ya3NwYWNlLm9wZW4oYmFkTm9Gcm9tUGF0aCk7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBcIkZpcnN0IGluc3RydWN0aW9uIG11c3QgYmUgJ0ZST00nLCBpczogUlVOXCI7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBsaW50KGVkaXRvcik7XG5cbiAgICBleHBlY3QobWVzc2FnZXNbMF0uc2V2ZXJpdHkpLnRvQmUoJ2Vycm9yJyk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmV4Y2VycHQpLnRvQmUoZXhwZWN0ZWQpO1xuICAgIGV4cGVjdChtZXNzYWdlc1swXS5sb2NhdGlvbi5maWxlKS50b0JlKGJhZE5vRnJvbVBhdGgpO1xuICAgIGV4cGVjdChtZXNzYWdlc1swXS5sb2NhdGlvbi5wb3NpdGlvbikudG9FcXVhbChbWzAsIDBdLCBbMCwgMThdXSk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG93cyBlcnJvcnMgaW4gYW4gYSBmaWxlIHdpdGggcmVwZWF0ZWQgaW5zdHJ1Y3Rpb24gJ0NNRCdcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGVkaXRvciA9IGF3YWl0IGF0b20ud29ya3NwYWNlLm9wZW4oYmFkUmVwZWF0ZWRDTURQYXRoKTtcbiAgICBjb25zdCBleHBlY3RlZCA9ICdNdWx0aXBsZSBDTUQgaW5zdHJ1Y3Rpb25zIGZvdW5kJztcbiAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGxpbnQoZWRpdG9yKTtcblxuICAgIGV4cGVjdChtZXNzYWdlc1swXS5zZXZlcml0eSkudG9CZSgnZXJyb3InKTtcbiAgICBleHBlY3QobWVzc2FnZXNbMF0uZXhjZXJwdCkudG9CZShleHBlY3RlZCk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmxvY2F0aW9uLmZpbGUpLnRvQmUoYmFkUmVwZWF0ZWRDTURQYXRoKTtcbiAgICBleHBlY3QobWVzc2FnZXNbMF0ubG9jYXRpb24ucG9zaXRpb24pLnRvRXF1YWwoW1syLCAwXSwgWzIsIDEwXV0pO1xuICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvQmUoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBlcnJvcnMgaW4gYW4gZW1wdHkgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBlZGl0b3IgPSBhd2FpdCBhdG9tLndvcmtzcGFjZS5vcGVuKGVtcHR5UGF0aCk7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBgJHtlbXB0eVBhdGh9IGRvZXMgbm90IGNvbnRhaW4gYW55IGluc3RydWN0aW9uc2A7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBsaW50KGVkaXRvcik7XG5cbiAgICBleHBlY3QobWVzc2FnZXNbMF0uc2V2ZXJpdHkpLnRvQmUoJ2Vycm9yJyk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmV4Y2VycHQpLnRvQmUoZXhwZWN0ZWQpO1xuICAgIGV4cGVjdChtZXNzYWdlc1swXS5sb2NhdGlvbi5maWxlKS50b0JlKGVtcHR5UGF0aCk7XG4gICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmxvY2F0aW9uLnBvc2l0aW9uKS50b0VxdWFsKFtbMCwgMF0sIFswLCAwXV0pO1xuICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvQmUoMSk7XG4gIH0pO1xufSk7XG4iXX0=