Object.defineProperty(exports, '__esModule', {
  value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _redux = require('redux');

var _storeUtils = require('./store-utils');

'use babel';

var assign = function assign() {
  for (var _len = arguments.length, items = Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }

  return Object.assign.apply(Object, [{}].concat(items));
};

function updateArrayItem(array, index, o) {
  if (index === -1) {
    return array;
  }
  return array.slice(0, index).concat(assign(array[index], o), array.slice(index + 1));
}
function removeArrayItem(array, index) {
  return index === -1 ? array : array.slice(0, index).concat(array.slice(index + 1));
}

function stacktrace(state, action) {
  if (state === undefined) state = [];

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return [];

    case 'UPDATE_STACKTRACE':
      // attempt to copy the variables over to the new stacktrace
      return action.stacktrace.map(function (stack) {
        var existingStack = state.find(function (st, i) {
          return i > 0 && st.id === stack.id;
        });
        if (!stack.variables && existingStack) {
          stack.variables = existingStack.variables;
        }
        return stack;
      });

    case 'UPDATE_VARIABLES':
      var variables = state[action.stacktraceIndex].variables;
      if (action.path) {
        // update the variable at "path" to loaded
        variables = assign(variables, _defineProperty({}, action.path, assign(variables[action.path], { loaded: true })));
      }

      variables = assign(variables, action.variables);
      return updateArrayItem(state, action.stacktraceIndex, { variables: variables });
  }
  return state;
}
function goroutines(state, action) {
  if (state === undefined) state = [];

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return [];

    case 'UPDATE_GOROUTINES':
      return action.goroutines;
  }
  return state;
}
var bpNamePostfix = 0;
var breakpointSorter = function breakpointSorter(a, b) {
  var s = a.file.localeCompare(b.file);
  return s !== 0 ? s : a.line - b.line;
};
function breakpoints(state, action) {
  if (state === undefined) state = [];
  var bp = action.bp;

  var _ref2 = bp || {};

  var name = _ref2.name;
  var file = _ref2.file;
  var line = _ref2.line;

  var index = name ? (0, _storeUtils.indexOfBreakpointByName)(state, name) : (0, _storeUtils.indexOfBreakpoint)(state, file, line);
  switch (action.type) {
    case 'ADD_BREAKPOINT':
      if (index === -1) {
        bp.name = 'bp' + bpNamePostfix++;
        return state.concat(bp).sort(breakpointSorter);
      }
      return state;

    case 'REMOVE_BREAKPOINT':
      return removeArrayItem(state, index);

    case 'EDIT_BREAKPOINT':
      if (index !== -1) {
        if (bp.state !== 'error') {
          bp = assign(bp, { message: null });
        }
        return updateArrayItem(state, index, bp);
      }
      return state;

    case 'STOP':
      return state.map(function (bp) {
        var changes = { state: 'notStarted' };
        if (bp.state === 'error') {
          changes.message = null;
        }
        return assign(bp, changes);
      });

    case 'INIT_STORE':
      return state.map(function (bp) {
        return assign(bp, { name: 'bp' + bpNamePostfix++, state: 'notStarted' });
      }).sort(breakpointSorter);
  }

  return state;
}
function state(state, action) {
  if (state === undefined) state = 'notStarted';

  switch (action.type) {
    case 'STOP':
      return 'notStarted';

    case 'RESTART':
      return 'waiting';

    case 'SET_STATE':
      return action.state;
  }
  return state;
}
function selectedStacktrace(state, action) {
  if (state === undefined) state = 0;

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return 0;

    case 'SET_SELECTED_STACKTRACE':
      return action.index;

    case 'UPDATE_STACKTRACE':
      return 0; // set back to the first function on each update
  }
  return state;
}
function selectedGoroutine(state, action) {
  if (state === undefined) state = 0;

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return 0;

    case 'SET_SELECTED_GOROUTINE':
      return action.id;
  }
  return state;
}
var defaultWatchExpressionVariables = function defaultWatchExpressionVariables(expr) {
  return _defineProperty({}, expr, {
    name: expr,
    loaded: true,
    hasChildren: false,
    value: '<not available>',
    parentPath: '',
    type: 'string'
  });
};
function watchExpressions(state, action) {
  if (state === undefined) state = [];

  switch (action.type) {
    case 'RESTART':
    case 'STOP':
      return state.map(function (o) {
        return assign(o, { variables: defaultWatchExpressionVariables(o.expr) });
      });

    case 'ADD_WATCH_EXPRESSION':
      return state.concat({
        expr: action.expr,
        variables: defaultWatchExpressionVariables(action.expr)
      });

    case 'REMOVE_WATCH_EXPRESSION':
      {
        var index = state.findIndex(function (o) {
          return o.expr === action.expr;
        });
        return removeArrayItem(state, index);
      }

    case 'SET_WATCH_EXPRESSION_VARIABLES':
      {
        var index = state.findIndex(function (o) {
          return o.expr === action.expr;
        });
        return updateArrayItem(state, index, {
          variables: action.variables
        });
      }
  }
  return state;
}

var delve = (0, _redux.combineReducers)({
  stacktrace: stacktrace,
  goroutines: goroutines,
  breakpoints: breakpoints,
  state: state,
  selectedStacktrace: selectedStacktrace,
  selectedGoroutine: selectedGoroutine,
  watchExpressions: watchExpressions
});

function content(state, action) {
  if (state === undefined) state = [];

  switch (action.type) {
    case 'CLEAR_OUTPUT_CONTENT':
      return [];

    case 'ADD_OUTPUT_CONTENT':
      return state.concat(action.content);
  }
  return state;
}

var output = (0, _redux.combineReducers)({
  content: content
});

function selectedConfig(state, action) {
  if (state === undefined) state = '';

  switch (action.type) {
    case 'SET_SELECTED_CONFIG':
      return action.configName || '';
  }
  return state;
}
function configurations(state, action) {
  if (state === undefined) state = [];

  if (action.type === 'SET_CONFIGURATION') {
    return action.configurations;
  }
  return state;
}

exports['default'] = function (state) {
  if (state && state.panel) {
    delete state.panel;
  }

  var store = (0, _redux.createStore)((0, _redux.combineReducers)({
    delve: delve,
    output: output,
    selectedConfig: selectedConfig,
    configurations: configurations
  }), state);

  // init the store (upgrades the previous state so it is usable again)
  store.dispatch({ type: 'INIT_STORE' });

  return store;
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,