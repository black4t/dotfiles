
/* eslint-env jasmine */

var _specHelpers = require('./spec-helpers');

var _libUtils = require('./../lib/utils');

'use babel';

describe('utils', function () {
  beforeEach(function () {
    _specHelpers.lifecycle.setup();
  });

  afterEach(function () {
    _specHelpers.lifecycle.teardown();
  });

  describe('parseGoPosition(identifier)', function () {
    it('parses unix paths', function () {
      var parsed = (0, _libUtils.parseGoPosition)('/private/temp/src/gopath-11726-3832-1xl0vhg.4128uayvi/src/what/doc.go:23:2');
      expect(parsed).toBeTruthy();
      expect(parsed.file).toBe('/private/temp/src/gopath-11726-3832-1xl0vhg.4128uayvi/src/what/doc.go');
      expect(parsed.line).toBe(23);
      expect(parsed.column).toBe(2);
    });

    it('parses windows paths', function () {
      var parsed = (0, _libUtils.parseGoPosition)('C:\\Users\\vagrant\\AppData\\Local\\Temp\\2\\gopath-11726-3832-1xl0vhg.4128uayvi\\src\\what\\doc.go:23:2');
      expect(parsed).toBeTruthy();
      expect(parsed.file).toBe('C:\\Users\\vagrant\\AppData\\Local\\Temp\\2\\gopath-11726-3832-1xl0vhg.4128uayvi\\src\\what\\doc.go');
      expect(parsed.line).toBe(23);
      expect(parsed.column).toBe(2);
    });
  });

  describe('stat', function () {
    it('is rejected for nonexistent files', function () {
      var result = undefined,
          err = undefined;

      waitsForPromise(function () {
        return (0, _libUtils.stat)('nonexistentthing').then(function (r) {
          return result = r;
        })['catch'](function (e) {
          return err = e;
        });
      });

      runs(function () {
        expect(result).toBeFalsy();
        expect(err).toBeTruthy();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLXBsdXMvc3BlYy91dGlscy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OzsyQkFHMEIsZ0JBQWdCOzt3QkFDSixnQkFBZ0I7O0FBSnRELFdBQVcsQ0FBQTs7QUFNWCxRQUFRLENBQUMsT0FBTyxFQUFFLFlBQU07QUFDdEIsWUFBVSxDQUFDLFlBQU07QUFDZiwyQkFBVSxLQUFLLEVBQUUsQ0FBQTtHQUNsQixDQUFDLENBQUE7O0FBRUYsV0FBUyxDQUFDLFlBQU07QUFDZCwyQkFBVSxRQUFRLEVBQUUsQ0FBQTtHQUNyQixDQUFDLENBQUE7O0FBRUYsVUFBUSxDQUFDLDZCQUE2QixFQUFFLFlBQU07QUFDNUMsTUFBRSxDQUFDLG1CQUFtQixFQUFFLFlBQU07QUFDNUIsVUFBTSxNQUFNLEdBQUcsK0JBQ2IsNEVBQTRFLENBQzdFLENBQUE7QUFDRCxZQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7QUFDM0IsWUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ3RCLHVFQUF1RSxDQUN4RSxDQUFBO0FBQ0QsWUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDNUIsWUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDOUIsQ0FBQyxDQUFBOztBQUVGLE1BQUUsQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0FBQy9CLFVBQU0sTUFBTSxHQUFHLCtCQUNiLDBHQUEwRyxDQUMzRyxDQUFBO0FBQ0QsWUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFBO0FBQzNCLFlBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUN0QixxR0FBcUcsQ0FDdEcsQ0FBQTtBQUNELFlBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzVCLFlBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQzlCLENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTs7QUFFRixVQUFRLENBQUMsTUFBTSxFQUFFLFlBQU07QUFDckIsTUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07QUFDNUMsVUFBSSxNQUFNLFlBQUE7VUFBRSxHQUFHLFlBQUEsQ0FBQTs7QUFFZixxQkFBZSxDQUFDLFlBQU07QUFDcEIsZUFBTyxvQkFBSyxrQkFBa0IsQ0FBQyxDQUM1QixJQUFJLENBQUMsVUFBQSxDQUFDO2lCQUFLLE1BQU0sR0FBRyxDQUFDO1NBQUMsQ0FBQyxTQUNsQixDQUFDLFVBQUEsQ0FBQztpQkFBSyxHQUFHLEdBQUcsQ0FBQztTQUFDLENBQUMsQ0FBQTtPQUN6QixDQUFDLENBQUE7O0FBRUYsVUFBSSxDQUFDLFlBQU07QUFDVCxjQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUE7QUFDMUIsY0FBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFBO09BQ3pCLENBQUMsQ0FBQTtLQUNILENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtDQUNILENBQUMsQ0FBQSIsImZpbGUiOiIvaG9tZS9teXVnYS8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvdXRpbHMtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG4vKiBlc2xpbnQtZW52IGphc21pbmUgKi9cblxuaW1wb3J0IHsgbGlmZWN5Y2xlIH0gZnJvbSAnLi9zcGVjLWhlbHBlcnMnXG5pbXBvcnQgeyBwYXJzZUdvUG9zaXRpb24sIHN0YXQgfSBmcm9tICcuLy4uL2xpYi91dGlscydcblxuZGVzY3JpYmUoJ3V0aWxzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBsaWZlY3ljbGUuc2V0dXAoKVxuICB9KVxuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgbGlmZWN5Y2xlLnRlYXJkb3duKClcbiAgfSlcblxuICBkZXNjcmliZSgncGFyc2VHb1Bvc2l0aW9uKGlkZW50aWZpZXIpJywgKCkgPT4ge1xuICAgIGl0KCdwYXJzZXMgdW5peCBwYXRocycsICgpID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlR29Qb3NpdGlvbihcbiAgICAgICAgJy9wcml2YXRlL3RlbXAvc3JjL2dvcGF0aC0xMTcyNi0zODMyLTF4bDB2aGcuNDEyOHVheXZpL3NyYy93aGF0L2RvYy5nbzoyMzoyJ1xuICAgICAgKVxuICAgICAgZXhwZWN0KHBhcnNlZCkudG9CZVRydXRoeSgpXG4gICAgICBleHBlY3QocGFyc2VkLmZpbGUpLnRvQmUoXG4gICAgICAgICcvcHJpdmF0ZS90ZW1wL3NyYy9nb3BhdGgtMTE3MjYtMzgzMi0xeGwwdmhnLjQxMjh1YXl2aS9zcmMvd2hhdC9kb2MuZ28nXG4gICAgICApXG4gICAgICBleHBlY3QocGFyc2VkLmxpbmUpLnRvQmUoMjMpXG4gICAgICBleHBlY3QocGFyc2VkLmNvbHVtbikudG9CZSgyKVxuICAgIH0pXG5cbiAgICBpdCgncGFyc2VzIHdpbmRvd3MgcGF0aHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUdvUG9zaXRpb24oXG4gICAgICAgICdDOlxcXFxVc2Vyc1xcXFx2YWdyYW50XFxcXEFwcERhdGFcXFxcTG9jYWxcXFxcVGVtcFxcXFwyXFxcXGdvcGF0aC0xMTcyNi0zODMyLTF4bDB2aGcuNDEyOHVheXZpXFxcXHNyY1xcXFx3aGF0XFxcXGRvYy5nbzoyMzoyJ1xuICAgICAgKVxuICAgICAgZXhwZWN0KHBhcnNlZCkudG9CZVRydXRoeSgpXG4gICAgICBleHBlY3QocGFyc2VkLmZpbGUpLnRvQmUoXG4gICAgICAgICdDOlxcXFxVc2Vyc1xcXFx2YWdyYW50XFxcXEFwcERhdGFcXFxcTG9jYWxcXFxcVGVtcFxcXFwyXFxcXGdvcGF0aC0xMTcyNi0zODMyLTF4bDB2aGcuNDEyOHVheXZpXFxcXHNyY1xcXFx3aGF0XFxcXGRvYy5nbydcbiAgICAgIClcbiAgICAgIGV4cGVjdChwYXJzZWQubGluZSkudG9CZSgyMylcbiAgICAgIGV4cGVjdChwYXJzZWQuY29sdW1uKS50b0JlKDIpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnc3RhdCcsICgpID0+IHtcbiAgICBpdCgnaXMgcmVqZWN0ZWQgZm9yIG5vbmV4aXN0ZW50IGZpbGVzJywgKCkgPT4ge1xuICAgICAgbGV0IHJlc3VsdCwgZXJyXG5cbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBzdGF0KCdub25leGlzdGVudHRoaW5nJylcbiAgICAgICAgICAudGhlbihyID0+IChyZXN1bHQgPSByKSlcbiAgICAgICAgICAuY2F0Y2goZSA9PiAoZXJyID0gZSkpXG4gICAgICB9KVxuXG4gICAgICBydW5zKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZUZhbHN5KClcbiAgICAgICAgZXhwZWN0KGVycikudG9CZVRydXRoeSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59KVxuIl19