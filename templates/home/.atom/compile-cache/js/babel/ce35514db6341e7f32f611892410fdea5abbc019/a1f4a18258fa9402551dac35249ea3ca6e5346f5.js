function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/* eslint-env jasmine */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libOutlineOutlineProvider = require('../../lib/outline/outline-provider');

var _libConfigService = require('../../lib/config/service');

var _asyncSpecHelpers = require('../async-spec-helpers');

// eslint-disable-line

'use babel';describe('Outline Provider', function () {
  var editor = undefined;
  var provider = undefined;
  var outline = undefined;

  (0, _asyncSpecHelpers.beforeEach)(_asyncToGenerator(function* () {
    provider = new _libOutlineOutlineProvider.OutlineProvider(new _libConfigService.ConfigService().provide());

    var p = _path2['default'].join(__dirname, '..', 'fixtures', 'outline', 'outline.go');
    editor = yield atom.workspace.open(p);

    outline = yield provider.getOutline(editor);
  }));

  (0, _asyncSpecHelpers.it)('returns an outline', function () {
    expect(outline).toBeDefined();
    expect(outline.outlineTrees).toBeDefined();
    expect(outline.outlineTrees.length).toEqual(1);
  });

  (0, _asyncSpecHelpers.it)('returns the file at the root of the outline', function () {
    var f = outline.outlineTrees[0];
    expect(f.kind).toEqual('file');
    expect(f.plainText).toEqual('main');
    expect(f.representativeName).toEqual('main');
    expect(f.startPosition.row).toEqual(0);
    expect(f.startPosition.column).toEqual(0);
    expect(f.children.length).toEqual(12);
  });

  (0, _asyncSpecHelpers.it)('returns packages for imports', function () {
    var f = outline.outlineTrees[0];
    var packages = f.children.filter(function (o) {
      return o.kind === 'package';
    });
    expect(packages.length).toEqual(2);

    expect(packages[0].plainText).toEqual('"fmt"');
    expect(packages[0].startPosition.row).toEqual(3);
    expect(packages[0].startPosition.column).toEqual(1);
    expect(packages[0].endPosition.row).toEqual(3);
    expect(packages[0].endPosition.column).toEqual(6);

    expect(packages[1].plainText).toEqual('"io"');
    expect(packages[1].startPosition.row).toEqual(4);
    expect(packages[1].startPosition.column).toEqual(1);
    expect(packages[1].endPosition.row).toEqual(4);
    expect(packages[1].endPosition.column).toEqual(5);
  });

  (0, _asyncSpecHelpers.it)('identifies single-line constants', function () {
    var f = outline.outlineTrees[0];
    var consts = f.children.filter(function (o) {
      return o.plainText === 'Answer';
    });
    expect(consts.length).toEqual(1);
    expect(consts[0].kind).toEqual('constant');
  });

  (0, _asyncSpecHelpers.it)('identifies interfaces', function () {
    var f = outline.outlineTrees[0];
    var ifaces = f.children.filter(function (o) {
      return o.kind === 'interface';
    });
    expect(ifaces.length).toEqual(1);
    expect(ifaces[0].plainText).toEqual('Fooer');
    expect(ifaces[0].startPosition.row).toEqual(19);
    expect(ifaces[0].startPosition.column).toEqual(5);
    expect(ifaces[0].endPosition.row).toEqual(21);
    expect(ifaces[0].endPosition.column).toEqual(1);
  });

  (0, _asyncSpecHelpers.it)('identifies methods', function () {
    var f = outline.outlineTrees[0];
    var methods = f.children.filter(function (o) {
      return o.kind === 'method';
    });
    expect(methods.length).toEqual(1);
    expect(methods[0].plainText).toEqual('(Number).ToInt');
  });

  (0, _asyncSpecHelpers.it)('identifies functions', function () {
    var f = outline.outlineTrees[0];
    var funcs = f.children.filter(function (o) {
      return o.kind === 'function';
    });
    expect(funcs.length).toEqual(1);
    expect(funcs[0].plainText).toEqual('Hello');
  });

  (0, _asyncSpecHelpers.it)('identifies structs', function () {
    var f = outline.outlineTrees[0];
    var ss = f.children.filter(function (o) {
      return o.plainText === 'S';
    });
    expect(ss.length).toEqual(1);
    var s = ss[0];
    expect(s.kind).toEqual('class');
  });

  (0, _asyncSpecHelpers.it)('identifies type definitions', function () {
    var f = outline.outlineTrees[0];
    var nums = f.children.filter(function (o) {
      return o.plainText === 'Number';
    });
    expect(nums.length).toEqual(1);

    // TODO: there's no icon for type, so provide a custom icon here..
    expect(nums[0].kind).toEqual('type'); // there's no icon for type
  });

  (0, _asyncSpecHelpers.it)('identifies variables', function () {
    var f = outline.outlineTrees[0];
    var rs = f.children.filter(function (o) {
      return o.plainText === 'r';
    });
    expect(rs.length).toEqual(1);
    expect(rs[0].kind).toEqual('variable');
  });

  (0, _asyncSpecHelpers.it)('identifies constants/enums', function () {
    // go-outline doesn't provide this for us
    var f = outline.outlineTrees[0];
    var items = f.children.filter(function (o) {
      return ['A', 'B', 'C'].includes(o.plainText);
    });
    expect(items.length).toEqual(3);

    // TODO: expect kind to be constant or enum instead
    items.forEach(function (i) {
      return expect(i.kind).toEqual('variable');
    });
  });

  (0, _asyncSpecHelpers.it)('handles multi-byte characters in the input file', function () {
    // TODO ...
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,