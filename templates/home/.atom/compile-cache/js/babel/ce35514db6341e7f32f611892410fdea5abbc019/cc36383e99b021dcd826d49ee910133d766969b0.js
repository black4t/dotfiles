function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/* eslint-env jasmine */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libOrchestrator = require('./../lib/orchestrator');

var _asyncSpecHelpers = require('./async-spec-helpers');

// eslint-disable-line

'use babel';describe('orchestrator', function () {
  var orchestrator = null;

  (0, _asyncSpecHelpers.beforeEach)(_asyncToGenerator(function* () {
    orchestrator = new _libOrchestrator.Orchestrator();
    yield atom.packages.activatePackage('language-go');
  }));

  afterEach(function () {
    orchestrator.dispose();
  });

  describe('register', function () {
    (0, _asyncSpecHelpers.it)('throws an error if a callback is not provided', function () {
      expect(function () {
        orchestrator.register('test');
      }).toThrow();
    });

    (0, _asyncSpecHelpers.it)('throws an error if the callback is not a function', function () {
      expect(function () {
        orchestrator.register('test', 42);
      }).toThrow();
    });

    (0, _asyncSpecHelpers.it)('registers a callback that can be unregistered', function () {
      var callback = function callback() {};
      var disp = orchestrator.register('test', callback);
      expect(orchestrator.didSaveCallbacks.size).toBe(1);

      disp.dispose();
      expect(orchestrator.didSaveCallbacks.size).toBe(0);
    });

    (0, _asyncSpecHelpers.it)('runs a single callback', _asyncToGenerator(function* () {
      var called = false;
      var callback = function callback() {
        called = true;
        return Promise.resolve(true);
      };
      orchestrator.register('test', callback);

      var filepath = _path2['default'].join(__dirname, 'fixtures', 'main.go');
      var editor = yield atom.workspace.open(filepath);
      yield editor.save();
      expect(called).toBe(true);
    }));

    (0, _asyncSpecHelpers.it)('runs multiple callbacks', function () {
      var called = [false, false];

      (0, _asyncSpecHelpers.runs)(_asyncToGenerator(function* () {
        var callback0 = function callback0() {
          called[0] = true;
          return Promise.resolve(true);
        };
        var callback1 = function callback1() {
          called[1] = true;
          return Promise.resolve(true);
        };
        orchestrator.register('callback0', callback0);
        orchestrator.register('callback1', callback1);

        var filepath = _path2['default'].join(__dirname, 'fixtures', 'main.go');
        var editor = yield atom.workspace.open(filepath);
        yield editor.save();
      }));

      waitsFor(function () {
        return called[0] === true && called[1] === true;
      }, 'Both callbacks should be called', 1000);

      (0, _asyncSpecHelpers.runs)(function () {
        expect(called[0]).toBe(true);
        expect(called[1]).toBe(true);
      });
    });

    (0, _asyncSpecHelpers.it)('stops invoking callbacks when a promise is rejected', _asyncToGenerator(function* () {
      var called = [false, false];
      var callback0 = function callback0() {
        called[0] = true;
        return Promise.reject(new Error());
      };
      var callback1 = function callback1() {
        called[1] = true;
        return Promise.resolve(true);
      };
      orchestrator.register('callback0', callback0);
      orchestrator.register('callback1', callback1);

      var filepath = _path2['default'].join(__dirname, 'fixtures', 'main.go');
      var editor = yield atom.workspace.open(filepath);
      yield editor.save();

      expect(called[0]).toBe(true);
      expect(called[1]).toBe(false);
    }));
  });

  describe('register / onWillSave', function () {
    (0, _asyncSpecHelpers.it)('throws an error if a callback is not provided', function () {
      expect(function () {
        orchestrator.register('test', undefined, 'willSave');
      }).toThrow();
    });

    (0, _asyncSpecHelpers.it)('throws an error if the callback is not a function', function () {
      expect(function () {
        orchestrator.register('test', 42, 'willSave');
      }).toThrow();
    });

    (0, _asyncSpecHelpers.it)('registers a callback that can be unregistered', function () {
      var callback = function callback() {};
      var disp = orchestrator.register('test', callback, 'willSave');
      expect(orchestrator.willSaveCallbacks.size).toBe(1);

      disp.dispose();
      expect(orchestrator.willSaveCallbacks.size).toBe(0);
    });

    (0, _asyncSpecHelpers.it)('runs a single callback', _asyncToGenerator(function* () {
      var called = false;

      var callback = function callback() {
        called = true;
        return true;
      };
      orchestrator.register('test', callback, 'willSave');

      var filepath = _path2['default'].join(__dirname, 'fixtures', 'main.go');
      var editor = yield atom.workspace.open(filepath);
      yield editor.save();
      expect(called).toBe(true);
    }));

    (0, _asyncSpecHelpers.it)('runs multiple callbacks', _asyncToGenerator(function* () {
      var called = [false, false];

      var callback0 = function callback0() {
        called[0] = true;
        return true;
      };
      var callback1 = function callback1() {
        called[1] = true;
        return true;
      };
      orchestrator.register('test', callback0, 'willSave');
      orchestrator.register('test', callback1, 'willSave');

      var filepath = _path2['default'].join(__dirname, 'fixtures', 'main.go');
      var editor = yield atom.workspace.open(filepath);
      yield editor.save();

      expect(called[0]).toBe(true);
      expect(called[1]).toBe(true);
    }));

    (0, _asyncSpecHelpers.it)('stops invoking callbacks when encountering a non-true return value', _asyncToGenerator(function* () {
      var called = [false, false];

      var callback0 = function callback0() {
        called[0] = true;
        return false;
      };
      var callback1 = function callback1() {
        called[1] = true;
        return true;
      };
      orchestrator.register('test', callback0, 'willSave');
      orchestrator.register('test', callback1, 'willSave');

      var filepath = _path2['default'].join(__dirname, 'fixtures', 'main.go');
      var editor = yield atom.workspace.open(filepath);
      yield editor.save();

      expect(called[0]).toBe(true);
      expect(called[1]).toBe(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,