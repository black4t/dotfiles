(function() {
  describe('Add new list items', function() {
    var editor;
    editor = null;
    beforeEach(function() {
      waitsForPromise(function() {
        atom.workspace.open();
        return atom.packages.activatePackage('language-markdown');
      });
      return runs(function() {
        editor = atom.workspace.getActiveTextEditor();
        return editor.setGrammar(atom.grammars.grammarForScopeName('text.md'));
      });
    });
    it('ignores `setCursorBufferPosition`', function() {
      editor.setText('0123');
      editor.setCursorBufferPosition(0, 4);
      expect(editor.getCursorBufferPosition().column).toBe(0);
      editor.insertText('x');
      return expect(editor.getText()).toBe('x0123');
    });
    it('updates cursor position properly on `insertText`', function() {
      editor.insertText('0123');
      expect(editor.getCursorBufferPosition().column).toBe(4);
      editor.insertText('x');
      expect(editor.getCursorBufferPosition().column).toBe(5);
      return expect(editor.getText()).toBe('0123x');
    });
    it('should not create new list item on newline when disabled', function() {
      atom.config.set('language-markdown.addListItems', false);
      expect(atom.config.get('language-markdown.addListItems')).toBe(false);
      editor.insertText('- item');
      editor.insertNewline();
      return expect(editor.getText()).toBe('- item\n');
    });
    it('should create new list item on newline', function() {
      editor.insertText('- item');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('- item\n- ');
    });
    it('should reproduce whitespaces between list item and content', function() {
      editor.insertText('-   item');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('-   item\n-   ');
    });
    it('should reproduce tabs between list item and content', function() {
      editor.insertText('-\titem');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('-\titem\n-\t');
    });
    it('should work with autoindent', function() {
      editor.insertText('    - item');
      editor.autoIndent = true;
      editor.insertText('\n');
      return expect(editor.getText()).toBe('    - item\n    - ');
    });
    it('should reproduce whitespaces in nested lists, with help from autoindent', function() {
      editor.insertText('-  item 1\n  -  item 2');
      editor.autoIndent = true;
      editor.insertText('\n');
      return expect(editor.getText()).toBe('-  item 1\n  -  item 2\n  -  ');
    });
    it('increments the count of numbered list items', function() {
      editor.insertText('1. One');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('1. One\n2. ');
    });
    it('reproduces the previous line\'s whitespace with numbered list items', function() {
      editor.insertText('1.   One');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('1.   One\n2.   ');
    });
    it('should not remove empty list items when disabled', function() {
      atom.config.set('language-markdown.removeEmptyListItems', false);
      editor.insertText('- item');
      editor.insertText('\n');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('- item\n- \n');
    });
    it('should remove empty list items', function() {
      editor.insertText('- item');
      editor.insertText('\n');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('- item\n\n');
    });
    return it('should remove empty list items with multiple whitespaces', function() {
      editor.insertText('-   item');
      editor.insertText('\n');
      editor.insertText('\n');
      return expect(editor.getText()).toBe('-   item\n\n');
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
