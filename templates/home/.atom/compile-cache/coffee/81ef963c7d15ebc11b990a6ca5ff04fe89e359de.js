(function() {
  var StyleLine;

  StyleLine = require("../../lib/commands/style-line");

  describe("StyleLine", function() {
    var editor;
    editor = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open("empty.markdown");
      });
      return runs(function() {
        return editor = atom.workspace.getActiveTextEditor();
      });
    });
    describe("blockquote", function() {
      it("insert empty blockquote", function() {
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> ");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("insert blockquote in long text", function() {
        var text;
        text = "3. Consider a (ordered or unordered) markdown list. On apply style to the line, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/257";
        editor.setText(text);
        editor.setCursorBufferPosition([0, 4]);
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> " + text);
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      it("insert blockquote in indented text", function() {
        var text;
        text = "  In every day, there are 1,440 minutes. That means we have 1,440 daily opportunities to make a positive impact.";
        editor.setText(text);
        editor.setCursorBufferPosition([0, 10]);
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> " + text);
        return expect(editor.getCursorBufferPosition().column).toBe(12);
      });
      return it("remove blockquote", function() {
        editor.setText("> blockquote");
        editor.setCursorBufferPosition([0, 4]);
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("blockquote");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
    });
    describe("headings", function() {
      it("apply heading 2", function() {
        editor.setText("# heading");
        editor.setCursorBufferPosition([0, 3]);
        new StyleLine("h2").trigger();
        expect(editor.getText()).toBe("## heading");
        return expect(editor.getCursorBufferPosition().column).toBe(4);
      });
      it("remove heading 3", function() {
        editor.setText("### heading");
        editor.setCursorBufferPosition([0, 7]);
        new StyleLine("h3").trigger();
        expect(editor.getText()).toBe("heading");
        return expect(editor.getCursorBufferPosition().column).toBe(3);
      });
      return it("apply/remove heading 5", function() {
        atom.config.set("markdown-writer.lineStyles.h5", {
          before: "##### ",
          after: " #####"
        });
        editor.setText("## heading");
        editor.setCursorBufferPosition([0, 2]);
        new StyleLine("h5").trigger();
        expect(editor.getText()).toBe("##### heading #####");
        expect(editor.getCursorBufferPosition().column).toBe(6);
        editor.setCursorBufferPosition([0, 16]);
        new StyleLine("h5").trigger();
        expect(editor.getText()).toBe("heading");
        return expect(editor.getCursorBufferPosition().column).toBe(7);
      });
    });
    return describe("lists", function() {
      it("apply ordered/unordered list", function() {
        editor.setText("- list");
        new StyleLine("ol").trigger();
        expect(editor.getText()).toBe("1. list");
        expect(editor.getCursorBufferPosition().column).toBe(7);
        new StyleLine("ul").trigger();
        expect(editor.getText()).toBe("- list");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      it("apply ordered/unordered list on multiple rows", function() {
        editor.setText("- list 1\nlist 2\n- list 3");
        editor.setSelectedBufferRange([[0, 0], [3, 0]]);
        new StyleLine("ol").trigger();
        expect(editor.getText()).toBe("1. list 1\n2. list 2\n3. list 3");
        new StyleLine("ul").trigger();
        return expect(editor.getText()).toBe("- list 1\n- list 2\n- list 3");
      });
      it("apply ordered list on multiple rows (removeEmptyLine)", function() {
        editor.setText("list 1\n\nlist 2\n\nlist 3");
        editor.setSelectedBufferRange([[0, 0], [4, 3]]);
        new StyleLine("ol").trigger();
        return expect(editor.getText()).toBe("1. list 1\n2. list 2\n3. list 3");
      });
      it("apply unordered list on multiple rows (removeEmptyLine)", function() {
        editor.setText("list 1\n\nlist 2\n\nlist 3");
        editor.setSelectedBufferRange([[0, 0], [4, 3]]);
        new StyleLine("ul").trigger();
        return expect(editor.getText()).toBe("- list 1\n- list 2\n- list 3");
      });
      it("apply task list", function() {
        editor.setText("task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("task").trigger();
        return expect(editor.getText()).toBe("task");
      });
      it("apply task ol list", function() {
        editor.setText("1. task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("1. [ ] task");
        new StyleLine("task").trigger();
        return expect(editor.getText()).toBe("task");
      });
      return it("apply taskdone ol list", function() {
        editor.setText("1. [ ] task");
        new StyleLine("taskdone").trigger();
        expect(editor.getText()).toBe("1. [x] task");
        new StyleLine("taskdone").trigger();
        return expect(editor.getText()).toBe("1. [ ] task");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
