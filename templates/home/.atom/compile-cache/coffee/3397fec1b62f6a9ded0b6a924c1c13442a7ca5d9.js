(function() {
  var heading;

  heading = require("../../lib/helpers/heading");

  describe("heading", function() {
    var editor;
    editor = [][0];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open("toc.markdown");
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage("language-gfm");
      });
      return runs(function() {
        return editor = atom.workspace.getActiveTextEditor();
      });
    });
    return describe("listAll", function() {
      it("list no headings", function() {
        var h;
        editor.setText("this is a sentence\n\n```\n# this is not a header\n```\n\nthis is a sentence");
        editor.setCursorBufferPosition([5, 3]);
        h = heading.listAll(editor);
        return expect(h.length).toBe(0);
      });
      return it("list all headings", function() {
        var h, h2, h3;
        editor.setText("# Markdown-Writer for Atom\n\n## Features\n\n### Blogging\n\n### General\n\n## Installation\n\n### General\n\n## Setup\n\n## Contributing\n\n## Project");
        editor.setCursorBufferPosition([2, 0]);
        h = heading.listAll(editor);
        expect(h.length).toBe(1);
        expect(h[0].title).toBe("Markdown-Writer for Atom");
        h2 = h[0].children;
        expect(h2.length).toBe(5);
        expect(h2[4].title).toBe("Project");
        h3 = h2[1].children;
        expect(h3.length).toBe(1);
        expect(h3[0].title).toBe("General");
        return expect(h3[0].repetition).toBe(1);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvbXl1Z2EvLmF0b20vcGFja2FnZXMvbWFya2Rvd24td3JpdGVyL3NwZWMvaGVscGVycy9oZWFkaW5nLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxPQUFBLEdBQVUsT0FBQSxDQUFRLDJCQUFSOztFQUVWLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7QUFDbEIsUUFBQTtJQUFDLFNBQVU7SUFFWCxVQUFBLENBQVcsU0FBQTtNQUNULGVBQUEsQ0FBZ0IsU0FBQTtlQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBZixDQUFvQixjQUFwQjtNQUFILENBQWhCO01BQ0EsZUFBQSxDQUFnQixTQUFBO2VBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFkLENBQThCLGNBQTlCO01BQUgsQ0FBaEI7YUFDQSxJQUFBLENBQUssU0FBQTtlQUFHLE1BQUEsR0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFmLENBQUE7TUFBWixDQUFMO0lBSFMsQ0FBWDtXQUtBLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7TUFDbEIsRUFBQSxDQUFHLGtCQUFILEVBQXVCLFNBQUE7QUFDckIsWUFBQTtRQUFBLE1BQU0sQ0FBQyxPQUFQLENBQWUsOEVBQWY7UUFTQSxNQUFNLENBQUMsdUJBQVAsQ0FBK0IsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUEvQjtRQUVBLENBQUEsR0FBSSxPQUFPLENBQUMsT0FBUixDQUFnQixNQUFoQjtlQUNKLE1BQUEsQ0FBTyxDQUFDLENBQUMsTUFBVCxDQUFnQixDQUFDLElBQWpCLENBQXNCLENBQXRCO01BYnFCLENBQXZCO2FBZUEsRUFBQSxDQUFHLG1CQUFILEVBQXdCLFNBQUE7QUFDdEIsWUFBQTtRQUFBLE1BQU0sQ0FBQyxPQUFQLENBQWUseUpBQWY7UUFtQkEsTUFBTSxDQUFDLHVCQUFQLENBQStCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBL0I7UUFFQSxDQUFBLEdBQUksT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsTUFBaEI7UUFFSixNQUFBLENBQU8sQ0FBQyxDQUFDLE1BQVQsQ0FBZ0IsQ0FBQyxJQUFqQixDQUFzQixDQUF0QjtRQUNBLE1BQUEsQ0FBTyxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUMsS0FBWixDQUFrQixDQUFDLElBQW5CLENBQXdCLDBCQUF4QjtRQUVBLEVBQUEsR0FBSyxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUM7UUFDVixNQUFBLENBQU8sRUFBRSxDQUFDLE1BQVYsQ0FBaUIsQ0FBQyxJQUFsQixDQUF1QixDQUF2QjtRQUNBLE1BQUEsQ0FBTyxFQUFHLENBQUEsQ0FBQSxDQUFFLENBQUMsS0FBYixDQUFtQixDQUFDLElBQXBCLENBQXlCLFNBQXpCO1FBRUEsRUFBQSxHQUFLLEVBQUcsQ0FBQSxDQUFBLENBQUUsQ0FBQztRQUNYLE1BQUEsQ0FBTyxFQUFFLENBQUMsTUFBVixDQUFpQixDQUFDLElBQWxCLENBQXVCLENBQXZCO1FBQ0EsTUFBQSxDQUFPLEVBQUcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxLQUFiLENBQW1CLENBQUMsSUFBcEIsQ0FBeUIsU0FBekI7ZUFDQSxNQUFBLENBQU8sRUFBRyxDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQWIsQ0FBd0IsQ0FBQyxJQUF6QixDQUE4QixDQUE5QjtNQWxDc0IsQ0FBeEI7SUFoQmtCLENBQXBCO0VBUmtCLENBQXBCO0FBRkEiLCJzb3VyY2VzQ29udGVudCI6WyJoZWFkaW5nID0gcmVxdWlyZSBcIi4uLy4uL2xpYi9oZWxwZXJzL2hlYWRpbmdcIlxuXG5kZXNjcmliZSBcImhlYWRpbmdcIiwgLT5cbiAgW2VkaXRvcl0gPSBbXVxuXG4gIGJlZm9yZUVhY2ggLT5cbiAgICB3YWl0c0ZvclByb21pc2UgLT4gYXRvbS53b3Jrc3BhY2Uub3BlbihcInRvYy5tYXJrZG93blwiKVxuICAgIHdhaXRzRm9yUHJvbWlzZSAtPiBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZShcImxhbmd1YWdlLWdmbVwiKVxuICAgIHJ1bnMgLT4gZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXG5cbiAgZGVzY3JpYmUgXCJsaXN0QWxsXCIsIC0+XG4gICAgaXQgXCJsaXN0IG5vIGhlYWRpbmdzXCIsIC0+XG4gICAgICBlZGl0b3Iuc2V0VGV4dCBcIlwiXCJcbiAgICAgIHRoaXMgaXMgYSBzZW50ZW5jZVxuXG4gICAgICBgYGBcbiAgICAgICMgdGhpcyBpcyBub3QgYSBoZWFkZXJcbiAgICAgIGBgYFxuXG4gICAgICB0aGlzIGlzIGEgc2VudGVuY2VcbiAgICAgIFwiXCJcIlxuICAgICAgZWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKFs1LCAzXSlcblxuICAgICAgaCA9IGhlYWRpbmcubGlzdEFsbChlZGl0b3IpXG4gICAgICBleHBlY3QoaC5sZW5ndGgpLnRvQmUoMClcblxuICAgIGl0IFwibGlzdCBhbGwgaGVhZGluZ3NcIiwgLT5cbiAgICAgIGVkaXRvci5zZXRUZXh0IFwiXCJcIlxuICAgICAgIyBNYXJrZG93bi1Xcml0ZXIgZm9yIEF0b21cblxuICAgICAgIyMgRmVhdHVyZXNcblxuICAgICAgIyMjIEJsb2dnaW5nXG5cbiAgICAgICMjIyBHZW5lcmFsXG5cbiAgICAgICMjIEluc3RhbGxhdGlvblxuXG4gICAgICAjIyMgR2VuZXJhbFxuXG4gICAgICAjIyBTZXR1cFxuXG4gICAgICAjIyBDb250cmlidXRpbmdcblxuICAgICAgIyMgUHJvamVjdFxuICAgICAgXCJcIlwiXG4gICAgICBlZGl0b3Iuc2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oWzIsIDBdKVxuXG4gICAgICBoID0gaGVhZGluZy5saXN0QWxsKGVkaXRvcilcbiAgICAgICMgaGVhZGluZyAxXG4gICAgICBleHBlY3QoaC5sZW5ndGgpLnRvQmUoMSlcbiAgICAgIGV4cGVjdChoWzBdLnRpdGxlKS50b0JlKFwiTWFya2Rvd24tV3JpdGVyIGZvciBBdG9tXCIpXG4gICAgICAjIGhlYWRpbmcgMlxuICAgICAgaDIgPSBoWzBdLmNoaWxkcmVuXG4gICAgICBleHBlY3QoaDIubGVuZ3RoKS50b0JlKDUpXG4gICAgICBleHBlY3QoaDJbNF0udGl0bGUpLnRvQmUoXCJQcm9qZWN0XCIpXG4gICAgICAjIGhlYWRpbmcgM1xuICAgICAgaDMgPSBoMlsxXS5jaGlsZHJlblxuICAgICAgZXhwZWN0KGgzLmxlbmd0aCkudG9CZSgxKVxuICAgICAgZXhwZWN0KGgzWzBdLnRpdGxlKS50b0JlKFwiR2VuZXJhbFwiKVxuICAgICAgZXhwZWN0KGgzWzBdLnJlcGV0aXRpb24pLnRvQmUoMSlcbiJdfQ==
