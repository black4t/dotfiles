(function() {
  var EditLine;

  EditLine = require("../../lib/commands/edit-line");

  describe("EditLine", function() {
    var editLine, editor, event, ref;
    ref = [], editor = ref[0], editLine = ref[1], event = ref[2];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open("empty.markdown");
      });
      return runs(function() {
        editor = atom.workspace.getActiveTextEditor();
        event = {
          abortKeyBinding: function() {
            return {};
          }
        };
        return spyOn(event, "abortKeyBinding");
      });
    });
    describe("insertNewLine", function() {
      beforeEach(function() {
        return editLine = new EditLine("insert-new-line");
      });
      it("does not affect normal new line", function() {
        editor.setText("this is normal line");
        editor.setCursorBufferPosition([0, 4]);
        editLine.trigger(event);
        return expect(event.abortKeyBinding).toHaveBeenCalled();
      });
      it("continue if config inlineNewLineContinuation enabled", function() {
        atom.config.set("markdown-writer.inlineNewLineContinuation", true);
        editor.setText("- inline line");
        editor.setCursorBufferPosition([0, 8]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe("- inline\n-  line");
      });
      it("continue after unordered list line", function() {
        editor.setText("- line");
        editor.setCursorBufferPosition([0, 6]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["- line", "- "].join("\n"));
      });
      it("continue after nested unordered list line", function() {
        editor.setText("- line 0\n  * line 1\n    + line 2");
        editor.setCursorBufferPosition([2, 12]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["- line 0", "  * line 1", "    + line 2", "    + "].join("\n"));
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["- line 0", "  * line 1", "    + line 2", "  * "].join("\n"));
      });
      it("continue after ordered task list line", function() {
        editor.setText("1. [ ] Epic Tasks\n   1. [X] Sub-task A");
        editor.setCursorBufferPosition([1, 20]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. [ ] Epic Tasks", "   1. [X] Sub-task A", "   2. [ ] "].join("\n"));
      });
      it("continue after ordered task list line (without number continuation)", function() {
        atom.config.set("markdown-writer.orderedNewLineNumberContinuation", false);
        editor.setText("1. Epic Order One");
        editor.setCursorBufferPosition([0, 17]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. Epic Order One", "1. "].join("\n"));
      });
      it("not continue after unindented alpha ordered list line", function() {
        editor.setText("a. Epic Tasks");
        editor.setCursorBufferPosition([0, 13]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["a. Epic Tasks"].join("\n"));
      });
      it("continue after alpha ordered task list line", function() {
        editor.setText("1. [ ] Epic Tasks\n   y. [X] Sub-task A");
        editor.setCursorBufferPosition([1, 20]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. [ ] Epic Tasks", "   y. [X] Sub-task A", "   z. [ ] "].join("\n"));
      });
      it("continue after blockquote line", function() {
        editor.setText("> Your time is limited, so don’t waste it living someone else’s life.");
        editor.setCursorBufferPosition([0, 69]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["> Your time is limited, so don’t waste it living someone else’s life.", "> "].join("\n"));
      });
      it("not continue after empty unordered task list line", function() {
        editor.setText("- [ ]");
        editor.setCursorBufferPosition([0, 5]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["", ""].join("\n"));
      });
      it("not continue after empty ordered list line", function() {
        editor.setText(["1. [ ] parent", "   - child", "   - "].join("\n"));
        editor.setCursorBufferPosition([2, 5]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. [ ] parent", "   - child", "2. [ ] "].join("\n"));
      });
      return it("not continue after empty ordered paragraph", function() {
        editor.setText(["1. parent", "   - child has a paragraph", "", "     paragraph one", "", "     paragraph two", "", "   - "].join("\n"));
        editor.setCursorBufferPosition([7, 5]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. parent", "   - child has a paragraph", "", "     paragraph one", "", "     paragraph two", "", "2. "].join("\n"));
      });
    });
    describe("insertNewLine (Table)", function() {
      beforeEach(function() {
        editLine = new EditLine("insert-new-line");
        return editor.setText(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
      });
      it("continue after table separator", function() {
        editor.setCursorBufferPosition([6, 5]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "  |   |  ", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(7, 0)");
      });
      it("continue after table rows", function() {
        editor.setCursorBufferPosition([1, 9]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "  |   |  ", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(2, 0)");
      });
      it("continue in a table row", function() {
        editor.setCursorBufferPosition([7, 3]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "  |   |  ", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(8, 0)");
      });
      it("not continue after empty table row", function() {
        editor.setCursorBufferPosition([9, 8]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "", ""].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(10, 0)");
      });
      it("has not effect at table head", function() {
        editor.setCursorBufferPosition([5, 9]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(5, 9)");
      });
      return it("has not effect at random line", function() {
        editor.setCursorBufferPosition([3, 9]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(3, 9)");
      });
    });
    describe("indentListLine", function() {
      beforeEach(function() {
        return editLine = new EditLine("indent-list-line");
      });
      describe("unordered list", function() {
        beforeEach(function() {
          return editor.setText(["- list", "- list line 2", "  - list line 3"].join("\n"));
        });
        it("pass 1st line", function() {
          editor.setCursorBufferPosition([0, 5]);
          editLine.trigger(event);
          return expect(event.abortKeyBinding).toHaveBeenCalled();
        });
        it("indent 2nd line", function() {
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["- list", "  - list line 2", "  - list line 3"].join("\n"));
          return expect(editor.getCursorBufferPosition().toString()).toBe("(1, 7)");
        });
        return it("indent 2nd line with ulBullet config", function() {
          atom.config.set("markdown-writer.templateVariables.ulBullet1", "*");
          atom.config.set("markdown-writer.templateVariables.ulBullet2", "+");
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["- list", "  * list line 2", "  - list line 3"].join("\n"));
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          return expect(editor.getText()).toBe(["- list", "  * list line 2", "    + list line 3"].join("\n"));
        });
      });
      describe("4-space tab unordered list", function() {
        beforeEach(function() {
          atom.config.set("editor.tabLength", 4);
          return editor.setText(["- list", "- list line 2", "  - list line 3"].join("\n"));
        });
        it("pass 1st line", function() {
          editor.setCursorBufferPosition([0, 5]);
          editLine.trigger(event);
          return expect(event.abortKeyBinding).toHaveBeenCalled();
        });
        it("indent 2nd line", function() {
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["- list", "  - list line 2", "  - list line 3"].join("\n"));
          return expect(editor.getCursorBufferPosition().toString()).toBe("(1, 7)");
        });
        return it("indent 2nd line with ulBullet config", function() {
          atom.config.set("markdown-writer.templateVariables.ulBullet1", "*");
          atom.config.set("markdown-writer.templateVariables.ulBullet2", "+");
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["- list", "  * list line 2", "  - list line 3"].join("\n"));
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          return expect(editor.getText()).toBe(["- list", "  * list line 2", "    + list line 3"].join("\n"));
        });
      });
      describe("ordered list", function() {
        beforeEach(function() {
          return editor.setText(["1. list", "2. list line 2", "3. Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
        });
        it("pass 1st line", function() {
          editor.setCursorBufferPosition([0, 5]);
          editLine.trigger(event);
          return expect(event.abortKeyBinding).toHaveBeenCalled();
        });
        it("indent 2nd line", function() {
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "   1. list line 2", "3. Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
          return expect(editor.getCursorBufferPosition().toString()).toBe("(1, 8)");
        });
        return it("indent 3rd long text line", function() {
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "2. list line 2", "   1. Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
          return expect(editor.getCursorBufferPosition().toString()).toBe("(2, 8)");
        });
      });
      return describe("mixed ordered list", function() {
        beforeEach(function() {
          return editor.setText(["1. list", "- list line 2", "- list line 3"].join("\n"));
        });
        it("indent 2nd line", function() {
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "   - list line 2", "- list line 3"].join("\n"));
          return expect(editor.getCursorBufferPosition().toString()).toBe("(1, 8)");
        });
        return it("indent 2nd/3rd line with ulBullet config", function() {
          atom.config.set("markdown-writer.templateVariables.ulBullet1", "*");
          atom.config.set("markdown-writer.templateVariables.ulBullet2", "+");
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "   * list line 2", "- list line 3"].join("\n"));
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "   * list line 2", "   * list line 3"].join("\n"));
          editLine.trigger(event);
          return expect(editor.getText()).toBe(["1. list", "   * list line 2", "     + list line 3"].join("\n"));
        });
      });
    });
    return describe("undentListLine", function() {
      beforeEach(function() {
        return editLine = new EditLine("undent-list-line");
      });
      describe("unordered list", function() {
        beforeEach(function() {
          return editor.setText(["- list", "  * list line 2", "    + list line 3"].join("\n"));
        });
        it("pass 1st line", function() {
          editor.setCursorBufferPosition([0, 5]);
          editLine.trigger(event);
          return expect(event.abortKeyBinding).toHaveBeenCalled();
        });
        it("undent 2nd line", function() {
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["- list", "- list line 2", "    + list line 3"].join("\n"));
          expect(editor.getCursorBufferPosition().toString()).toBe("(1, 3)");
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          return expect(editor.getText()).toBe(["- list", "- list line 2", "  - list line 3"].join("\n"));
        });
        return it("undent 2nd line with ulBullet config", function() {
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          return expect(editor.getText()).toBe(["- list", "  * list line 2", "  * list line 3"].join("\n"));
        });
      });
      return describe("mixed ordered list", function() {
        beforeEach(function() {
          return editor.setText(["1. list", "   - list line 2", "     1. Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
        });
        it("pass 1st line", function() {
          editor.setCursorBufferPosition([0, 5]);
          editLine.trigger(event);
          return expect(event.abortKeyBinding).toHaveBeenCalled();
        });
        it("undent 2nd line", function() {
          editor.setCursorBufferPosition([1, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "1. list line 2", "     1. Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
          expect(editor.getCursorBufferPosition().toString()).toBe("(1, 3)");
          editor.setCursorBufferPosition([2, 5]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "1. list line 2", "     1. Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
          return expect(event.abortKeyBinding).toHaveBeenCalled();
        });
        return it("undent 3rd long text line", function() {
          editor.setCursorBufferPosition([2, 1]);
          editLine.trigger(event);
          expect(editor.getText()).toBe(["1. list", "   - list line 2", "   - Consider a (ordered or unordered) markdown list. On pressing tab to indent the item, if the item spans over more than one line, then the text of the item alters. See the below gif in https://github.com/zhuochun/md-writer/issues/222", "", "This behaviour is not observed when the list item does not extend to the next line."].join("\n"));
          return expect(editor.getCursorBufferPosition().toString()).toBe("(2, 0)");
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
