(function() {
  var HEADING_REGEX, JumpTo, REFERENCE_REGEX, TABLE_COL_REGEX, utils;

  utils = require("../utils");

  HEADING_REGEX = /^\#{1,6} +.+$/;

  REFERENCE_REGEX = /\[([^\[\]]+)(?:\]|\]:)/;

  TABLE_COL_REGEX = /([^\|]*?)\s*\|/;

  module.exports = JumpTo = (function() {
    function JumpTo(command) {
      this.command = command;
      this.editor = atom.workspace.getActiveTextEditor();
      this.cursor = this.editor.getCursorBufferPosition();
    }

    JumpTo.prototype.trigger = function(e) {
      var fn, range;
      fn = this.command.replace(/-[a-z]/ig, function(s) {
        return s[1].toUpperCase();
      });
      range = this[fn]();
      if (range) {
        return this.editor.setCursorBufferPosition(range);
      } else {
        return e.abortKeyBinding();
      }
    };

    JumpTo.prototype.previousHeading = function() {
      var range;
      range = [[0, 0], [this.cursor.row - 1, 0]];
      return this._findNextHeading(range, "backwardsScanInRange");
    };

    JumpTo.prototype.nextHeading = function() {
      var eof, range;
      eof = this.editor.getEofBufferPosition();
      range = this._findNextHeading([[this.cursor.row + 1, 0], [eof.row + 1, 0]]);
      if (range) {
        return range;
      }
      return this._findNextHeading([[0, 0], [eof.row + 1, 0]]);
    };

    JumpTo.prototype._findNextHeading = function(range, scan) {
      var found;
      if (scan == null) {
        scan = "scanInRange";
      }
      found = false;
      this.editor.buffer[scan](RegExp("" + HEADING_REGEX.source, "g"), range, (function(_this) {
        return function(match) {
          var descriptors;
          descriptors = _this.editor.scopeDescriptorForBufferPosition(match.range.start).getScopesArray();
          if (descriptors.find(function(descriptor) {
            return descriptor.indexOf("heading") >= 0;
          })) {
            found = match.range.start;
            return match.stop();
          }
        };
      })(this));
      return found;
    };

    JumpTo.prototype.referenceDefinition = function() {
      var found, link, range, selection;
      range = utils.getTextBufferRange(this.editor, "link", {
        selectBy: "currentLine"
      });
      if (link = utils.findLinkInRange(this.editor, range)) {
        if (!link.id) {
          return false;
        }
        if (!link.linkRange || !link.definitionRange) {
          return false;
        }
        if (link.linkRange.start.row !== this.cursor.row && link.linkRange.end.row !== this.cursor.row) {
          return [link.linkRange.start.row, link.linkRange.start.column];
        } else {
          return [link.definitionRange.start.row, link.definitionRange.start.column];
        }
      } else {
        selection = this.editor.getTextInRange(range);
        if (!selection) {
          return false;
        }
        link = REFERENCE_REGEX.exec(selection);
        if (!link) {
          return false;
        }
        found = false;
        this.editor.buffer.scan(RegExp("\\[" + (utils.escapeRegExp(link[1])) + "\\]", "g"), (function(_this) {
          return function(match) {
            if (match.range.start.row !== _this.cursor.row && match.range.end.row !== _this.cursor.row) {
              found = [match.range.start.row, match.range.start.column];
              return match.stop();
            }
          };
        })(this));
        return found;
      }
    };

    JumpTo.prototype.nextTableCell = function() {
      var line;
      line = this.editor.lineTextForBufferRow(this.cursor.row);
      if (utils.isTableRow(line) || utils.isTableSeparator(line)) {
        return this._findNextTableCell(line, this.cursor.row, this.cursor.column);
      } else {
        return false;
      }
    };

    JumpTo.prototype._findNextTableCell = function(currentLine, row, column) {
      var td;
      column = currentLine.indexOf("|", column);
      if (column === -1 || column === currentLine.length - 1) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (utils.isTableSeparator(currentLine)) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (currentLine === void 0) {
        return false;
      }
      if (currentLine[column] === "|") {
        column += 1;
        currentLine = currentLine.slice(column);
      }
      if (td = TABLE_COL_REGEX.exec(currentLine)) {
        return [row, column + td[1].length];
      } else {
        return [row, column + currentLine.length];
      }
    };

    return JumpTo;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
