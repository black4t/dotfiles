Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Godoc = undefined;

var _atom = require('atom');

var _godocPanel = require('./godoc-panel');

var _utils = require('../utils');

var _guruUtils = require('../guru-utils');

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Godoc {

  constructor(goconfig) {
    this.priority = 2;
    this.grammarScopes = ['source.go', 'go'];
    this.providerName = 'go-plus';

    this.goconfig = goconfig;
    this.subscriptions = new _atom.CompositeDisposable();
    this.panelModel = new _godocPanel.GodocPanel();
    this.subscriptions.add(this.panelModel);
    this.subscriptions.add(atom.commands.add('atom-text-editor', 'golang:showdoc', () => this.commandInvoked()));
    this.methodRegexp = /(?:^func \(\w+ \**)(\w+)/;
  }

  async commandInvoked() {
    const editor = atom.workspace.getActiveTextEditor();
    if (!editor) {
      return { success: false, result: null };
    }
    this.panelModel.updateMessage('Generating documentation...');
    const doc = await this.doc(editor, editor.getCursorBufferPosition());
    if (!doc) {
      return { success: false, result: null };
    }

    if (doc.decl.startsWith('package')) {
      // older versions of gogetdoc didn't populate the import property
      // for packages - prompt user to update
      if (!doc.import || !doc.import.length) {
        this.promptForToolsUpdate();
      } else {
        doc.gddo = 'https://godoc.org/' + doc.import;
      }
    } else {
      const typ = this.declIsMethod(doc.decl);
      if (typ) {
        doc.gddo = 'https://godoc.org/' + doc.import + '#' + typ + '.' + doc.name;
      } else {
        doc.gddo = 'https://godoc.org/' + doc.import + '#' + doc.name;
      }
    }
    this.panelModel.updateContent(doc);
    return { success: true, doc: doc };
  }

  dispose() {
    this.subscriptions.dispose();
  }

  async doc(editor, bufferPosition) {
    const cmd = await this.goconfig.locator.findTool('gogetdoc');
    if (!cmd) return null;

    const file = editor.getBuffer().getPath();
    if (!file) return null;

    const offset = (0, _utils.utf8OffsetForBufferPosition)(bufferPosition, editor);
    const archive = (0, _guruUtils.buildGuruArchive)();
    const args = ['-pos', `${file}:#${offset}`, '-linelength', '999', '-json'];

    const options = this.goconfig.executor.getOptions('project', editor);
    if (archive && archive.length) {
      options.input = archive;
      args.push('-modified');
    }
    const r = await this.goconfig.executor.exec(cmd, args, options);
    if (r.exitcode !== 0) return null;

    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    const doc = JSON.parse(stdout.trim());
    return doc;
  }

  async datatip(editor, bufferPosition) {
    const doc = await this.doc(editor, bufferPosition);
    if (!doc) return null;

    const markedStrings = [{
      type: 'markdown',
      value: `### ${doc.name}

import "${doc.import}"

\`\`\`go
${doc.decl}
\`\`\`

${doc.doc}`
    }];
    return {
      range: new _atom.Range(bufferPosition, bufferPosition),
      markedStrings,
      pinnable: true
    };
  }

  declIsMethod(decl) {
    // func (receiver Type) Name(Args...) -> return Type
    // func Name(Args...) -> return undefined
    const matches = this.methodRegexp.exec(decl);
    if (matches && matches.length) {
      return matches[matches.length - 1];
    }
    return undefined;
  }

  promptForToolsUpdate() {
    if (this.electedNotToUpdate) {
      return;
    }
    this.electedNotToUpdate = true;

    const notification = atom.notifications.addWarning('go-plus', {
      dismissable: true,
      detail: '`gogetdoc` may be out of date',
      description: 'Your `gogetdoc` tool may be out of date.' + _os2.default.EOL + _os2.default.EOL + 'Would you like to run `go get -u github.com/zmb3/gogetdoc` to update?',
      buttons: [{
        text: 'Yes',
        onDidClick: () => {
          notification.dismiss();
          atom.commands.dispatch(atom.views.getView(atom.workspace), 'golang:update-tools', ['github.com/zmb3/gogetdoc']);
        }
      }, {
        text: 'Not Now',
        onDidClick: () => {
          notification.dismiss();
        }
      }]
    });
  }

  getPanel() {
    return this.panelModel;
  }
}

exports.Godoc = Godoc;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,