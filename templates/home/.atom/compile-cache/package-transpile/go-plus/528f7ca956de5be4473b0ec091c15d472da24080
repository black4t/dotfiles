Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavigationStack = undefined;

var _utils = require('../utils');

class NavigationStack {

  constructor(maxSize = 500) {
    this.maxSize = maxSize >= 1 ? maxSize : 1;
    this.stack = [];
  }

  dispose() {
    this.stack = [];
  }

  isEmpty() {
    return this.stack.length === 0;
  }

  reset() {
    this.stack = [];
  }

  pushCurrentLocation() {
    const editor = atom.workspace.getActiveTextEditor();
    if (!editor) {
      return;
    }
    const loc = {
      pos: editor.getCursorBufferPosition(),
      filepath: editor.getURI() || ''
    };

    if (!loc.pos.row || !loc.pos.column) {
      return;
    }

    this.push(loc);
  }

  // Returns a promise that is complete when navigation is done.
  restorePreviousLocation() {
    if (this.isEmpty()) {
      return Promise.resolve();
    }

    if (!this.stack || this.stack.length < 1) {
      return Promise.resolve();
    }

    const lastLocation = this.stack.shift();
    return (0, _utils.openFile)(lastLocation.filepath, lastLocation.pos);
  }

  push(loc) {
    if (!this.stack || !loc) {
      return;
    }

    if (!this.isEmpty() && this.compareLoc(this.stack[0], loc)) {
      return;
    }
    this.stack.unshift(loc);
    if (this.stack.length > this.maxSize) {
      this.stack.splice(-1, this.stack.length - this.maxSize);
    }
  }

  compareLoc(loc1, loc2) {
    if (!loc1 && !loc2) {
      return true;
    }

    if (!loc1 || !loc2) {
      return false;
    }

    const posEqual = (pos1, pos2) => {
      if (!pos1 && !pos2) {
        return true;
      }
      if (!pos1 || !pos2) {
        return false;
      }
      return pos1.column === pos2.column && pos1.row === pos2.row;
    };

    return loc1.filepath === loc2.filepath && posEqual(loc1.pos, loc2.pos);
  }
}

exports.NavigationStack = NavigationStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24tc3RhY2suanMiXSwibmFtZXMiOlsiTmF2aWdhdGlvblN0YWNrIiwiY29uc3RydWN0b3IiLCJtYXhTaXplIiwic3RhY2siLCJkaXNwb3NlIiwiaXNFbXB0eSIsImxlbmd0aCIsInJlc2V0IiwicHVzaEN1cnJlbnRMb2NhdGlvbiIsImVkaXRvciIsImF0b20iLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVUZXh0RWRpdG9yIiwibG9jIiwicG9zIiwiZ2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24iLCJmaWxlcGF0aCIsImdldFVSSSIsInJvdyIsImNvbHVtbiIsInB1c2giLCJyZXN0b3JlUHJldmlvdXNMb2NhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwibGFzdExvY2F0aW9uIiwic2hpZnQiLCJjb21wYXJlTG9jIiwidW5zaGlmdCIsInNwbGljZSIsImxvYzEiLCJsb2MyIiwicG9zRXF1YWwiLCJwb3MxIiwicG9zMiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFJQSxNQUFNQSxlQUFOLENBQXNCOztBQUlwQkMsY0FBWUMsVUFBa0IsR0FBOUIsRUFBbUM7QUFDakMsU0FBS0EsT0FBTCxHQUFlQSxXQUFXLENBQVgsR0FBZUEsT0FBZixHQUF5QixDQUF4QztBQUNBLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0Q7O0FBRURDLFlBQVU7QUFDUixTQUFLRCxLQUFMLEdBQWEsRUFBYjtBQUNEOztBQUVERSxZQUFVO0FBQ1IsV0FBTyxLQUFLRixLQUFMLENBQVdHLE1BQVgsS0FBc0IsQ0FBN0I7QUFDRDs7QUFFREMsVUFBUTtBQUNOLFNBQUtKLEtBQUwsR0FBYSxFQUFiO0FBQ0Q7O0FBRURLLHdCQUFzQjtBQUNwQixVQUFNQyxTQUFTQyxLQUFLQyxTQUFMLENBQWVDLG1CQUFmLEVBQWY7QUFDQSxRQUFJLENBQUNILE1BQUwsRUFBYTtBQUNYO0FBQ0Q7QUFDRCxVQUFNSSxNQUFtQjtBQUN2QkMsV0FBS0wsT0FBT00sdUJBQVAsRUFEa0I7QUFFdkJDLGdCQUFVUCxPQUFPUSxNQUFQLE1BQW1CO0FBRk4sS0FBekI7O0FBS0EsUUFBSSxDQUFDSixJQUFJQyxHQUFKLENBQVFJLEdBQVQsSUFBZ0IsQ0FBQ0wsSUFBSUMsR0FBSixDQUFRSyxNQUE3QixFQUFxQztBQUNuQztBQUNEOztBQUVELFNBQUtDLElBQUwsQ0FBVVAsR0FBVjtBQUNEOztBQUVEO0FBQ0FRLDRCQUF3QztBQUN0QyxRQUFJLEtBQUtoQixPQUFMLEVBQUosRUFBb0I7QUFDbEIsYUFBT2lCLFFBQVFDLE9BQVIsRUFBUDtBQUNEOztBQUVELFFBQUksQ0FBQyxLQUFLcEIsS0FBTixJQUFlLEtBQUtBLEtBQUwsQ0FBV0csTUFBWCxHQUFvQixDQUF2QyxFQUEwQztBQUN4QyxhQUFPZ0IsUUFBUUMsT0FBUixFQUFQO0FBQ0Q7O0FBRUQsVUFBTUMsZUFBZSxLQUFLckIsS0FBTCxDQUFXc0IsS0FBWCxFQUFyQjtBQUNBLFdBQU8scUJBQVNELGFBQWFSLFFBQXRCLEVBQWdDUSxhQUFhVixHQUE3QyxDQUFQO0FBQ0Q7O0FBRURNLE9BQUtQLEdBQUwsRUFBdUI7QUFDckIsUUFBSSxDQUFDLEtBQUtWLEtBQU4sSUFBZSxDQUFDVSxHQUFwQixFQUF5QjtBQUN2QjtBQUNEOztBQUVELFFBQUksQ0FBQyxLQUFLUixPQUFMLEVBQUQsSUFBbUIsS0FBS3FCLFVBQUwsQ0FBZ0IsS0FBS3ZCLEtBQUwsQ0FBVyxDQUFYLENBQWhCLEVBQStCVSxHQUEvQixDQUF2QixFQUE0RDtBQUMxRDtBQUNEO0FBQ0QsU0FBS1YsS0FBTCxDQUFXd0IsT0FBWCxDQUFtQmQsR0FBbkI7QUFDQSxRQUFJLEtBQUtWLEtBQUwsQ0FBV0csTUFBWCxHQUFvQixLQUFLSixPQUE3QixFQUFzQztBQUNwQyxXQUFLQyxLQUFMLENBQVd5QixNQUFYLENBQWtCLENBQUMsQ0FBbkIsRUFBc0IsS0FBS3pCLEtBQUwsQ0FBV0csTUFBWCxHQUFvQixLQUFLSixPQUEvQztBQUNEO0FBQ0Y7O0FBRUR3QixhQUFXRyxJQUFYLEVBQThCQyxJQUE5QixFQUFpRDtBQUMvQyxRQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQyxJQUFkLEVBQW9CO0FBQ2xCLGFBQU8sSUFBUDtBQUNEOztBQUVELFFBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNDLElBQWQsRUFBb0I7QUFDbEIsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsVUFBTUMsV0FBVyxDQUFDQyxJQUFELEVBQU9DLElBQVAsS0FBZ0I7QUFDL0IsVUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0MsSUFBZCxFQUFvQjtBQUNsQixlQUFPLElBQVA7QUFDRDtBQUNELFVBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNDLElBQWQsRUFBb0I7QUFDbEIsZUFBTyxLQUFQO0FBQ0Q7QUFDRCxhQUFPRCxLQUFLYixNQUFMLEtBQWdCYyxLQUFLZCxNQUFyQixJQUErQmEsS0FBS2QsR0FBTCxLQUFhZSxLQUFLZixHQUF4RDtBQUNELEtBUkQ7O0FBVUEsV0FBT1csS0FBS2IsUUFBTCxLQUFrQmMsS0FBS2QsUUFBdkIsSUFBbUNlLFNBQVNGLEtBQUtmLEdBQWQsRUFBbUJnQixLQUFLaEIsR0FBeEIsQ0FBMUM7QUFDRDtBQXRGbUI7O1FBeUZiZCxlLEdBQUFBLGUiLCJmaWxlIjoibmF2aWdhdGlvbi1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9teXVnYS8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL2xpYi9uYXZpZ2F0b3IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBvcGVuRmlsZSB9IGZyb20gJy4uL3V0aWxzJ1xuXG5pbXBvcnQgdHlwZSB7IERlZkxvY2F0aW9uIH0gZnJvbSAnLi9kZWZpbml0aW9uLXR5cGVzJ1xuXG5jbGFzcyBOYXZpZ2F0aW9uU3RhY2sge1xuICBtYXhTaXplOiBudW1iZXJcbiAgc3RhY2s6IEFycmF5PERlZkxvY2F0aW9uPlxuXG4gIGNvbnN0cnVjdG9yKG1heFNpemU6IG51bWJlciA9IDUwMCkge1xuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemUgPj0gMSA/IG1heFNpemUgOiAxXG4gICAgdGhpcy5zdGFjayA9IFtdXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuc3RhY2sgPSBbXVxuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDBcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc3RhY2sgPSBbXVxuICB9XG5cbiAgcHVzaEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICBjb25zdCBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgICBpZiAoIWVkaXRvcikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGxvYzogRGVmTG9jYXRpb24gPSB7XG4gICAgICBwb3M6IGVkaXRvci5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpLFxuICAgICAgZmlsZXBhdGg6IGVkaXRvci5nZXRVUkkoKSB8fCAnJ1xuICAgIH1cblxuICAgIGlmICghbG9jLnBvcy5yb3cgfHwgIWxvYy5wb3MuY29sdW1uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnB1c2gobG9jKVxuICB9XG5cbiAgLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyBjb21wbGV0ZSB3aGVuIG5hdmlnYXRpb24gaXMgZG9uZS5cbiAgcmVzdG9yZVByZXZpb3VzTG9jYXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cblxuICAgIGlmICghdGhpcy5zdGFjayB8fCB0aGlzLnN0YWNrLmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cblxuICAgIGNvbnN0IGxhc3RMb2NhdGlvbiA9IHRoaXMuc3RhY2suc2hpZnQoKVxuICAgIHJldHVybiBvcGVuRmlsZShsYXN0TG9jYXRpb24uZmlsZXBhdGgsIGxhc3RMb2NhdGlvbi5wb3MpXG4gIH1cblxuICBwdXNoKGxvYzogRGVmTG9jYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuc3RhY2sgfHwgIWxvYykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzRW1wdHkoKSAmJiB0aGlzLmNvbXBhcmVMb2ModGhpcy5zdGFja1swXSwgbG9jKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuc3RhY2sudW5zaGlmdChsb2MpXG4gICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoID4gdGhpcy5tYXhTaXplKSB7XG4gICAgICB0aGlzLnN0YWNrLnNwbGljZSgtMSwgdGhpcy5zdGFjay5sZW5ndGggLSB0aGlzLm1heFNpemUpXG4gICAgfVxuICB9XG5cbiAgY29tcGFyZUxvYyhsb2MxOiBEZWZMb2NhdGlvbiwgbG9jMjogRGVmTG9jYXRpb24pIHtcbiAgICBpZiAoIWxvYzEgJiYgIWxvYzIpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCFsb2MxIHx8ICFsb2MyKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBwb3NFcXVhbCA9IChwb3MxLCBwb3MyKSA9PiB7XG4gICAgICBpZiAoIXBvczEgJiYgIXBvczIpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlmICghcG9zMSB8fCAhcG9zMikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3MxLmNvbHVtbiA9PT0gcG9zMi5jb2x1bW4gJiYgcG9zMS5yb3cgPT09IHBvczIucm93XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvYzEuZmlsZXBhdGggPT09IGxvYzIuZmlsZXBhdGggJiYgcG9zRXF1YWwobG9jMS5wb3MsIGxvYzIucG9zKVxuICB9XG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb25TdGFjayB9XG4iXX0=