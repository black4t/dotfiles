Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImporterView = undefined;

var _atomSelectList = require('atom-select-list');

var _atomSelectList2 = _interopRequireDefault(_atomSelectList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ImporterView {

  constructor(props) {
    const { items, didConfirmSelection } = props;
    const font = atom.config.get('editor.fontFamily');
    this.selectListView = new _atomSelectList2.default({
      items,
      didConfirmSelection: item => {
        this.hide();
        didConfirmSelection(item);
      },
      didCancelSelection: () => this.hide(),
      elementForItem: i => {
        const li = document.createElement('li');
        li.style.fontFamily = font;
        li.textContent = i;
        return li;
      }
    });
  }

  async show(items = []) {
    this.previouslyFocusedElement = document.activeElement;
    this.selectListView.reset();
    await this.selectListView.update({
      items,
      query: 'Enter a package to import',
      selectQuery: true
    });
    this.getModalPanel().show();
    this.selectListView.focus();
  }

  dispose() {
    this.destroy();
  }

  destroy() {
    this.selectListView.destroy();
    this.getModalPanel().destroy();
    if (this.previouslyFocusedElement) {
      this.previouslyFocusedElement.focus();
      this.previouslyFocusedElement = null;
    }
  }

  hide() {
    this.getModalPanel().hide();
    if (this.previouslyFocusedElement) {
      this.previouslyFocusedElement.focus();
      this.previouslyFocusedElement = null;
    }
  }

  getModalPanel() {
    if (!this.modalPanel) {
      this.modalPanel = atom.workspace.addModalPanel({
        item: this.selectListView
      });
    }
    return this.modalPanel;
  }
}
exports.ImporterView = ImporterView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcG9ydGVyLXZpZXcuanMiXSwibmFtZXMiOlsiSW1wb3J0ZXJWaWV3IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIml0ZW1zIiwiZGlkQ29uZmlybVNlbGVjdGlvbiIsImZvbnQiLCJhdG9tIiwiY29uZmlnIiwiZ2V0Iiwic2VsZWN0TGlzdFZpZXciLCJTZWxlY3RMaXN0VmlldyIsIml0ZW0iLCJoaWRlIiwiZGlkQ2FuY2VsU2VsZWN0aW9uIiwiZWxlbWVudEZvckl0ZW0iLCJpIiwibGkiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImZvbnRGYW1pbHkiLCJ0ZXh0Q29udGVudCIsInNob3ciLCJwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwicmVzZXQiLCJ1cGRhdGUiLCJxdWVyeSIsInNlbGVjdFF1ZXJ5IiwiZ2V0TW9kYWxQYW5lbCIsImZvY3VzIiwiZGlzcG9zZSIsImRlc3Ryb3kiLCJtb2RhbFBhbmVsIiwid29ya3NwYWNlIiwiYWRkTW9kYWxQYW5lbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7Ozs7O0FBRU8sTUFBTUEsWUFBTixDQUFtQjs7QUFLeEJDLGNBQVlDLEtBQVosRUFBMkI7QUFDekIsVUFBTSxFQUFFQyxLQUFGLEVBQVNDLG1CQUFULEtBQWlDRixLQUF2QztBQUNBLFVBQU1HLE9BQWdCQyxLQUFLQyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsbUJBQWhCLENBQXRCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixJQUFJQyx3QkFBSixDQUFtQjtBQUN2Q1AsV0FEdUM7QUFFdkNDLDJCQUFxQk8sUUFBUTtBQUMzQixhQUFLQyxJQUFMO0FBQ0FSLDRCQUFvQk8sSUFBcEI7QUFDRCxPQUxzQztBQU12Q0UsMEJBQW9CLE1BQU0sS0FBS0QsSUFBTCxFQU5hO0FBT3ZDRSxzQkFBZ0JDLEtBQUs7QUFDbkIsY0FBTUMsS0FBS0MsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFYO0FBQ0FGLFdBQUdHLEtBQUgsQ0FBU0MsVUFBVCxHQUFzQmYsSUFBdEI7QUFDQVcsV0FBR0ssV0FBSCxHQUFpQk4sQ0FBakI7QUFDQSxlQUFPQyxFQUFQO0FBQ0Q7QUFac0MsS0FBbkIsQ0FBdEI7QUFjRDs7QUFFRCxRQUFNTSxJQUFOLENBQVduQixRQUF1QixFQUFsQyxFQUFzQztBQUNwQyxTQUFLb0Isd0JBQUwsR0FBZ0NOLFNBQVNPLGFBQXpDO0FBQ0EsU0FBS2YsY0FBTCxDQUFvQmdCLEtBQXBCO0FBQ0EsVUFBTSxLQUFLaEIsY0FBTCxDQUFvQmlCLE1BQXBCLENBQTJCO0FBQy9CdkIsV0FEK0I7QUFFL0J3QixhQUFPLDJCQUZ3QjtBQUcvQkMsbUJBQWE7QUFIa0IsS0FBM0IsQ0FBTjtBQUtBLFNBQUtDLGFBQUwsR0FBcUJQLElBQXJCO0FBQ0EsU0FBS2IsY0FBTCxDQUFvQnFCLEtBQXBCO0FBQ0Q7O0FBRURDLFlBQVU7QUFDUixTQUFLQyxPQUFMO0FBQ0Q7O0FBRURBLFlBQVU7QUFDUixTQUFLdkIsY0FBTCxDQUFvQnVCLE9BQXBCO0FBQ0EsU0FBS0gsYUFBTCxHQUFxQkcsT0FBckI7QUFDQSxRQUFJLEtBQUtULHdCQUFULEVBQW1DO0FBQ2pDLFdBQUtBLHdCQUFMLENBQThCTyxLQUE5QjtBQUNBLFdBQUtQLHdCQUFMLEdBQWdDLElBQWhDO0FBQ0Q7QUFDRjs7QUFFRFgsU0FBTztBQUNMLFNBQUtpQixhQUFMLEdBQXFCakIsSUFBckI7QUFDQSxRQUFJLEtBQUtXLHdCQUFULEVBQW1DO0FBQ2pDLFdBQUtBLHdCQUFMLENBQThCTyxLQUE5QjtBQUNBLFdBQUtQLHdCQUFMLEdBQWdDLElBQWhDO0FBQ0Q7QUFDRjs7QUFFRE0sa0JBQWdCO0FBQ2QsUUFBSSxDQUFDLEtBQUtJLFVBQVYsRUFBc0I7QUFDcEIsV0FBS0EsVUFBTCxHQUFrQjNCLEtBQUs0QixTQUFMLENBQWVDLGFBQWYsQ0FBNkI7QUFDN0N4QixjQUFNLEtBQUtGO0FBRGtDLE9BQTdCLENBQWxCO0FBR0Q7QUFDRCxXQUFPLEtBQUt3QixVQUFaO0FBQ0Q7QUFoRXVCO1FBQWJqQyxZLEdBQUFBLFkiLCJmaWxlIjoiaW1wb3J0ZXItdmlldy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9teXVnYS8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL2xpYi9pbXBvcnQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgU2VsZWN0TGlzdFZpZXcgZnJvbSAnYXRvbS1zZWxlY3QtbGlzdCdcblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyVmlldyB7XG4gIG1vZGFsUGFuZWw6ID9hdG9tJFBhbmVsXG4gIHNlbGVjdExpc3RWaWV3OiBTZWxlY3RMaXN0Vmlld1xuICBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQ6ID9IVE1MRWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBPYmplY3QpIHtcbiAgICBjb25zdCB7IGl0ZW1zLCBkaWRDb25maXJtU2VsZWN0aW9uIH0gPSBwcm9wc1xuICAgIGNvbnN0IGZvbnQ6IHN0cmluZyA9IChhdG9tLmNvbmZpZy5nZXQoJ2VkaXRvci5mb250RmFtaWx5Jyk6IGFueSlcbiAgICB0aGlzLnNlbGVjdExpc3RWaWV3ID0gbmV3IFNlbGVjdExpc3RWaWV3KHtcbiAgICAgIGl0ZW1zLFxuICAgICAgZGlkQ29uZmlybVNlbGVjdGlvbjogaXRlbSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICAgIGRpZENvbmZpcm1TZWxlY3Rpb24oaXRlbSlcbiAgICAgIH0sXG4gICAgICBkaWRDYW5jZWxTZWxlY3Rpb246ICgpID0+IHRoaXMuaGlkZSgpLFxuICAgICAgZWxlbWVudEZvckl0ZW06IGkgPT4ge1xuICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJylcbiAgICAgICAgbGkuc3R5bGUuZm9udEZhbWlseSA9IGZvbnRcbiAgICAgICAgbGkudGV4dENvbnRlbnQgPSBpXG4gICAgICAgIHJldHVybiBsaVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBzaG93KGl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW10pIHtcbiAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICB0aGlzLnNlbGVjdExpc3RWaWV3LnJlc2V0KClcbiAgICBhd2FpdCB0aGlzLnNlbGVjdExpc3RWaWV3LnVwZGF0ZSh7XG4gICAgICBpdGVtcyxcbiAgICAgIHF1ZXJ5OiAnRW50ZXIgYSBwYWNrYWdlIHRvIGltcG9ydCcsXG4gICAgICBzZWxlY3RRdWVyeTogdHJ1ZVxuICAgIH0pXG4gICAgdGhpcy5nZXRNb2RhbFBhbmVsKCkuc2hvdygpXG4gICAgdGhpcy5zZWxlY3RMaXN0Vmlldy5mb2N1cygpXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuZGVzdHJveSgpXG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc2VsZWN0TGlzdFZpZXcuZGVzdHJveSgpXG4gICAgdGhpcy5nZXRNb2RhbFBhbmVsKCkuZGVzdHJveSgpXG4gICAgaWYgKHRoaXMucHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudC5mb2N1cygpXG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA9IG51bGxcbiAgICB9XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuZ2V0TW9kYWxQYW5lbCgpLmhpZGUoKVxuICAgIGlmICh0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCkge1xuICAgICAgdGhpcy5wcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQuZm9jdXMoKVxuICAgICAgdGhpcy5wcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgZ2V0TW9kYWxQYW5lbCgpIHtcbiAgICBpZiAoIXRoaXMubW9kYWxQYW5lbCkge1xuICAgICAgdGhpcy5tb2RhbFBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7XG4gICAgICAgIGl0ZW06IHRoaXMuc2VsZWN0TGlzdFZpZXdcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1vZGFsUGFuZWxcbiAgfVxufVxuIl19