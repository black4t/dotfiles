Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GocodeProvider = undefined;

var _atom = require('atom');

var _fuzzaldrinPlus = require('fuzzaldrin-plus');

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _utils = require('../utils');

var _go = require('../go');

var _gocodeproviderHelper = require('./gocodeprovider-helper');

var _suggestions = require('./suggestions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GocodeProvider {

  constructor(goconfig) {
    this.goconfig = goconfig;
    this.subscriptions = new _atom.CompositeDisposable();
    this.subscribers = [];
    this.currentSuggestions = [];
    this.currentPrefixStartIndex = -1;
    this.currentFile = '';
    this.currentRow = -1;
    this.currentColumn = -1;

    this.proposeBuiltins = true;
    this.unimportedPackages = true;
    this.selector = '.source.go, go source_file';
    this.inclusionPriority = 1;
    this.excludeLowerPriority = !!atom.config.get('go-plus.autocomplete.suppressBuiltinAutocompleteProvider');
    this.suppressForCharacters = [];
    this.filterSelectors();
    const suppressSubscription = atom.config.observe('go-plus.autocomplete.suppressActivationForCharacters', value => {
      this.suppressForCharacters = value.map(c => {
        let char = c ? c.trim() : '';
        char = (() => {
          switch (false) {
            case char.toLowerCase() !== 'comma':
              return ',';
            case char.toLowerCase() !== 'newline':
              return '\n';
            case char.toLowerCase() !== 'space':
              return ' ';
            case char.toLowerCase() !== 'tab':
              return '\t';
            default:
              return char;
          }
        })();
        return char;
      });
      this.suppressForCharacters = this.suppressForCharacters.filter(Boolean);
    });
    this.subscriptions.add(suppressSubscription);
    const snippetModeSubscription = atom.config.observe('go-plus.autocomplete.snippetMode', value => {
      this.snippetMode = value;
    });
    this.subscriptions.add(snippetModeSubscription);
    this.subscriptions.add(atom.config.observe('go-plus.autocomplete.proposeBuiltins', value => {
      this.proposeBuiltins = value;
    }));
    this.subscriptions.add(atom.config.observe('go-plus.autocomplete.unimportedPackages', value => {
      this.unimportedPackages = value;
    }));

    this.allPkgs = (0, _go.allPackages)(this.goconfig);
  }

  dispose() {
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }
    this.subscribers = [];
    this.resetCache();
  }

  filterSelectors() {
    const configSelectors = atom.config.get('go-plus.autocomplete.scopeBlacklist');
    this.shouldSuppressStringQuoted = false;
    const selectors = [];
    if (typeof configSelectors === 'string' && configSelectors.length) {
      for (let selector of configSelectors.split(',')) {
        selector = selector.trim();
        if (selector.includes('.string.quoted')) {
          this.shouldSuppressStringQuoted = true;
        } else {
          selectors.push(selector);
        }
      }
    }
    this.disableForSelector = selectors.join(', ');
  }

  characterIsSuppressed(char, scopeDescriptor) {
    if (scopeDescriptor && scopeDescriptor.scopes && scopeDescriptor.scopes.length > 0) {
      for (const scope of scopeDescriptor.scopes) {
        if (scope === 'entity.name.import.go') {
          return false;
        }

        if (this.shouldSuppressStringQuoted && scope && scope.startsWith('string.quoted')) {
          return scopeDescriptor.scopes.indexOf('entity.name.import.go') === -1;
        }
      }
    }
    return this.suppressForCharacters.indexOf(char) !== -1;
  }

  resetCache() {
    this.currentSuggestions = [];
    this.currentFile = '';
    this.currentRow = -1;
    this.currentColumn = -1;
    this.currentPrefixStartIndex = -1;
  }

  getSuggestions(options) {
    // only invoke gocode when a new word starts or the '.' char is entered
    // on all other keystrokes we just fuzzy filter the previous set of suggestions
    let { prefix, bufferPosition, editor } = options;
    prefix = prefix.trim();
    if (prefix === '') {
      if (!options.activatedManually) {
        this.resetCache();
        const p = Promise.resolve([]);
        this.notifySubscribers(p);
        return p;
      }
    }

    const file = editor.getPath() || '';

    const sameFile = this.currentFile === file;
    const sameLine = this.currentRow >= 0 && this.currentRow === bufferPosition.row;
    const movingForward = this.currentColumn >= 0 && this.currentColumn <= bufferPosition.column;
    const useCache = !options.activatedManually && sameFile && sameLine && movingForward;

    if (useCache && this.currentSuggestions.length && prefix.length > 0 && !prefix.endsWith('.')) {
      // fuzzy filter on this.currentSuggestions
      const p = new Promise(resolve => {
        const newPrefix = editor.getTextInBufferRange([[bufferPosition.row, this.currentPrefixStartIndex], bufferPosition]);
        const fil = newPrefix === '' ? this.currentSuggestions : (0, _fuzzaldrinPlus.filter)(this.currentSuggestions, newPrefix, {
          key: 'fuzzyMatch'
        }).map(s => Object.assign({}, s, { replacementPrefix: newPrefix }));
        this.currentFile = file;
        this.currentRow = bufferPosition.row;
        this.currentColumn = bufferPosition.column;
        resolve(fil);
      });
      this.notifySubscribers(p);
      return p;
    }

    // get a fresh set of suggestions from gocode
    const p = new Promise(async resolve => {
      if (!options || !(0, _utils.isValidEditor)(editor)) {
        resolve([]);
        return;
      }

      const buffer = editor.getBuffer();
      if (!buffer || !bufferPosition) {
        resolve([]);
        return;
      }

      const index = buffer.characterIndexForPosition(bufferPosition);
      const priorBufferPosition = bufferPosition.copy();
      if (priorBufferPosition.column > 0) {
        priorBufferPosition.column = priorBufferPosition.column - 1;
      }
      const scopeDescriptor = editor.scopeDescriptorForBufferPosition(priorBufferPosition);
      const text = editor.getText();
      if (!options.activatedManually && index > 0 && this.characterIsSuppressed(text[index - 1], scopeDescriptor)) {
        resolve([]);
        return;
      }
      const offset = Buffer.byteLength(text.substring(0, index), 'utf8');

      const cmd = await this.goconfig.locator.findTool('gocode');
      if (!cmd) {
        resolve([]);
        return;
      }
      const args = ['-f=json', 'autocomplete', file, offset.toString()];
      if (this.proposeBuiltins) args.unshift('-builtin');
      if (this.unimportedPackages) args.unshift('-unimported-packages');

      const execOptions = this.goconfig.executor.getOptions('file', editor);
      execOptions.input = text;

      let rawSuggestions = await this.executeGocode(cmd, args, execOptions);
      if (!rawSuggestions || rawSuggestions.length === 0 && prefix === '.') {
        const useVendor = await (0, _go.isVendorSupported)(this.goconfig);
        const pkg = (0, _gocodeproviderHelper.wantedPackage)(buffer, bufferPosition);
        if (!pkg) {
          resolve([]);
          return;
        }
        const pkgs = this.allPkgs.get(pkg);
        if (!pkgs || !pkgs.length) {
          resolve([]);
          return;
        }
        const { GOPATH } = this.goconfig.environment();
        const pkgPath = (0, _gocodeproviderHelper.getPackage)(file, GOPATH, pkgs, useVendor);
        if (!pkgPath) {
          resolve([]);
          return;
        }
        const added = (0, _gocodeproviderHelper.addImport)(buffer, pkgPath, offset);
        if (!added) {
          resolve([]);
          return;
        }
        const args = ['-f=json', 'autocomplete', file, added.offset.toString()];
        const execOptions = this.goconfig.executor.getOptions('file', editor);
        execOptions.input = added.text;
        rawSuggestions = await this.executeGocode(cmd, args, execOptions);
      }
      let suggestions = [];
      if (rawSuggestions.length > 0) {
        suggestions = this.mapMessages(rawSuggestions, editor, bufferPosition);
      }

      this.currentSuggestions = suggestions;
      this.currentFile = file;
      this.currentRow = bufferPosition.row;
      this.currentColumn = bufferPosition.column;
      const newPrefix = editor.getTextInBufferRange([[bufferPosition.row, this.currentPrefixStartIndex], bufferPosition]);
      const fil = newPrefix === '' ? this.currentSuggestions : (0, _fuzzaldrinPlus.filter)(this.currentSuggestions, newPrefix, {
        key: 'fuzzyMatch'
      }).map(s => Object.assign({}, s, { replacementPrefix: newPrefix }));
      resolve(fil);
    });

    this.notifySubscribers(p);
    return p;
  }

  executeGocode(cmd, args, options) {
    return this.goconfig.executor.exec(cmd, args, options).then(r => {
      const stderr = r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr;
      if (stderr && stderr.trim() !== '') {
        console.log('go-plus: Failed to run gocode:', r.stderr); // eslint-disable-line no-console
      }
      const data = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
      if (!data || !data.trim() || data.startsWith('null')) {
        return [];
      }
      try {
        return JSON.parse(data);
      } catch (e) {
        if (e && e.handle) {
          e.handle();
        }
        atom.notifications.addError('gocode error', {
          detail: data,
          dismissable: true
        });
        console.log('go-plus: Failed to parse the output of gocode:', e); // eslint-disable-line no-console
        return [];
      }
    }).catch(e => {
      console.log(e); // eslint-disable-line no-console
      return [];
    });
  }

  notifySubscribers(p) {
    if (this.subscribers && this.subscribers.length > 0) {
      for (const subscriber of this.subscribers) {
        subscriber(p);
      }
    }
  }

  onDidGetSuggestions(s) {
    if (this.subscribers) {
      this.subscribers.push(s);
    }
  }

  mapMessages(res, editor, position) {
    const candidates = res[1];
    if (!candidates || !candidates.length) {
      return [];
    }
    if (candidates[0] && candidates[0].class === 'PANIC' && candidates[0].type === 'PANIC' && candidates[0].name === 'PANIC') {
      this.bounceGocode();
    }

    this.currentPrefixStartIndex = position.column - res[0];
    const prefix = editor.getTextInBufferRange([[position.row, this.currentPrefixStartIndex], position]);
    let suffix = '';
    try {
      suffix = editor.getTextInBufferRange([position, [position.row, position.column + 1]]);
    } catch (e) {
      console.log(e); // eslint-disable-line no-console
    }
    return (0, _suggestions.toSuggestions)(candidates, {
      prefix,
      suffix,
      snippetMode: this.snippetMode
    });
  }

  bounceGocode() {
    if (this.panicked) {
      return;
    }

    this.panicked = true;
    const notification = atom.notifications.addError('gocode', {
      dismissable: true,
      icon: 'flame',
      detail: 'gocode is panicking',
      description: 'This often happens when you install a new go version, or when you are running an out of date version of `gocode`.' + _os2.default.EOL + _os2.default.EOL + 'See the <a href="https://github.com/joefitzgerald/go-plus/wiki/FAQ#help-the-only-autocomplete-suggestion-that-i-am-receiving-is-panic">FAQ</a> for more information.' + _os2.default.EOL + _os2.default.EOL + 'Often, running `gocode close && go get -u github.com/mdempsky/gocode` is able to fix the issue.' + _os2.default.EOL + _os2.default.EOL + 'If this does not work and you are definitely running the latest version of `gocode`, you might want to search for open issues at <a href="https://github.com/mdempsky/gocode/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20panic">https://github.com/mdempsky/gocode/issues</a>.' + _os2.default.EOL + _os2.default.EOL + 'Would you like to try running `gocode close && go get -u github.com/mdempsky/gocode` now?',
      buttons: [{
        text: 'Yes',
        onDidClick: () => {
          notification.dismiss();
          atom.commands.dispatch(atom.views.getView(atom.workspace), 'golang:update-tools', ['github.com/mdempsky/gocode']);
        }
      }, {
        text: 'Not Now',
        onDidClick: () => {
          notification.dismiss();
        }
      }]
    });
  }
}

exports.GocodeProvider = GocodeProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,