Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GodocView = undefined;

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _etchComponent = require('./../etch-component');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @jsx etch.dom */

class GodocView extends _etchComponent.EtchComponent {

  constructor(props) {
    super(props);
    if (props.model) {
      props.model.view = this;
    }
    this.props = props;
  }

  render() {
    const { msg, doc, keymap } = this.props.model;

    if (msg) {
      return _etch2.default.dom(
        'div',
        null,
        _etch2.default.dom(
          'span',
          { className: 'godoc-panel', tabIndex: '0' },
          msg
        )
      );
    }

    if (!doc || !doc.decl) {
      return _etch2.default.dom(
        'div',
        null,
        _etch2.default.dom(
          'span',
          { className: 'godoc-panel', tabIndex: '0' },
          `Place the cursor on a symbol and run the "golang:showdoc" command (bound to ${keymap})...`
        )
      );
    }
    let decl;
    if (doc.gddo) {
      decl = _etch2.default.dom(
        'a',
        { href: doc.gddo },
        doc.decl
      );
    } else {
      decl = _etch2.default.dom(
        'span',
        null,
        doc.decl
      );
    }

    return _etch2.default.dom(
      'div',
      { tabIndex: '0', className: 'godoc-panel' },
      doc.import && doc.import.length && _etch2.default.dom(
        'div',
        null,
        _etch2.default.dom(
          'span',
          null,
          `import "${doc.import}"`
        ),
        _etch2.default.dom('br', null),
        _etch2.default.dom('br', null)
      ),
      decl,
      _etch2.default.dom('br', null),
      _etch2.default.dom('br', null),
      _etch2.default.dom(
        'span',
        null,
        doc.doc
      )
    );
  }
}
exports.GodocView = GodocView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvZG9jLXZpZXcuanMiXSwibmFtZXMiOlsiR29kb2NWaWV3IiwiRXRjaENvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJtb2RlbCIsInZpZXciLCJyZW5kZXIiLCJtc2ciLCJkb2MiLCJrZXltYXAiLCJkZWNsIiwiZ2RkbyIsImltcG9ydCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQTs7OztBQUNBOzs7O0FBSEE7O0FBT08sTUFBTUEsU0FBTixTQUF3QkMsNEJBQXhCLENBQXNDOztBQUczQ0MsY0FBWUMsS0FBWixFQUEwQztBQUN4QyxVQUFNQSxLQUFOO0FBQ0EsUUFBSUEsTUFBTUMsS0FBVixFQUFpQjtBQUNmRCxZQUFNQyxLQUFOLENBQVlDLElBQVosR0FBbUIsSUFBbkI7QUFDRDtBQUNELFNBQUtGLEtBQUwsR0FBYUEsS0FBYjtBQUNEOztBQUVERyxXQUFTO0FBQ1AsVUFBTSxFQUFFQyxHQUFGLEVBQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QixLQUFLTixLQUFMLENBQVdDLEtBQXhDOztBQUVBLFFBQUlHLEdBQUosRUFBUztBQUNQLGFBQ0U7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLFlBQU0sV0FBVSxhQUFoQixFQUE4QixVQUFTLEdBQXZDO0FBQ0dBO0FBREg7QUFERixPQURGO0FBT0Q7O0FBRUQsUUFBSSxDQUFDQyxHQUFELElBQVEsQ0FBQ0EsSUFBSUUsSUFBakIsRUFBdUI7QUFDckIsYUFDRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsWUFBTSxXQUFVLGFBQWhCLEVBQThCLFVBQVMsR0FBdkM7QUFDSSx5RkFBOEVELE1BQU87QUFEekY7QUFERixPQURGO0FBT0Q7QUFDRCxRQUFJQyxJQUFKO0FBQ0EsUUFBSUYsSUFBSUcsSUFBUixFQUFjO0FBQ1pELGFBQU87QUFBQTtBQUFBLFVBQUcsTUFBTUYsSUFBSUcsSUFBYjtBQUFvQkgsWUFBSUU7QUFBeEIsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMQSxhQUFPO0FBQUE7QUFBQTtBQUFPRixZQUFJRTtBQUFYLE9BQVA7QUFDRDs7QUFFRCxXQUNFO0FBQUE7QUFBQSxRQUFLLFVBQVMsR0FBZCxFQUFrQixXQUFVLGFBQTVCO0FBQ0dGLFVBQUlJLE1BQUosSUFDQ0osSUFBSUksTUFBSixDQUFXQyxNQURaLElBRUc7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBO0FBQVEscUJBQVVMLElBQUlJLE1BQU87QUFBN0IsU0FERjtBQUVFLHNDQUZGO0FBR0U7QUFIRixPQUhOO0FBU0dGLFVBVEg7QUFVRSxvQ0FWRjtBQVdFLG9DQVhGO0FBWUU7QUFBQTtBQUFBO0FBQU9GLFlBQUlBO0FBQVg7QUFaRixLQURGO0FBZ0JEO0FBeEQwQztRQUFoQ1IsUyxHQUFBQSxTIiwiZmlsZSI6ImdvZG9jLXZpZXcuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvbXl1Z2EvLmF0b20vcGFja2FnZXMvZ28tcGx1cy9saWIvZG9jIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8qKiBAanN4IGV0Y2guZG9tICovXG5cbmltcG9ydCBldGNoIGZyb20gJ2V0Y2gnXG5pbXBvcnQgeyBFdGNoQ29tcG9uZW50IH0gZnJvbSAnLi8uLi9ldGNoLWNvbXBvbmVudCdcblxuaW1wb3J0IHR5cGUgeyBHb2RvY1BhbmVsIH0gZnJvbSAnLi9nb2RvYy1wYW5lbCdcblxuZXhwb3J0IGNsYXNzIEdvZG9jVmlldyBleHRlbmRzIEV0Y2hDb21wb25lbnQge1xuICBwcm9wczogeyBtb2RlbDogR29kb2NQYW5lbCB9XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IHsgbW9kZWw6IEdvZG9jUGFuZWwgfSkge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIGlmIChwcm9wcy5tb2RlbCkge1xuICAgICAgcHJvcHMubW9kZWwudmlldyA9IHRoaXNcbiAgICB9XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBtc2csIGRvYywga2V5bWFwIH0gPSB0aGlzLnByb3BzLm1vZGVsXG5cbiAgICBpZiAobXNnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdvZG9jLXBhbmVsXCIgdGFiSW5kZXg9XCIwXCI+XG4gICAgICAgICAgICB7bXNnfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKCFkb2MgfHwgIWRvYy5kZWNsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdvZG9jLXBhbmVsXCIgdGFiSW5kZXg9XCIwXCI+XG4gICAgICAgICAgICB7YFBsYWNlIHRoZSBjdXJzb3Igb24gYSBzeW1ib2wgYW5kIHJ1biB0aGUgXCJnb2xhbmc6c2hvd2RvY1wiIGNvbW1hbmQgKGJvdW5kIHRvICR7a2V5bWFwfSkuLi5gfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfVxuICAgIGxldCBkZWNsXG4gICAgaWYgKGRvYy5nZGRvKSB7XG4gICAgICBkZWNsID0gPGEgaHJlZj17ZG9jLmdkZG99Pntkb2MuZGVjbH08L2E+XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY2wgPSA8c3Bhbj57ZG9jLmRlY2x9PC9zcGFuPlxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHRhYkluZGV4PVwiMFwiIGNsYXNzTmFtZT1cImdvZG9jLXBhbmVsXCI+XG4gICAgICAgIHtkb2MuaW1wb3J0ICYmXG4gICAgICAgICAgZG9jLmltcG9ydC5sZW5ndGggJiYgKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPHNwYW4+e2BpbXBvcnQgXCIke2RvYy5pbXBvcnR9XCJgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAge2RlY2x9XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPHNwYW4+e2RvYy5kb2N9PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iXX0=