Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagsDialog = undefined;

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _etchComponent = require('./../etch-component');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TagsDialog extends _etchComponent.EtchComponent {

  constructor(props) {
    super(props);
    this.tags = [];
    this.case = 'snakecase';

    this.tagRegex = /^[\w]*$/;
    this.optionRegex = /^[\w,]*$/;

    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.commands.add(this.element, 'core:cancel', () => {
      this.cancel();
    }));
    this.subscriptions.add(atom.commands.add(this.element, 'core:confirm', () => {
      this.confirm();
    }));

    this.subscriptions.add(this.refs.tag.onDidStopChanging(() => this.checkInput(this.refs.tag, this.tagRegex)));
    this.subscriptions.add(this.refs.option.onDidStopChanging(() => this.checkInput(this.refs.option, this.optionRegex)));

    this.panel = null;
    this.onAccept = null;

    _etch2.default.update(this);
  } // | 'lispcase'


  render() {
    const icon = this.props.mode === 'Add' ? 'icon icon-tag-add' : 'icon icon-tag-remove';
    const tags = this.tags && this.tags.length ? this.tags.map(this.makeListItem) : null;

    /* eslint-disable react/no-string-refs */
    const radioButtons = this.props.mode === 'Add' ? _etch2.default.dom(
      'div',
      { className: 'case-radio-buttons' },
      _etch2.default.dom(
        'label',
        null,
        'Case: '
      ),
      _etch2.default.dom(
        'label',
        { className: 'input-label' },
        _etch2.default.dom('input', {
          className: 'input-radio',
          type: 'radio',
          caseOption: 'snakecase',
          name: 'caseRadio',
          on: { change: this.caseChanged },
          checked: true
        }),
        ' ',
        'snake_case'
      ),
      _etch2.default.dom(
        'label',
        { className: 'input-label' },
        _etch2.default.dom('input', {
          className: 'input-radio',
          type: 'radio',
          caseOption: 'camelcase',
          name: 'caseRadio',
          on: { change: this.caseChanged }
        }),
        ' ',
        'camelCase'
      ),
      _etch2.default.dom(
        'label',
        { className: 'input-label' },
        _etch2.default.dom('input', {
          className: 'input-radio',
          type: 'radio',
          caseOption: 'lispcase',
          name: 'caseRadio',
          on: { change: this.caseChanged }
        }),
        ' ',
        'lisp-case'
      ),
      _etch2.default.dom('br', null),
      _etch2.default.dom(
        'label',
        { className: 'input-label' },
        _etch2.default.dom('input', {
          className: 'input-toggle',
          type: 'checkbox',
          ref: 'sortCheckbox',
          on: { change: this.sortChanged }
        }),
        ' ',
        'Sort Tags'
      )
    ) : null;

    return _etch2.default.dom(
      'div',
      { className: 'gomodifytags' },
      _etch2.default.dom(
        'h1',
        null,
        _etch2.default.dom(
          'span',
          { className: icon },
          this.props.mode,
          ' Tags'
        )
      ),
      _etch2.default.dom(
        'div',
        { className: 'go-tags-flex-container' },
        _etch2.default.dom(
          'div',
          { className: 'tag' },
          _etch2.default.dom(_atom.TextEditor, { mini: true, ref: 'tag', placeholderText: 'tag (eg. json)' })
        ),
        _etch2.default.dom(
          'div',
          { className: 'option' },
          _etch2.default.dom(_atom.TextEditor, {
            mini: true,
            ref: 'option',
            placeholderText: 'option (eg. omitempty)'
          })
        ),
        _etch2.default.dom(
          'button',
          {
            className: 'btn icon icon-file-add add',
            onclick: () => this.addTag()
          },
          'Add'
        )
      ),
      radioButtons,
      tags && _etch2.default.dom(
        'div',
        { className: 'go-tags-list' },
        _etch2.default.dom(
          'h3',
          null,
          'Tags to ',
          this.props.mode,
          ':'
        ),
        _etch2.default.dom(
          'ul',
          null,
          tags
        )
      ),
      _etch2.default.dom(
        'div',
        { className: 'block' },
        _etch2.default.dom(
          'button',
          {
            className: 'btn',
            onclick: () => this.confirm(),
            ref: 'submitButton'
          },
          'Submit'
        ),
        _etch2.default.dom(
          'button',
          { className: 'btn', onclick: () => this.cancel() },
          'Cancel'
        )
      )
    );
    /* eslint-enable react/no-string-refs */
  }

  checkInput(editor, regex) {
    if (regex.test(editor.getText())) {
      editor.element.classList.remove('invalid-input-value');
    } else {
      editor.element.classList.add('invalid-input-value');
    }
  }

  makeListItem(tag, index) {
    let text = tag.tag;
    if (tag.option) {
      text += ' (' + tag.option + ')';
    }
    return _etch2.default.dom(
      'li',
      { key: index },
      text
    );
  }

  caseChanged(evt) {
    this.case = evt.target.caseOption;
  }

  sortChanged() {
    this.sortTags = this.refs.sortCheckbox.checked;
  }

  addTag() {
    const tag = this.refs.tag.getText();
    const opt = this.refs.option.getText();
    if (tag) {
      this.tags.push({ tag: tag, option: opt });
      this.refs.tag.setText('');
      this.refs.option.setText('');
      this.update();
      this.refs.tag.element.focus();
    }
  }

  attach() {
    this.subscriptions.add(atom.commands.add(this.element, 'gomodifytags:focus-next', () => this.focusNextElement(1)));
    this.subscriptions.add(atom.commands.add(this.element, 'gomodifytags:focus-previous', () => this.focusNextElement(-1)));

    this.panel = atom.workspace.addModalPanel({
      item: this
    });
    this.refs.tag.element.focus();
  }

  confirm() {
    if (this.tags.length === 0) {
      this.addTag();
    }
    if (this.onAccept) {
      this.onAccept({
        tags: this.tags,
        transform: this.case,
        sortTags: this.sortTags
      });
    }
    this.destroy();
  }

  focusNextElement(direction) {
    const elements = [this.refs.tag.element, this.refs.option.element, this.refs.submitButton];
    const focusedElement = elements.find(el => el.classList.contains('is-focused'));
    if (!focusedElement) {
      return;
    }
    let focusedIndex = elements.indexOf(focusedElement);

    focusedIndex += direction;
    if (focusedIndex >= elements.length) {
      focusedIndex = 0;
    } else if (focusedIndex < 0) {
      focusedIndex = elements.length - 1;
    }

    elements[focusedIndex].focus();
    if (elements[focusedIndex].getModel) {
      elements[focusedIndex].getModel().selectAll();
    }
  }

  cancel() {
    this.destroy();
  }

  dispose() {
    this.destroy();
  }

  destroy() {
    super.destroy();
    this.subscriptions.dispose();
    this.tags = [];
    this.onAccept = null;

    if (this.panel) {
      this.panel.destroy();
      this.panel = null;
    }
  }
}
exports.TagsDialog = TagsDialog;
/** @jsx etch.dom */
/* eslint-disable react/no-unknown-property */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,