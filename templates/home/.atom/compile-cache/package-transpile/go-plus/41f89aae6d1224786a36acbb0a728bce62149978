Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OutputPanel = undefined;

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _etchComponent = require('./etch-component');

var _ansi = require('./ansi');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line no-unused-vars

/** @jsx etch.dom */
/* eslint-disable react/no-unknown-property */
/* eslint-disable react/no-string-refs */

const locationRegex = /([\w-/.\\:]*.go:\d+(:\d+)?)/g;

class OutputPanel extends _etchComponent.EtchComponent {

  constructor(props = {}) {
    super(props);
    if (this.props.model) {
      this.props.model.view = this;
    }
  }

  makeLink(text) {
    const elements = [];
    let lastIndex = 0;
    let match;

    do {
      match = locationRegex.exec(text);
      if (match && match.hasOwnProperty('index')) {
        // take raw text up to this match
        elements.push(_etch2.default.dom(
          'span',
          null,
          text.slice(lastIndex, match.index)
        ));

        const linkText = match[0];
        // convert the match to a link
        elements.push(_etch2.default.dom(
          'a',
          {
            onclick: () => this.linkClicked(linkText, this.props.model.props.dir)
          },
          linkText
        ));
        lastIndex = match.index + match[0].length;
      }
    } while (match);

    // raw text from last match to the end
    if (lastIndex < text.length) {
      elements.push(_etch2.default.dom(
        'span',
        null,
        text.slice(lastIndex)
      ));
    }

    return elements;
  }

  render() {
    let style = '';
    let output = '';
    if (this.props.model && this.props.model.props && this.props.model.props.output) {
      output = this.props.model.props.output;
    }

    return _etch2.default.dom(
      'div',
      {
        ref: 'content',
        className: 'go-plus-output-panel',
        scrollTop: this.scrollHeight,
        style: style
      },
      _etch2.default.dom(_ansi.AnsiStyle, { text: output, mapText: this.makeLink.bind(this) })
    );
  }

  linkClicked(text, dir) {
    const { file, line = 1, column = 0 } = (0, _utils.parseGoPosition)(text);

    let filepath;
    if (_path2.default.isAbsolute(file)) {
      filepath = file;
    } else {
      const base = dir || (0, _utils.projectPath)();
      if (!base) {
        return;
      }
      filepath = _path2.default.join(base, file);
    }

    const col = column && column > 0 ? column - 1 : 0;
    (0, _utils.openFile)(filepath, _atom.Point.fromObject([line - 1, col])).catch(err => {
      console.log('could not access ' + file, err); // eslint-disable-line no-console
    });
  }

  readAfterUpdate() {
    const content = this.refs.content;
    if (!content) {
      return;
    }

    const scrollHeight = content.scrollHeight;
    if (scrollHeight && this.scrollHeight !== scrollHeight) {
      this.scrollHeight = scrollHeight;
      content.scrollTop = this.scrollHeight;
      this.update();
    }
  }

  dispose() {
    this.destroy();
  }

  destroy() {
    super.destroy();
    this.props = {};
  }
}
exports.OutputPanel = OutputPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,