Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanelManager = undefined;

var _atom = require('atom');

var _goPlusPanel = require('./go-plus-panel');

class PanelManager {

  constructor() {
    this.activeItem = 'go';

    this.item = {
      getURI: () => _goPlusPanel.PANEL_URI,
      getTitle: () => 'go-plus',
      getIconName: () => 'diff-added',
      getDefaultLocation: () => 'bottom',
      getAllowedLocations: () => ['right', 'left', 'bottom']
    };

    this.subscriptions = new _atom.CompositeDisposable();
    this.viewProviders = new Map();

    this.subscribeToCommands();
  }

  createPanel(visible) {
    if (this.goPlusPanel) {
      this.goPlusPanel.destroy();
    }
    this.goPlusPanel = new _goPlusPanel.GoPlusPanel({ model: this });
    this.item.element = this.goPlusPanel.element;
    //$FlowFixMe
    return atom.workspace.open(this.item, {
      activatePane: visible
    }).then(() => this.requestUpdate());
  }

  requestUpdate() {
    if (this.goPlusPanel) {
      return this.goPlusPanel.update();
    } else {
      return this.createPanel(atom.config.get('go-plus.panel.displayMode') === 'open');
    }
  }

  subscribeToCommands() {
    if (!this.subscriptions) {
      return;
    }
    this.subscriptions.add(atom.commands.add('atom-workspace', 'golang:toggle-panel', () => {
      this.togglePanel();
    }));
  }

  dispose() {
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }

    const pane = atom.workspace.paneForURI(_goPlusPanel.PANEL_URI);
    if (pane) {
      pane.destroyItem(this.item);
    }

    if (this.goPlusPanel) {
      this.goPlusPanel.destroy();
    }
    this.goPlusPanel = null;
    this.viewProviders.clear();
  }

  registerViewProvider(view, model) {
    if (!view || !model || !model.key) {
      return new _atom.Disposable();
    }
    const key = model.key;
    model.requestFocus = () => {
      this.activeItem = key;
      return this.togglePanel(true);
    };
    this.viewProviders.set(key, { view, model });
    if (this.goPlusPanel) {
      this.goPlusPanel.update();
    }

    return new _atom.Disposable(() => {
      if (this.viewProviders && this.viewProviders.has(key)) {
        this.viewProviders.delete(key);
      }
    });
  }

  togglePanel(visible) {
    //$FlowFixMe
    const container = atom.workspace.paneContainerForURI(_goPlusPanel.PANEL_URI);
    if (!container) {
      return this.createPanel(true);
    }

    const pane = atom.workspace.paneForURI(_goPlusPanel.PANEL_URI);
    if (visible === undefined) {
      const currentlyVisible = container.isVisible() && pane && pane.getActiveItem() === this.item;
      visible = !currentlyVisible;
    }

    if (!visible) {
      container.hide();
      for (const _ref of this.viewProviders.values()) {
        const { model } = _ref;

        if (model.isActive) {
          model.isActive(false);
        }
      }
      return Promise.resolve();
    }
    container.show();
    //$FlowFixMe
    pane.activateItemForURI(_goPlusPanel.PANEL_URI);

    if (this.goPlusPanel) {
      return this.goPlusPanel.update();
    } else {
      return Promise.resolve();
    }
  }
}

exports.PanelManager = PanelManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,