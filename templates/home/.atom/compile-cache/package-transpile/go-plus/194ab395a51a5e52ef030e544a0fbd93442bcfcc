Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wantedPackage = wantedPackage;
exports.addImport = addImport;
exports.getPackage = getPackage;
exports.getRelativePackagePath = getRelativePackagePath;
exports.getCurrentGoWorkspaceFromGOPATH = getCurrentGoWorkspaceFromGOPATH;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const vendorString = '/vendor/';

function wantedPackage(buffer, pos) {
  // get the pkg the user tries to autocomplete from the current line
  const lineTillPos = buffer.getTextInRange([[pos.row, 0], pos]);
  const matches = lineTillPos.match(/(\w+)\.$/);
  if (!matches) {
    return null;
  }
  return matches[1];
}

function addImport(buffer, pkg, offset) {
  // find the "package ..." statement
  let row = -1;
  buffer.scan(/^package /, result => {
    row = result.row;
    if (row === undefined && result.range && result.range.start) {
      row = result.range.start.row;
    }
  });
  if (row === -1) {
    return null;
  }

  const text = buffer.getText();

  // import the "pkg" right after the package statement
  const importStmt = `import "${pkg}"\n`;
  const index = buffer.characterIndexForPosition([row + 1, 0]);
  const newText = text.substr(0, index) + importStmt + text.substr(index);
  const newOffset = offset + importStmt.length;
  return { text: newText, offset: newOffset };
}

function getPackage(file, gopath, pkgs, useVendor) {
  if (useVendor) {
    const dir = _path2.default.dirname(file);
    const workspace = getCurrentGoWorkspaceFromGOPATH(gopath, dir);
    const vendorPkgs = pkgs.filter(pkg => pkg.lastIndexOf(vendorString) > 0);
    for (const vpkg of vendorPkgs) {
      const relativePath = getRelativePackagePath(dir, workspace, vpkg);
      if (relativePath) {
        return relativePath;
      }
    }
  }

  // take the first non-vendor package
  return pkgs.find(pkg => pkg.lastIndexOf(vendorString) === -1);
}

function getRelativePackagePath(currentDir, currentWorkspace, pkg) {
  let magicVendorString = vendorString;
  let vendorIndex = pkg.lastIndexOf(magicVendorString);
  if (vendorIndex === -1) {
    magicVendorString = 'vendor/';
    if (pkg.startsWith(magicVendorString)) {
      vendorIndex = 0;
    }
  }
  // Check if current file and the vendor pkg belong to the same root project
  // If yes, then vendor pkg can be replaced with its relative path to the "vendor" folder
  // If not, then the vendor pkg should not be allowed to be imported.
  if (vendorIndex > -1) {
    let rootProjectForVendorPkg = _path2.default.join(currentWorkspace, pkg.substr(0, vendorIndex));
    let relativePathForVendorPkg = pkg.substring(vendorIndex + magicVendorString.length);

    if (relativePathForVendorPkg && currentDir.startsWith(rootProjectForVendorPkg)) {
      return relativePathForVendorPkg;
    }
    return '';
  }

  return pkg;
}

function getCurrentGoWorkspaceFromGOPATH(gopath, currentDir) {
  let workspaces = gopath.split(_path2.default.delimiter);
  let currentWorkspace = '';

  // Find current workspace by checking if current file is
  // under any of the workspaces in $GOPATH
  for (let i = 0; i < workspaces.length; i++) {
    let possibleCurrentWorkspace = _path2.default.join(workspaces[i], 'src');
    if (currentDir.startsWith(possibleCurrentWorkspace)) {
      // In case of nested workspaces, (example: both /Users/me and /Users/me/src/a/b/c are in $GOPATH)
      // both parent & child workspace in the nested workspaces pair can make it inside the above if block
      // Therefore, the below check will take longer (more specific to current file) of the two
      if (possibleCurrentWorkspace.length > currentWorkspace.length) {
        currentWorkspace = possibleCurrentWorkspace;
      }
    }
  }
  return currentWorkspace;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,