Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importablePackages = exports.Importer = undefined;

var _atom = require('atom');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _importerView = require('./importer-view');

var _utils = require('./../utils');

var _go = require('./../go');

var _gocodeproviderHelper = require('./../autocomplete/gocodeprovider-helper');

var gcph = _interopRequireWildcard(_gocodeproviderHelper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Filters an array of all possible import paths into those that are importable
// from some source package.
const importablePackages = (sourceImportPath, packages) => {
  return packages.filter(pkg => {
    // filter out unimportable vendor and internal packages
    // https://golang.org/cmd/go/#hdr-Internal_Directories
    // https://golang.org/cmd/go/#hdr-Vendor_Directories
    const vendor = pkg.indexOf('/vendor/');
    const internal = pkg.indexOf('/internal/');

    if (vendor >= 0) {
      const vendorRoot = pkg.substr(0, vendor);
      if (!sourceImportPath.startsWith(vendorRoot)) {
        return false;
      }
    }
    if (internal >= 0) {
      const internalRoot = pkg.substr(0, internal);
      if (!sourceImportPath.startsWith(internalRoot)) {
        return false;
      }
    }

    return true;
  }).map(pkg => {
    // strip prefix from vendored packages
    // (the import should appear the same as non-vendored)
    const vs = '/vendor/';
    const vendor = pkg.indexOf(vs);
    if (vendor === -1) {
      return pkg;
    }
    return pkg.substr(vendor + vs.length);
  });
};

class Importer {

  constructor(goconfig) {
    this.goconfig = goconfig;
    this.view = new _importerView.ImporterView({
      items: [],
      didConfirmSelection: pkg => this.addImport(pkg)
    });
    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.commands.add('atom-text-editor[data-grammar~="go"]:not([mini])', 'golang:import-package', () => this.commandInvoked()));
    this.subscriptions.add(this.view);
  }

  dispose() {
    this.subscriptions.dispose();
  }

  commandInvoked() {
    const pkgMap = (0, _go.allPackages)(this.goconfig);
    const pkgs = [].concat.apply([], Array.from(pkgMap.values()));
    const editor = (0, _utils.getEditor)();
    const editorPath = editor ? editor.getPath() : null;
    if (editor && typeof editorPath === 'string') {
      const dir = _path2.default.dirname(editorPath);
      const workspace = gcph.getCurrentGoWorkspaceFromGOPATH(this.goconfig.locator.gopath(), dir);

      // get the import path of the package we're currently editing
      const currentPkg = dir.replace(new RegExp(`^${workspace}/`), '');

      const importable = importablePackages(currentPkg, pkgs);
      this.view.show(importable);
    }
  }

  async addImport(pkg) {
    const editor = (0, _utils.getEditor)();
    if (!editor) {
      return { success: false };
    }
    const cmd = await this.goconfig.locator.findTool('goaddimport');
    if (!cmd) {
      atom.notifications.addError('Missing Tool', {
        detail: 'Unable to find the `goaddimport` tool.',
        dismissable: true
      });
      return { success: false };
    }
    const r = await this.goconfig.executor.exec(cmd, [pkg], {
      input: editor.getText()
    });
    if (r.error) {
      atom.notifications.addError('Error', {
        detail: r.error.message,
        dismissable: true
      });
      return { success: false, r };
    }

    if (r.exitcode === 0) {
      const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
      editor.getBuffer().setTextViaDiff(stdout);
      return { success: true, r };
    }

    return { success: false, r };
  }
}

exports.Importer = Importer;
exports.importablePackages = importablePackages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,