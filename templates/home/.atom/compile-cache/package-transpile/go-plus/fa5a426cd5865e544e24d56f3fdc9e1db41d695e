Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PANEL_URI = exports.GoPlusPanel = undefined;

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _resizeObserverPolyfill = require('resize-observer-polyfill');

var _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);

var _etchComponent = require('./../etch-component');

var _emptyTabView = require('./empty-tab-view');

var _etchOcticon = require('etch-octicon');

var _etchOcticon2 = _interopRequireDefault(_etchOcticon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GoPlusPanel extends _etchComponent.EtchComponent {

  constructor(props) {
    super(props);
    this.ro = new _resizeObserverPolyfill2.default(entries => {
      for (const entry of entries) {
        const { width } = entry.contentRect;
        const narrow = width < 600;
        if (this.isNarrow !== narrow) {
          this.isNarrow = narrow;
          this.update();
        }
      }
    });
    this.ro.observe(this.element);
  }

  render() {
    const panelBodyStyle = {
      padding: '10px'
    };

    let panelClass = 'go-plus-panel';
    if (this.isNarrow) {
      panelClass += ' is-narrow';
    }

    let tabs = [];
    let ActiveView;
    let activeModel;
    let packageName = 'unknown';
    const activeRef = this.props.model.activeItem + 'view';
    this.props.model.viewProviders.forEach(({ view, model }) => {
      if (this.props.model.activeItem === model.key) {
        ActiveView = view;
        activeModel = model;
        if (model && model.isActive) {
          model.isActive(true);
        }
      } else {
        if (model && model.isActive) {
          model.isActive(false);
        }
      }
      if (tabs.find(({ key }) => key === model.key)) {
        return;
      }
      tabs.push(Object.assign({
        key: model.key,
        order: 999,
        icon: 'question',
        packageName: 'unknown',
        name: ''
      }, model.tab));
    });
    if (!ActiveView || !activeModel) {
      ActiveView = _emptyTabView.EmptyTabView;
    }

    if (activeModel && activeModel.tab && activeModel.tab.suppressPadding) {
      panelBodyStyle.padding = '0px';
    }

    tabs = tabs.map(item => {
      item.className = 'panel-nav-item';
      if (this.props.model.activeItem === item.key) {
        item.className = item.className + ' is-selected';
      }
      return item;
    }).sort((a, b) => a.order - b.order || a.name.localeCompare(b.name));

    return _etch2.default.dom(
      'div',
      { ref: 'thepanel', className: panelClass },
      _etch2.default.dom(
        'div',
        { className: 'panel-heading' },
        _etch2.default.dom(
          'nav',
          { className: 'panel-group panel-nav' },
          tabs.map(item => {
            const tabKey = item.key + '-tab';
            return _etch2.default.dom(
              'span',
              {
                key: tabKey,
                className: item.className,
                on: { click: () => this.handleTabClick(item) }
              },
              _etch2.default.dom(_etchOcticon2.default, { name: item.icon }),
              _etch2.default.dom(
                'span',
                { className: 'panel-nav-label' },
                item.name
              )
            );
          })
        )
      ),
      _etch2.default.dom(
        'div',
        {
          ref: 'panelbody',
          className: 'go-plus-panel-body panel-body native-key-bindings',
          tabIndex: '0',
          style: panelBodyStyle
        },
        _etch2.default.dom(ActiveView, {
          ref: activeRef,
          model: activeModel,
          packageName: packageName
        })
      )
    );
  }

  readAfterUpdate() {
    const content = this.refs.content;
    if (!content) {
      return;
    }

    const scrollHeight = content.scrollHeight;
    if (scrollHeight && this.scrollHeight !== scrollHeight) {
      this.scrollHeight = scrollHeight;
      this.update();
    }
  }

  handleTabClick(item) {
    if (item && item.key && item.key.length && this.props.model.activeItem !== item.key) {
      this.props.model.activeItem = item.key;
      this.update();
    }
  }

  dispose() {
    this.destroy();
  }

  destroy() {
    this.ro.unobserve(this.element);
    this.ro = null;
    super.destroy(true);
  }
}

exports.GoPlusPanel = GoPlusPanel;
/** @jsx etch.dom */
/* eslint-disable react/no-unknown-property */
/* eslint-disable react/no-string-refs */

const PANEL_URI = exports.PANEL_URI = 'atom://go-plus/panel';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,