Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleDialog = undefined;

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _etchComponent = require('./etch-component');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SimpleDialog extends _etchComponent.EtchComponent {

  constructor(props) {
    super(props);

    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.commands.add(this.element, 'core:cancel', () => this.cancel()));
    this.subscriptions.add(atom.commands.add(this.element, 'core:confirm', () => this.confirm()));
  }

  render() {
    const { prompt } = this.props;
    /* eslint-disable react/no-string-refs */
    return _etch2.default.dom(
      'div',
      { className: 'go-plus-dialog' },
      _etch2.default.dom(
        'div',
        { style: 'padding: 1em;' },
        prompt
      ),
      _etch2.default.dom(_atom.TextEditor, { ref: 'input', mini: true })
    );
    /* eslint-enable react/no-string-refs */
  }

  attach() {
    const { input, initialValue } = this.refs;
    if (input) {
      this.panel = atom.workspace.addModalPanel({ item: this });
      if (initialValue) {
        input.setText(initialValue);
        input.selectAll();
      }
      this.previouslyFocusedElement = document.activeElement;
      input.element.focus();
    }
  }

  confirm() {
    const value = this.refs.input.getText();
    const { onConfirm } = this.props;
    this.destroy();
    if (onConfirm) {
      onConfirm(value);
    }
  }

  cancel() {
    const { onCancel } = this.props;
    this.destroy();
    if (onCancel) {
      onCancel();
    }
  }

  dispose() {
    this.destroy();
  }

  destroy() {
    super.destroy();
    this.subscriptions.dispose();
    if (this.panel) {
      this.panel.destroy();
      this.panel = null;
    }
    if (this.previouslyFocusedElement) {
      this.previouslyFocusedElement.focus();
      this.previouslyFocusedElement = null;
    }
  }
}
exports.SimpleDialog = SimpleDialog;
/** @jsx etch.dom */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZS1kaWFsb2cuanMiXSwibmFtZXMiOlsiU2ltcGxlRGlhbG9nIiwiRXRjaENvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdWJzY3JpcHRpb25zIiwiQ29tcG9zaXRlRGlzcG9zYWJsZSIsImFkZCIsImF0b20iLCJjb21tYW5kcyIsImVsZW1lbnQiLCJjYW5jZWwiLCJjb25maXJtIiwicmVuZGVyIiwicHJvbXB0IiwiYXR0YWNoIiwiaW5wdXQiLCJpbml0aWFsVmFsdWUiLCJyZWZzIiwicGFuZWwiLCJ3b3Jrc3BhY2UiLCJhZGRNb2RhbFBhbmVsIiwiaXRlbSIsInNldFRleHQiLCJzZWxlY3RBbGwiLCJwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJmb2N1cyIsInZhbHVlIiwiZ2V0VGV4dCIsIm9uQ29uZmlybSIsImRlc3Ryb3kiLCJvbkNhbmNlbCIsImRpc3Bvc2UiXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0E7O0FBQ0E7Ozs7QUFDQTs7OztBQVNPLE1BQU1BLFlBQU4sU0FBMkJDLDRCQUEzQixDQUF5Qzs7QUFNOUNDLGNBQVlDLEtBQVosRUFBMEI7QUFDeEIsVUFBTUEsS0FBTjs7QUFFQSxTQUFLQyxhQUFMLEdBQXFCLElBQUlDLHlCQUFKLEVBQXJCO0FBQ0EsU0FBS0QsYUFBTCxDQUFtQkUsR0FBbkIsQ0FDRUMsS0FBS0MsUUFBTCxDQUFjRixHQUFkLENBQWtCLEtBQUtHLE9BQXZCLEVBQWdDLGFBQWhDLEVBQStDLE1BQU0sS0FBS0MsTUFBTCxFQUFyRCxDQURGO0FBR0EsU0FBS04sYUFBTCxDQUFtQkUsR0FBbkIsQ0FDRUMsS0FBS0MsUUFBTCxDQUFjRixHQUFkLENBQWtCLEtBQUtHLE9BQXZCLEVBQWdDLGNBQWhDLEVBQWdELE1BQU0sS0FBS0UsT0FBTCxFQUF0RCxDQURGO0FBR0Q7O0FBRURDLFdBQVM7QUFDUCxVQUFNLEVBQUVDLE1BQUYsS0FBYSxLQUFLVixLQUF4QjtBQUNBO0FBQ0EsV0FDRTtBQUFBO0FBQUEsUUFBSyxXQUFVLGdCQUFmO0FBQ0U7QUFBQTtBQUFBLFVBQUssT0FBTSxlQUFYO0FBQTRCVTtBQUE1QixPQURGO0FBRUUseUJBQUMsZ0JBQUQsSUFBWSxLQUFJLE9BQWhCLEVBQXdCLFVBQXhCO0FBRkYsS0FERjtBQU1BO0FBQ0Q7O0FBRURDLFdBQVM7QUFDUCxVQUFNLEVBQUVDLEtBQUYsRUFBU0MsWUFBVCxLQUEwQixLQUFLQyxJQUFyQztBQUNBLFFBQUlGLEtBQUosRUFBVztBQUNULFdBQUtHLEtBQUwsR0FBYVgsS0FBS1ksU0FBTCxDQUFlQyxhQUFmLENBQTZCLEVBQUVDLE1BQU0sSUFBUixFQUE3QixDQUFiO0FBQ0EsVUFBSUwsWUFBSixFQUFrQjtBQUNoQkQsY0FBTU8sT0FBTixDQUFjTixZQUFkO0FBQ0FELGNBQU1RLFNBQU47QUFDRDtBQUNELFdBQUtDLHdCQUFMLEdBQWdDQyxTQUFTQyxhQUF6QztBQUNBWCxZQUFNTixPQUFOLENBQWNrQixLQUFkO0FBQ0Q7QUFDRjs7QUFFRGhCLFlBQVU7QUFDUixVQUFNaUIsUUFBUSxLQUFLWCxJQUFMLENBQVVGLEtBQVYsQ0FBZ0JjLE9BQWhCLEVBQWQ7QUFDQSxVQUFNLEVBQUVDLFNBQUYsS0FBZ0IsS0FBSzNCLEtBQTNCO0FBQ0EsU0FBSzRCLE9BQUw7QUFDQSxRQUFJRCxTQUFKLEVBQWU7QUFDYkEsZ0JBQVVGLEtBQVY7QUFDRDtBQUNGOztBQUVEbEIsV0FBUztBQUNQLFVBQU0sRUFBRXNCLFFBQUYsS0FBZSxLQUFLN0IsS0FBMUI7QUFDQSxTQUFLNEIsT0FBTDtBQUNBLFFBQUlDLFFBQUosRUFBYztBQUNaQTtBQUNEO0FBQ0Y7O0FBRURDLFlBQVU7QUFDUixTQUFLRixPQUFMO0FBQ0Q7O0FBRURBLFlBQVU7QUFDUixVQUFNQSxPQUFOO0FBQ0EsU0FBSzNCLGFBQUwsQ0FBbUI2QixPQUFuQjtBQUNBLFFBQUksS0FBS2YsS0FBVCxFQUFnQjtBQUNkLFdBQUtBLEtBQUwsQ0FBV2EsT0FBWDtBQUNBLFdBQUtiLEtBQUwsR0FBYSxJQUFiO0FBQ0Q7QUFDRCxRQUFJLEtBQUtNLHdCQUFULEVBQW1DO0FBQ2pDLFdBQUtBLHdCQUFMLENBQThCRyxLQUE5QjtBQUNBLFdBQUtILHdCQUFMLEdBQWdDLElBQWhDO0FBQ0Q7QUFDRjtBQTNFNkM7UUFBbkN4QixZLEdBQUFBLFk7QUFiYiIsImZpbGUiOiJzaW1wbGUtZGlhbG9nLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLXBsdXMvbGliIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8qKiBAanN4IGV0Y2guZG9tICovXG5cbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIFRleHRFZGl0b3IgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IGV0Y2ggZnJvbSAnZXRjaCdcbmltcG9ydCB7IEV0Y2hDb21wb25lbnQgfSBmcm9tICcuL2V0Y2gtY29tcG9uZW50J1xuXG50eXBlIFByb3BzID0ge1xuICBwcm9tcHQ6IHN0cmluZyxcbiAgaW5pdGlhbFZhbHVlPzogc3RyaW5nLFxuICBvbkNvbmZpcm06IHN0cmluZyA9PiB2b2lkLFxuICBvbkNhbmNlbD86ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IGNsYXNzIFNpbXBsZURpYWxvZyBleHRlbmRzIEV0Y2hDb21wb25lbnQge1xuICBwcm9wczogUHJvcHNcbiAgc3Vic2NyaXB0aW9uczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwYW5lbDogP2F0b20kUGFuZWxcbiAgcHJldmlvdXNseUZvY3VzZWRFbGVtZW50OiA/SFRNTEVsZW1lbnRcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgYXRvbS5jb21tYW5kcy5hZGQodGhpcy5lbGVtZW50LCAnY29yZTpjYW5jZWwnLCAoKSA9PiB0aGlzLmNhbmNlbCgpKVxuICAgIClcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgYXRvbS5jb21tYW5kcy5hZGQodGhpcy5lbGVtZW50LCAnY29yZTpjb25maXJtJywgKCkgPT4gdGhpcy5jb25maXJtKCkpXG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvbXB0IH0gPSB0aGlzLnByb3BzXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tc3RyaW5nLXJlZnMgKi9cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnby1wbHVzLWRpYWxvZ1wiPlxuICAgICAgICA8ZGl2IHN0eWxlPVwicGFkZGluZzogMWVtO1wiPntwcm9tcHR9PC9kaXY+XG4gICAgICAgIDxUZXh0RWRpdG9yIHJlZj1cImlucHV0XCIgbWluaSAvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3Qvbm8tc3RyaW5nLXJlZnMgKi9cbiAgfVxuXG4gIGF0dGFjaCgpIHtcbiAgICBjb25zdCB7IGlucHV0LCBpbml0aWFsVmFsdWUgfSA9IHRoaXMucmVmc1xuICAgIGlmIChpbnB1dCkge1xuICAgICAgdGhpcy5wYW5lbCA9IGF0b20ud29ya3NwYWNlLmFkZE1vZGFsUGFuZWwoeyBpdGVtOiB0aGlzIH0pXG4gICAgICBpZiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGlucHV0LnNldFRleHQoaW5pdGlhbFZhbHVlKVxuICAgICAgICBpbnB1dC5zZWxlY3RBbGwoKVxuICAgICAgfVxuICAgICAgdGhpcy5wcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICBpbnB1dC5lbGVtZW50LmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBjb25maXJtKCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5yZWZzLmlucHV0LmdldFRleHQoKVxuICAgIGNvbnN0IHsgb25Db25maXJtIH0gPSB0aGlzLnByb3BzXG4gICAgdGhpcy5kZXN0cm95KClcbiAgICBpZiAob25Db25maXJtKSB7XG4gICAgICBvbkNvbmZpcm0odmFsdWUpXG4gICAgfVxuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIGNvbnN0IHsgb25DYW5jZWwgfSA9IHRoaXMucHJvcHNcbiAgICB0aGlzLmRlc3Ryb3koKVxuICAgIGlmIChvbkNhbmNlbCkge1xuICAgICAgb25DYW5jZWwoKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5kZXN0cm95KClcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmRpc3Bvc2UoKVxuICAgIGlmICh0aGlzLnBhbmVsKSB7XG4gICAgICB0aGlzLnBhbmVsLmRlc3Ryb3koKVxuICAgICAgdGhpcy5wYW5lbCA9IG51bGxcbiAgICB9XG4gICAgaWYgKHRoaXMucHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudC5mb2N1cygpXG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA9IG51bGxcbiAgICB9XG4gIH1cbn1cbiJdfQ==