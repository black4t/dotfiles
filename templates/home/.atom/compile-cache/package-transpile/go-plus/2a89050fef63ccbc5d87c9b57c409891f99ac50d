Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Linter = undefined;

var _tokenizeArgString = require('yargs-parser/lib/tokenize-arg-string');

var _tokenizeArgString2 = _interopRequireDefault(_tokenizeArgString);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _utils = require('./../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Linter {

  constructor(goconfig, linter, busySignal) {
    this.goconfig = goconfig;
    this.linter = linter;
    this.busySignal = busySignal;
  }

  dispose() {
    this.disposed = true;
  }

  deleteMessages() {
    const linter = this.linter();
    if (linter) {
      linter.clearMessages();
    }
  }

  setMessages(messages) {
    const linter = this.linter();
    if (linter && messages && messages.length) {
      linter.setAllMessages(messages);
    }
  }

  lint(editor) {
    const bs = this.busySignal();
    const lintPromise = this.doLint(editor);
    return bs ? bs.reportBusyWhile('Linting Go', () => lintPromise) : lintPromise;
  }

  async doLint(editor) {
    if (!(0, _utils.isValidEditor)(editor)) {
      return;
    }

    const buffer = editor.getBuffer();
    if (!buffer) {
      return;
    }
    this.deleteMessages();

    const tool = atom.config.get('go-plus.lint.tool');
    const cmd = await this.goconfig.locator.findTool(tool);
    if (!cmd) {
      return;
    }

    const options = this.goconfig.executor.getOptions('file', editor);

    let configuredArgs = atom.config.get('go-plus.lint.args');
    if (typeof configuredArgs === 'string') {
      configuredArgs = configuredArgs ? (0, _tokenizeArgString2.default)(configuredArgs) : [];
    }

    let args = TOOLS[tool.toLowerCase()].prepareArgs(configuredArgs);
    args = replaceVariables(args, editor.getPath(), options);

    const r = await this.goconfig.executor.exec(cmd, args, options);
    if (!r) {
      return;
    }
    const stderr = r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr;
    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    if (stderr && stderr.trim() !== '') {
      console.log(`${tool}-linter: (stderr) ` + stderr); // eslint-disable-line no-console
    }
    let messages = [];
    if (stdout && stdout.trim() !== '') {
      messages = TOOLS[tool.toLowerCase()].mapMessages(stdout, editor, options.cwd || '');

      messages.sort((a, b) => {
        if (a.location.file === b.location.file) {
          return a.location.position.compare(b.location.position);
        } else {
          return a.location.file.localeCompare(b.location.file);
        }
      });
    }
    this.setMessages(messages);
  }
}
exports.Linter = Linter;


const regexVariable = /\${(.*?)}/g;
function replaceVariables(args, file, options) {
  const workspaceFile = file && atom.project.relativizePath(file);
  const variables = {
    env: options.env,
    cwd: options.cwd,
    file,
    fileBasename: file && _path2.default.basename(file),
    fileDirname: file && _path2.default.dirname(file),
    relativeFile: workspaceFile && workspaceFile[1],
    workspaceRoot: workspaceFile && workspaceFile[0]
  };
  return args.map(arg => {
    return arg.replace(regexVariable, (group, name) => {
      if (name.startsWith('env.')) {
        return variables.env[name.replace('env.', '')];
      }
      return variables[name];
    });
  });
}

const TOOLS = {
  gometalinter: {
    prepareArgs(configuredArgs) {
      let args = [...configuredArgs];
      if (!args.length) {
        args = ['--vendor', '--disable-all', '--enable=vet', '--enable=vetshadow', '--enable=golint', '--enable=ineffassign', '--enable=goconst', '--tests', '--json', '.'];
      }
      if (!args.includes('--json')) {
        args.unshift('--json');
      }
      return args;
    },
    mapMessages(stdout, editor, cwd) {
      let messages = [];
      try {
        messages = JSON.parse(stdout);
      } catch (e) {
        console.log(e); // eslint-disable-line no-console
      }
      if (!messages || messages.length < 1) {
        return [];
      }

      const results = [];

      for (const message of messages) {
        let range;
        if (message.col && message.col >= 0) {
          range = new _atom.Range([message.line - 1, message.col - 1], [message.line - 1, 1000]);
        } else {
          range = new _atom.Range([message.line - 1, 0], [message.line - 1, 1000]);
        }
        results.push({
          linterName: message.linter,
          severity: message.severity.toLowerCase(),
          location: {
            file: _path2.default.join(cwd, message.path),
            position: range
          },
          excerpt: message.message + ' (' + message.linter + ')'
        });
      }

      return results;
    }
  },
  revive: {
    prepareArgs(configuredArgs) {
      let args = ['--formatter=json'];
      if (Array.isArray(configuredArgs) && configuredArgs.length > 0) {
        for (let i = 0; i < configuredArgs.length; i++) {
          const arg = configuredArgs[i];
          if (arg === '-formatter') {
            i++; // skip this and the following value
            continue;
          }
          if (arg.startsWith('--formatter=')) {
            continue;
          }
          args.push(arg);
        }
      }
      return args;
    },
    mapMessages(stdout, editor, cwd) {
      let messages = [];
      try {
        messages = JSON.parse(stdout);
      } catch (e) {
        console.log(e); // eslint-disable-line no-console
      }

      if (!messages || messages.length < 1) {
        return [];
      }

      return messages.map(m => {
        const position = new _atom.Range([m.Position.Start.Line - 1, m.Position.Start.Column - 1], [m.Position.End.Line - 1, m.Position.End.Column - 1]);

        const message = {
          location: {
            file: _path2.default.join(cwd, m.Position.Start.Filename),
            position
          },
          url: `https://revive.run/r#${m.RuleName}`,
          excerpt: `${m.Failure} (${m.RuleName})`,
          severity: m.Severity.toLowerCase(),
          linterName: 'revive'
        };

        if (m.ReplacementLine) {
          message.solutions = [{
            position: new _atom.Range([position.start.row, 0], [position.start.row, 1000]),
            replaceWith: m.ReplacementLine
          }];
        }

        return message;
      });
    }
  },
  'golangci-lint': {
    prepareArgs(configuredArgs) {
      const args = ['run', '--out-format=json'];
      if (Array.isArray(configuredArgs) && configuredArgs.length > 0) {
        for (let i = 0; i < configuredArgs.length; i++) {
          const arg = configuredArgs[i];
          if (arg.startsWith('--out-format')) {
            continue;
          }
          args.push(arg);
        }
      }
      return args;
    },
    mapMessages(stdout, editor, cwd) {
      let parsed;
      try {
        parsed = JSON.parse(stdout);
      } catch (e) {
        console.log(e); // eslint-disable-line no-console
      }

      const issues = parsed && parsed.Issues || [];
      if (issues.length < 1) {
        return [];
      }

      return issues.map(i => {
        const position = new _atom.Range([i.Pos.Line - 1, i.Pos.Column - 1], [i.Pos.Line - 1, 1000]);
        return {
          location: {
            file: _path2.default.join(cwd, i.Pos.Filename),
            position
          },
          excerpt: i.Text,
          severity: 'warning',
          linterName: i.FromLinter
        };
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbnRlci5qcyJdLCJuYW1lcyI6WyJMaW50ZXIiLCJjb25zdHJ1Y3RvciIsImdvY29uZmlnIiwibGludGVyIiwiYnVzeVNpZ25hbCIsImRpc3Bvc2UiLCJkaXNwb3NlZCIsImRlbGV0ZU1lc3NhZ2VzIiwiY2xlYXJNZXNzYWdlcyIsInNldE1lc3NhZ2VzIiwibWVzc2FnZXMiLCJsZW5ndGgiLCJzZXRBbGxNZXNzYWdlcyIsImxpbnQiLCJlZGl0b3IiLCJicyIsImxpbnRQcm9taXNlIiwiZG9MaW50IiwicmVwb3J0QnVzeVdoaWxlIiwiYnVmZmVyIiwiZ2V0QnVmZmVyIiwidG9vbCIsImF0b20iLCJjb25maWciLCJnZXQiLCJjbWQiLCJsb2NhdG9yIiwiZmluZFRvb2wiLCJvcHRpb25zIiwiZXhlY3V0b3IiLCJnZXRPcHRpb25zIiwiY29uZmlndXJlZEFyZ3MiLCJhcmdzIiwiVE9PTFMiLCJ0b0xvd2VyQ2FzZSIsInByZXBhcmVBcmdzIiwicmVwbGFjZVZhcmlhYmxlcyIsImdldFBhdGgiLCJyIiwiZXhlYyIsInN0ZGVyciIsIkJ1ZmZlciIsInRvU3RyaW5nIiwic3Rkb3V0IiwidHJpbSIsImNvbnNvbGUiLCJsb2ciLCJtYXBNZXNzYWdlcyIsImN3ZCIsInNvcnQiLCJhIiwiYiIsImxvY2F0aW9uIiwiZmlsZSIsInBvc2l0aW9uIiwiY29tcGFyZSIsImxvY2FsZUNvbXBhcmUiLCJyZWdleFZhcmlhYmxlIiwid29ya3NwYWNlRmlsZSIsInByb2plY3QiLCJyZWxhdGl2aXplUGF0aCIsInZhcmlhYmxlcyIsImVudiIsImZpbGVCYXNlbmFtZSIsInBhdGgiLCJiYXNlbmFtZSIsImZpbGVEaXJuYW1lIiwiZGlybmFtZSIsInJlbGF0aXZlRmlsZSIsIndvcmtzcGFjZVJvb3QiLCJtYXAiLCJhcmciLCJyZXBsYWNlIiwiZ3JvdXAiLCJuYW1lIiwic3RhcnRzV2l0aCIsImdvbWV0YWxpbnRlciIsImluY2x1ZGVzIiwidW5zaGlmdCIsIkpTT04iLCJwYXJzZSIsImUiLCJyZXN1bHRzIiwibWVzc2FnZSIsInJhbmdlIiwiY29sIiwiUmFuZ2UiLCJsaW5lIiwicHVzaCIsImxpbnRlck5hbWUiLCJzZXZlcml0eSIsImpvaW4iLCJleGNlcnB0IiwicmV2aXZlIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsIm0iLCJQb3NpdGlvbiIsIlN0YXJ0IiwiTGluZSIsIkNvbHVtbiIsIkVuZCIsIkZpbGVuYW1lIiwidXJsIiwiUnVsZU5hbWUiLCJGYWlsdXJlIiwiU2V2ZXJpdHkiLCJSZXBsYWNlbWVudExpbmUiLCJzb2x1dGlvbnMiLCJzdGFydCIsInJvdyIsInJlcGxhY2VXaXRoIiwicGFyc2VkIiwiaXNzdWVzIiwiSXNzdWVzIiwiUG9zIiwiVGV4dCIsIkZyb21MaW50ZXIiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBZ0RBLE1BQU1BLE1BQU4sQ0FBYTs7QUFNWEMsY0FDRUMsUUFERixFQUVFQyxNQUZGLEVBR0VDLFVBSEYsRUFJRTtBQUNBLFNBQUtGLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDRDs7QUFFREMsWUFBVTtBQUNSLFNBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDRDs7QUFFREMsbUJBQWlCO0FBQ2YsVUFBTUosU0FBUyxLQUFLQSxNQUFMLEVBQWY7QUFDQSxRQUFJQSxNQUFKLEVBQVk7QUFDVkEsYUFBT0ssYUFBUDtBQUNEO0FBQ0Y7O0FBRURDLGNBQVlDLFFBQVosRUFBOEM7QUFDNUMsVUFBTVAsU0FBUyxLQUFLQSxNQUFMLEVBQWY7QUFDQSxRQUFJQSxVQUFVTyxRQUFWLElBQXNCQSxTQUFTQyxNQUFuQyxFQUEyQztBQUN6Q1IsYUFBT1MsY0FBUCxDQUFzQkYsUUFBdEI7QUFDRDtBQUNGOztBQUVERyxPQUFLQyxNQUFMLEVBQXdDO0FBQ3RDLFVBQU1DLEtBQUssS0FBS1gsVUFBTCxFQUFYO0FBQ0EsVUFBTVksY0FBYyxLQUFL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SWdDLFdBQUosQ0FDZixDQUFDVSxFQUFFb0IsR0FBRixDQUFNaEIsSUFBTixHQUFhLENBQWQsRUFBaUJKLEVBQUVvQixHQUFGLENBQU1mLE1BQU4sR0FBZSxDQUFoQyxDQURlLEVBRWYsQ0FBQ0wsRUFBRW9CLEdBQUYsQ0FBTWhCLElBQU4sR0FBYSxDQUFkLEVBQWlCLElBQWpCLENBRmUsQ0FBakI7QUFJQSxlQUFPO0FBQ0xoRCxvQkFBVTtBQUNSQyxrQkFBTVcsZUFBSzJCLElBQUwsQ0FBVTNDLEdBQVYsRUFBZWdELEVBQUVvQixHQUFGLENBQU1iLFFBQXJCLENBREU7QUFFUmpEO0FBRlEsV0FETDtBQUtMc0MsbUJBQVNJLEVBQUVxQixJQUxOO0FBTUwzQixvQkFBVSxTQU5MO0FBT0xELHNCQUFZTyxFQUFFc0I7QUFQVCxTQUFQO0FBU0QsT0FkTSxDQUFQO0FBZUQ7QUE5Q2M7QUFuSWUsQ0FBbEMiLCJmaWxlIjoibGludGVyLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLXBsdXMvbGliL2xpbnQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgYXJncGFyc2VyIGZyb20gJ3lhcmdzLXBhcnNlci9saWIvdG9rZW5pemUtYXJnLXN0cmluZydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBSYW5nZSwgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBpc1ZhbGlkRWRpdG9yIH0gZnJvbSAnLi8uLi91dGlscydcblxuaW1wb3J0IHR5cGUgeyBEaXNwb3NhYmxlLCBQb2ludCB9IGZyb20gJ2F0b20nXG5pbXBvcnQgdHlwZSB7IEdvQ29uZmlnIH0gZnJvbSAnLi8uLi9jb25maWcvc2VydmljZSdcbmltcG9ydCB0eXBlIHsgRXhlY3V0b3JPcHRpb25zLCBFeGVjUmVzdWx0IH0gZnJvbSAnLi8uLi9jb25maWcvZXhlY3V0b3InXG5cbmV4cG9ydCB0eXBlIExpbnRlclYyTWVzc2FnZSA9IHtcbiAgbmFtZT86IHN0cmluZyxcbiAgbG9jYXRpb246IHtcbiAgICBmaWxlOiBzdHJpbmcsXG4gICAgcG9zaXRpb246IFJhbmdlXG4gIH0sXG4gIHJlZmVyZW5jZT86IHtcbiAgICBmaWxlOiBzdHJpbmcsXG4gICAgcG9zaXRpb24/OiBQb2ludFxuICB9LFxuICB1cmw/OiBzdHJpbmcsXG4gIGljb24/OiBzdHJpbmcsXG4gIGV4Y2VycHQ6IHN0cmluZyxcbiAgc2V2ZXJpdHk6ICdlcnJvcicgfCAnd2FybmluZycgfCAnaW5mbycsXG4gIHNvbHV0aW9ucz86IEFycmF5PFxuICAgIHwge1xuICAgICAgICB0aXRsZT86IHN0cmluZyxcbiAgICAgICAgcG9zaXRpb246IFJhbmdlLFxuICAgICAgICBwcmlvcml0eT86IG51bWJlcixcbiAgICAgICAgY3VycmVudFRleHQ/OiBzdHJpbmcsXG4gICAgICAgIHJlcGxhY2VXaXRoOiBzdHJpbmdcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgdGl0bGU/OiBzdHJpbmcsXG4gICAgICAgIHByaW9yaXR5PzogbnVtYmVyLFxuICAgICAgICBhcHBseTogKCkgPT4gYW55XG4gICAgICB9XG4gID4sXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgKCgpID0+IFByb21pc2U8c3RyaW5nPiB8IHN0cmluZyksXG4gIGxpbnRlck5hbWU/OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgTGludGVyRGVsZWdhdGUgPSB7XG4gIGdldE1lc3NhZ2VzKCk6IEFycmF5PExpbnRlclYyTWVzc2FnZT4sXG4gIGNsZWFyTWVzc2FnZXMoKTogdm9pZCxcbiAgc2V0TWVzc2FnZXMoZmlsZVBhdGg6IHN0cmluZywgbWVzc2FnZXM6IEFycmF5PExpbnRlclYyTWVzc2FnZT4pOiB2b2lkLFxuICBzZXRBbGxNZXNzYWdlcyhtZXNzYWdlczogQXJyYXk8TGludGVyVjJNZXNzYWdlPik6IHZvaWQsXG4gIG9uRGlkVXBkYXRlKGNhbGxiYWNrOiBGdW5jdGlvbik6IERpc3Bvc2FibGUsXG4gIG9uRGlkRGVzdHJveShjYWxsYmFjazogRnVuY3Rpb24pOiBEaXNwb3NhYmxlLFxuICBkaXNwb3NlKCk6IHZvaWRcbn1cblxuY2xhc3MgTGludGVyIHtcbiAgZ29jb25maWc6IEdvQ29uZmlnXG4gIGxpbnRlcjogKCkgPT4gTGludGVyRGVsZWdhdGVcbiAgYnVzeVNpZ25hbDogKCkgPT4gP0J1c3lTaWduYWxTZXJ2aWNlXG4gIGRpc3Bvc2VkOiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoXG4gICAgZ29jb25maWc6IEdvQ29uZmlnLFxuICAgIGxpbnRlcjogKCkgPT4gTGludGVyRGVsZWdhdGUsXG4gICAgYnVzeVNpZ25hbDogKCkgPT4gP0J1c3lTaWduYWxTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuZ29jb25maWcgPSBnb2NvbmZpZ1xuICAgIHRoaXMubGludGVyID0gbGludGVyXG4gICAgdGhpcy5idXN5U2lnbmFsID0gYnVzeVNpZ25hbFxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmRpc3Bvc2VkID0gdHJ1ZVxuICB9XG5cbiAgZGVsZXRlTWVzc2FnZXMoKSB7XG4gICAgY29uc3QgbGludGVyID0gdGhpcy5saW50ZXIoKVxuICAgIGlmIChsaW50ZXIpIHtcbiAgICAgIGxpbnRlci5jbGVhck1lc3NhZ2VzKClcbiAgICB9XG4gIH1cblxuICBzZXRNZXNzYWdlcyhtZXNzYWdlczogQXJyYXk8TGludGVyVjJNZXNzYWdlPikge1xuICAgIGNvbnN0IGxpbnRlciA9IHRoaXMubGludGVyKClcbiAgICBpZiAobGludGVyICYmIG1lc3NhZ2VzICYmIG1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgbGludGVyLnNldEFsbE1lc3NhZ2VzKG1lc3NhZ2VzKVxuICAgIH1cbiAgfVxuXG4gIGxpbnQoZWRpdG9yOiBUZXh0RWRpdG9yKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgYnMgPSB0aGlzLmJ1c3lTaWduYWwoKVxuICAgIGNvbnN0IGxpbnRQcm9taXNlID0gdGhpcy5kb0xpbnQoZWRpdG9yKVxuICAgIHJldHVybiBic1xuICAgICAgPyBicy5yZXBvcnRCdXN5V2hpbGUoJ0xpbnRpbmcgR28nLCAoKSA9PiBsaW50UHJvbWlzZSlcbiAgICAgIDogbGludFByb21pc2VcbiAgfVxuXG4gIGFzeW5jIGRvTGludChlZGl0b3I6IFRleHRFZGl0b3IpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIWlzVmFsaWRFZGl0b3IoZWRpdG9yKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyID0gZWRpdG9yLmdldEJ1ZmZlcigpXG4gICAgaWYgKCFidWZmZXIpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmRlbGV0ZU1lc3NhZ2VzKClcblxuICAgIGNvbnN0IHRvb2w6IHN0cmluZyA9IChhdG9tLmNvbmZpZy5nZXQoJ2dvLXBsdXMubGludC50b29sJyk6IGFueSlcbiAgICBjb25zdCBjbWQgPSBhd2FpdCB0aGlzLmdvY29uZmlnLmxvY2F0b3IuZmluZFRvb2wodG9vbClcbiAgICBpZiAoIWNtZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ29jb25maWcuZXhlY3V0b3IuZ2V0T3B0aW9ucygnZmlsZScsIGVkaXRvcilcblxuICAgIGxldCBjb25maWd1cmVkQXJnczogc3RyaW5nIHwgc3RyaW5nW10gPSAoYXRvbS5jb25maWcuZ2V0KFxuICAgICAgJ2dvLXBsdXMubGludC5hcmdzJ1xuICAgICk6IGFueSlcbiAgICBpZiAodHlwZW9mIGNvbmZpZ3VyZWRBcmdzID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlndXJlZEFyZ3MgPSBjb25maWd1cmVkQXJncyA/IGFyZ3BhcnNlcihjb25maWd1cmVkQXJncykgOiBbXVxuICAgIH1cblxuICAgIGxldCBhcmdzID0gVE9PTFNbdG9vbC50b0xvd2VyQ2FzZSgpXS5wcmVwYXJlQXJncyhjb25maWd1cmVkQXJncylcbiAgICBhcmdzID0gcmVwbGFjZVZhcmlhYmxlcyhhcmdzLCBlZGl0b3IuZ2V0UGF0aCgpLCBvcHRpb25zKVxuXG4gICAgY29uc3QgcjogRXhlY1Jlc3VsdCA9IGF3YWl0IHRoaXMuZ29jb25maWcuZXhlY3V0b3IuZXhlYyhjbWQsIGFyZ3MsIG9wdGlvbnMpXG4gICAgaWYgKCFyKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3Qgc3RkZXJyID0gci5zdGRlcnIgaW5zdGFuY2VvZiBCdWZmZXIgPyByLnN0ZGVyci50b1N0cmluZygpIDogci5zdGRlcnJcbiAgICBjb25zdCBzdGRvdXQgPSByLnN0ZG91dCBpbnN0YW5jZW9mIEJ1ZmZlciA/IHIuc3Rkb3V0LnRvU3RyaW5nKCkgOiByLnN0ZG91dFxuICAgIGlmIChzdGRlcnIgJiYgc3RkZXJyLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke3Rvb2x9LWxpbnRlcjogKHN0ZGVycikgYCArIHN0ZGVycikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICAgIGxldCBtZXNzYWdlczogQXJyYXk8TGludGVyVjJNZXNzYWdlPiA9IFtdXG4gICAgaWYgKHN0ZG91dCAmJiBzdGRvdXQudHJpbSgpICE9PSAnJykge1xuICAgICAgbWVzc2FnZXMgPSBUT09MU1t0b29sLnRvTG93ZXJDYXNlKCldLm1hcE1lc3NhZ2VzKFxuICAgICAgICBzdGRvdXQsXG4gICAgICAgIGVkaXRvcixcbiAgICAgICAgb3B0aW9ucy5jd2QgfHwgJydcbiAgICAgIClcblxuICAgICAgbWVzc2FnZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYS5sb2NhdGlvbi5maWxlID09PSBiLmxvY2F0aW9uLmZpbGUpIHtcbiAgICAgICAgICByZXR1cm4gYS5sb2NhdGlvbi5wb3NpdGlvbi5jb21wYXJlKGIubG9jYXRpb24ucG9zaXRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGEubG9jYXRpb24uZmlsZS5sb2NhbGVDb21wYXJlKGIubG9jYXRpb24uZmlsZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5zZXRNZXNzYWdlcyhtZXNzYWdlcylcbiAgfVxufVxuZXhwb3J0IHsgTGludGVyIH1cblxuY29uc3QgcmVnZXhWYXJpYWJsZSA9IC9cXCR7KC4qPyl9L2dcbmZ1bmN0aW9uIHJlcGxhY2VWYXJpYWJsZXMoXG4gIGFyZ3M6IHN0cmluZ1tdLFxuICBmaWxlOiA/c3RyaW5nLFxuICBvcHRpb25zOiBFeGVjdXRvck9wdGlvbnNcbik6IHN0cmluZ1tdIHtcbiAgY29uc3Qgd29ya3NwYWNlRmlsZSA9IGZpbGUgJiYgYXRvbS5wcm9qZWN0LnJlbGF0aXZpemVQYXRoKGZpbGUpXG4gIGNvbnN0IHZhcmlhYmxlcyA9IHtcbiAgICBlbnY6IChvcHRpb25zLmVudjogYW55KSxcbiAgICBjd2Q6IG9wdGlvbnMuY3dkLFxuICAgIGZpbGUsXG4gICAgZmlsZUJhc2VuYW1lOiBmaWxlICYmIHBhdGguYmFzZW5hbWUoZmlsZSksXG4gICAgZmlsZURpcm5hbWU6IGZpbGUgJiYgcGF0aC5kaXJuYW1lKGZpbGUpLFxuICAgIHJlbGF0aXZlRmlsZTogd29ya3NwYWNlRmlsZSAmJiB3b3Jrc3BhY2VGaWxlWzFdLFxuICAgIHdvcmtzcGFjZVJvb3Q6IHdvcmtzcGFjZUZpbGUgJiYgd29ya3NwYWNlRmlsZVswXVxuICB9XG4gIHJldHVybiBhcmdzLm1hcChhcmcgPT4ge1xuICAgIHJldHVybiBhcmcucmVwbGFjZShyZWdleFZhcmlhYmxlLCAoZ3JvdXAsIG5hbWUpID0+IHtcbiAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ2Vudi4nKSkge1xuICAgICAgICByZXR1cm4gdmFyaWFibGVzLmVudltuYW1lLnJlcGxhY2UoJ2Vudi4nLCAnJyldXG4gICAgICB9XG4gICAgICByZXR1cm4gdmFyaWFibGVzW25hbWVdXG4gICAgfSlcbiAgfSlcbn1cblxudHlwZSBUb29sID0ge1xuICBwcmVwYXJlQXJncyhjb25maWd1cmVkQXJnczogc3RyaW5nW10pOiBzdHJpbmdbXSxcbiAgbWFwTWVzc2FnZXMoXG4gICAgc3Rkb3V0OiBzdHJpbmcsXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLFxuICAgIGN3ZDogc3RyaW5nXG4gICk6IExpbnRlclYyTWVzc2FnZVtdXG59XG5cbmNvbnN0IFRPT0xTOiB7IFtzdHJpbmddOiBUb29sIH0gPSB7XG4gIGdvbWV0YWxpbnRlcjoge1xuICAgIHByZXBhcmVBcmdzKGNvbmZpZ3VyZWRBcmdzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgIGxldCBhcmdzID0gWy4uLmNvbmZpZ3VyZWRBcmdzXVxuICAgICAgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICBhcmdzID0gW1xuICAgICAgICAgICctLXZlbmRvcicsXG4gICAgICAgICAgJy0tZGlzYWJsZS1hbGwnLFxuICAgICAgICAgICctLWVuYWJsZT12ZXQnLFxuICAgICAgICAgICctLWVuYWJsZT12ZXRzaGFkb3cnLFxuICAgICAgICAgICctLWVuYWJsZT1nb2xpbnQnLFxuICAgICAgICAgICctLWVuYWJsZT1pbmVmZmFzc2lnbicsXG4gICAgICAgICAgJy0tZW5hYmxlPWdvY29uc3QnLFxuICAgICAgICAgICctLXRlc3RzJyxcbiAgICAgICAgICAnLS1qc29uJyxcbiAgICAgICAgICAnLidcbiAgICAgICAgXVxuICAgICAgfVxuICAgICAgaWYgKCFhcmdzLmluY2x1ZGVzKCctLWpzb24nKSkge1xuICAgICAgICBhcmdzLnVuc2hpZnQoJy0tanNvbicpXG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1xuICAgIH0sXG4gICAgbWFwTWVzc2FnZXMoXG4gICAgICBzdGRvdXQ6IHN0cmluZyxcbiAgICAgIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgICAgIGN3ZDogc3RyaW5nXG4gICAgKTogQXJyYXk8TGludGVyVjJNZXNzYWdlPiB7XG4gICAgICBsZXQgbWVzc2FnZXMgPSBbXVxuICAgICAgdHJ5IHtcbiAgICAgICAgbWVzc2FnZXMgPSBKU09OLnBhcnNlKHN0ZG91dClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICB9XG4gICAgICBpZiAoIW1lc3NhZ2VzIHx8IG1lc3NhZ2VzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdHM6IEFycmF5PExpbnRlclYyTWVzc2FnZT4gPSBbXVxuXG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgbGV0IHJhbmdlXG4gICAgICAgIGlmIChtZXNzYWdlLmNvbCAmJiBtZXNzYWdlLmNvbCA+PSAwKSB7XG4gICAgICAgICAgcmFuZ2UgPSBuZXcgUmFuZ2UoXG4gICAgICAgICAgICBbbWVzc2FnZS5saW5lIC0gMSwgbWVzc2FnZS5jb2wgLSAxXSxcbiAgICAgICAgICAgIFttZXNzYWdlLmxpbmUgLSAxLCAxMDAwXVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByYW5nZSA9IG5ldyBSYW5nZShbbWVzc2FnZS5saW5lIC0gMSwgMF0sIFttZXNzYWdlLmxpbmUgLSAxLCAxMDAwXSlcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgIGxpbnRlck5hbWU6IG1lc3NhZ2UubGludGVyLFxuICAgICAgICAgIHNldmVyaXR5OiBtZXNzYWdlLnNldmVyaXR5LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIGZpbGU6IHBhdGguam9pbihjd2QsIG1lc3NhZ2UucGF0aCksXG4gICAgICAgICAgICBwb3NpdGlvbjogcmFuZ2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4Y2VycHQ6IG1lc3NhZ2UubWVzc2FnZSArICcgKCcgKyBtZXNzYWdlLmxpbnRlciArICcpJ1xuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0c1xuICAgIH1cbiAgfSxcbiAgcmV2aXZlOiB7XG4gICAgcHJlcGFyZUFyZ3MoY29uZmlndXJlZEFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgbGV0IGFyZ3M6IHN0cmluZ1tdID0gWyctLWZvcm1hdHRlcj1qc29uJ11cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZ3VyZWRBcmdzKSAmJiBjb25maWd1cmVkQXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlndXJlZEFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBhcmc6IHN0cmluZyA9IChjb25maWd1cmVkQXJnc1tpXTogYW55KVxuICAgICAgICAgIGlmIChhcmcgPT09ICctZm9ybWF0dGVyJykge1xuICAgICAgICAgICAgaSsrIC8vIHNraXAgdGhpcyBhbmQgdGhlIGZvbGxvd2luZyB2YWx1ZVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFyZy5zdGFydHNXaXRoKCctLWZvcm1hdHRlcj0nKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgYXJncy5wdXNoKGFyZylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFyZ3NcbiAgICB9LFxuICAgIG1hcE1lc3NhZ2VzKFxuICAgICAgc3Rkb3V0OiBzdHJpbmcsXG4gICAgICBlZGl0b3I6IFRleHRFZGl0b3IsXG4gICAgICBjd2Q6IHN0cmluZ1xuICAgICk6IEFycmF5PExpbnRlclYyTWVzc2FnZT4ge1xuICAgICAgbGV0IG1lc3NhZ2VzID0gW11cbiAgICAgIHRyeSB7XG4gICAgICAgIG1lc3NhZ2VzID0gSlNPTi5wYXJzZShzdGRvdXQpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgfVxuXG4gICAgICBpZiAoIW1lc3NhZ2VzIHx8IG1lc3NhZ2VzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXNzYWdlcy5tYXAobSA9PiB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IFJhbmdlKFxuICAgICAgICAgIFttLlBvc2l0aW9uLlN0YXJ0LkxpbmUgLSAxLCBtLlBvc2l0aW9uLlN0YXJ0LkNvbHVtbiAtIDFdLFxuICAgICAgICAgIFttLlBvc2l0aW9uLkVuZC5MaW5lIC0gMSwgbS5Qb3NpdGlvbi5FbmQuQ29sdW1uIC0gMV1cbiAgICAgICAgKVxuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IExpbnRlclYyTWVzc2FnZSA9IHtcbiAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgZmlsZTogcGF0aC5qb2luKGN3ZCwgbS5Qb3NpdGlvbi5TdGFydC5GaWxlbmFtZSksXG4gICAgICAgICAgICBwb3NpdGlvblxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXJsOiBgaHR0cHM6Ly9yZXZpdmUucnVuL3IjJHttLlJ1bGVOYW1lfWAsXG4gICAgICAgICAgZXhjZXJwdDogYCR7bS5GYWlsdXJlfSAoJHttLlJ1bGVOYW1lfSlgLFxuICAgICAgICAgIHNldmVyaXR5OiBtLlNldmVyaXR5LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgbGludGVyTmFtZTogJ3Jldml2ZSdcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtLlJlcGxhY2VtZW50TGluZSkge1xuICAgICAgICAgIG1lc3NhZ2Uuc29sdXRpb25zID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogbmV3IFJhbmdlKFxuICAgICAgICAgICAgICAgIFtwb3NpdGlvbi5zdGFydC5yb3csIDBdLFxuICAgICAgICAgICAgICAgIFtwb3NpdGlvbi5zdGFydC5yb3csIDEwMDBdXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoOiBtLlJlcGxhY2VtZW50TGluZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgJ2dvbGFuZ2NpLWxpbnQnOiB7XG4gICAgcHJlcGFyZUFyZ3MoY29uZmlndXJlZEFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgY29uc3QgYXJnczogc3RyaW5nW10gPSBbJ3J1bicsICctLW91dC1mb3JtYXQ9anNvbiddXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWd1cmVkQXJncykgJiYgY29uZmlndXJlZEFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZ3VyZWRBcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgYXJnOiBzdHJpbmcgPSAoY29uZmlndXJlZEFyZ3NbaV06IGFueSlcbiAgICAgICAgICBpZiAoYXJnLnN0YXJ0c1dpdGgoJy0tb3V0LWZvcm1hdCcpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhcmdzLnB1c2goYXJnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1xuICAgIH0sXG4gICAgbWFwTWVzc2FnZXMoXG4gICAgICBzdGRvdXQ6IHN0cmluZyxcbiAgICAgIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgICAgIGN3ZDogc3RyaW5nXG4gICAgKTogQXJyYXk8TGludGVyVjJNZXNzYWdlPiB7XG4gICAgICBsZXQgcGFyc2VkXG4gICAgICB0cnkge1xuICAgICAgICBwYXJzZWQgPSBKU09OLnBhcnNlKHN0ZG91dClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzc3VlcyA9IChwYXJzZWQgJiYgcGFyc2VkLklzc3VlcykgfHwgW11cbiAgICAgIGlmIChpc3N1ZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzc3Vlcy5tYXAoaSA9PiB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IFJhbmdlKFxuICAgICAgICAgIFtpLlBvcy5MaW5lIC0gMSwgaS5Qb3MuQ29sdW1uIC0gMV0sXG4gICAgICAgICAgW2kuUG9zLkxpbmUgLSAxLCAxMDAwXVxuICAgICAgICApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIGZpbGU6IHBhdGguam9pbihjd2QsIGkuUG9zLkZpbGVuYW1lKSxcbiAgICAgICAgICAgIHBvc2l0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBleGNlcnB0OiBpLlRleHQsXG4gICAgICAgICAgc2V2ZXJpdHk6ICd3YXJuaW5nJyxcbiAgICAgICAgICBsaW50ZXJOYW1lOiBpLkZyb21MaW50ZXJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==