Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Builder = undefined;

var _tokenizeArgString = require('yargs-parser/lib/tokenize-arg-string');

var _tokenizeArgString2 = _interopRequireDefault(_tokenizeArgString);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _temp = require('@atom/temp');

var _temp2 = _interopRequireDefault(_temp);

var _atom = require('atom');

var _utils = require('./../utils');

var _environment = require('../config/environment');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Builder {

  constructor(goconfig, linter, output, busySignal) {
    this.goconfig = goconfig;
    this.linter = linter;
    this.output = output;
    this.subscriptions = new _atom.CompositeDisposable();
    this.busySignal = busySignal;

    _temp2.default.track();
  }

  dispose() {
    this.disposed = true;
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }
    try {
      _temp2.default.cleanupSync();
    } catch (err) {
      // eslint-disable-next-line no-console
      console.log('builder cleanup:', err);
    }
  }

  deleteMessages() {
    const linter = this.linter();
    if (linter) {
      linter.clearMessages();
    }
  }

  setMessages(messages) {
    const linter = this.linter();
    if (linter && messages && messages.length) {
      linter.setAllMessages(messages);
    }
  }

  async build(editor, path) {
    if (!atom.config.get('go-plus.config.compileOnSave')) {
      return;
    }
    if (!(0, _utils.isValidEditor)(editor)) {
      throw new Error('invalid editor');
    }
    this.deleteMessages();
    const options = this.goconfig.executor.getOptions('file', editor);
    const cmd = await this.goconfig.locator.findTool('go');
    if (!cmd) {
      throw new Error('cannot find go tool');
    }
    const buildPromise = this.lintInstall(cmd, options);
    const testPromise = this.hasTests(path) ? this.lintTest(cmd, options) : Promise.resolve({ output: '', linterName: 'test', exitcode: 0 });

    const all = Promise.all([buildPromise, testPromise]);
    const bs = this.busySignal();
    const p = bs ? bs.reportBusyWhile('Building Go', () => all) : all;
    const results = await p;
    if (!results || results.length === 0) {
      return;
    }
    this.setMessages(this.getMessages(results, options.cwd || ''));

    // check for any non-zero exit codes and error if found
    for (const result of results) {
      if (result.exitcode !== 0) {
        if (this.output) {
          if (result.exitcode === 124) {
            let timeoutMsg = `${result.linterName} timed out`;
            if (options.timeout) {
              timeoutMsg += ` after ${options.timeout} ms`;
            }
            this.output.update({
              exitcode: result.exitcode,
              output: timeoutMsg,
              dir: options.cwd
            });
          } else {
            this.output.update({
              exitcode: result.exitcode,
              output: result.output,
              dir: options.cwd
            });
          }
        }
        throw new Error(result.output);
      }
    }
    // indicate that we're done, which is especially important when test on save is disabled
    // (we don't want to give the appearance that we're compiling indefinitely)
    if (this.output) {
      this.output.update({
        output: this.output.props.output + '\n\nDone'
      });
    }
  }

  getMessages(results, cwd) {
    let messages = [];
    for (const _ref of results) {
      const { output, linterName } = _ref;

      const newMessages = this.mapMessages(output, cwd, linterName);
      for (const newMessage of newMessages) {
        if (!messages.some(message => this.messageEquals(newMessage, message))) {
          messages.push(newMessage);
        }
      }
    }

    // add the "(<name>)" postfix to each message
    for (const message of messages) {
      if (message.name) {
        message.excerpt += ' (' + message.name + ')';
      }
    }
    return messages;
  }

  messageEquals(m1, m2) {
    return m1.location.file === m2.location.file && m1.excerpt === m2.excerpt && m1.location.position.isEqual(m2.location.position);
  }

  buildCommand(gopath, cwd, sep = _path2.default.sep) {
    if (gopath.endsWith(sep)) {
      gopath = gopath.slice(0, -1);
    }
    const srcDir = gopath + sep + 'src';
    return srcDir.split(sep).every((t, i) => cwd.split(sep)[i] === t) ? 'install' // CWD is within gopath, `go install` to keep gocode up to date
    : 'build'; // CWD is outside gopath, `go build` will suffice
  }

  async lintInstall(cmd, options) {
    options.timeout = atom.config.get('go-plus.config.buildTimeout') || 10000;
    const command = this.buildCommand((0, _environment.getgopath)(), options.cwd || '');
    const buildArgs = [command];
    let outFile;
    if (command === 'build') {
      outFile = this.outFile();
      buildArgs.push('-o');
      buildArgs.push(outFile);
    }
    const additionalArgs = atom.config.get('go-plus.config.additionalBuildArgs');
    if (additionalArgs && additionalArgs.length) {
      const parsed = (0, _tokenizeArgString2.default)(additionalArgs);
      buildArgs.push(...parsed);
    }

    // Include the -i flag with go install.
    // See: https://github.com/mdempsky/gocode/issues/79
    if (command === 'install' && !buildArgs.includes('-i')) {
      buildArgs.push('-i');
    }

    buildArgs.push('.');
    this.output.update({
      output: 'Running go ' + buildArgs.join(' '),
      exitcode: 0
    });

    const r = await this.goconfig.executor.exec(cmd, buildArgs, options);
    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    if (stdout && stdout.trim() !== '') {
      console.log('go ' + command + ': (stdout) ' + stdout); // eslint-disable-line no-console
    }
    let stderr = (r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr).trim();

    // cleanup any temp files
    if (outFile && outFile !== '/dev/null' && r.exitcode === 0) {
      _fsExtra2.default.remove(outFile);
    }

    let exitcode = r.exitcode;
    if (stderr.indexOf('no non-test Go files in') >= 0) {
      // pkgs may only contain go test files (e.g. integration tests)
      // ignore this error because the test builder reports the errors then.
      stderr = '';
      exitcode = 0;
    }
    return { output: stderr, linterName: 'build', exitcode };
  }

  outFile() {
    if (process.platform === 'win32') {
      return _temp2.default.path({ prefix: 'go-plus-test' });
    }
    return '/dev/null';
  }

  testCompileArgs(outFile, additionalArgs = '') {
    const result = ['test'];
    // use additional build args even when we compile the tests
    if (additionalArgs && additionalArgs.length) {
      const parsed = (0, _tokenizeArgString2.default)(additionalArgs);
      for (let i = 0; i < parsed.length; i++) {
        if (parsed[i] === '-o') {
          // we'll take care of this one, skip over the -o flag
          i++;
          continue;
        } else if (parsed[i] === '-c') {
          continue;
        } else {
          result.push(parsed[i]);
        }
      }
    }
    result.push('-c', '-o', outFile, '.');
    return result;
  }

  async lintTest(cmd, options) {
    const outFile = this.outFile();
    const additionalArgs = atom.config.get('go-plus.config.additionalTestArgs');
    const testArgs = this.testCompileArgs(outFile, additionalArgs);

    this.output.update({
      output: 'Compiling tests:' + _os2.default.EOL + '$ go ' + testArgs.join(' '),
      exitcode: 0
    });
    const r = await this.goconfig.executor.exec(cmd, testArgs, options);
    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    const stderr = r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr;
    if (stdout && stdout.trim() !== '') {
      console.log('go test: (stdout) ' + stdout); // eslint-disable-line no-console
    }
    if (outFile && outFile !== '/dev/null' && r.exitcode === 0) {
      _fsExtra2.default.remove(outFile);
    }
    return { output: stderr.trim(), linterName: 'test', exitcode: r.exitcode };
  }

  mapMessages(data, cwd, linterName) {
    const pattern = /^((#)\s(.*)?)|((.*?):(\d*?):((\d*?):)?\s((.*)?((\n\t.*)+)?))/gim;
    const messages = [];
    let match;
    for (match = pattern.exec(data); match !== null; match = pattern.exec(data)) {
      const message = this.extractMessage(match, cwd, linterName);
      if (message) {
        messages.push(message);
      }
    }
    return messages;
  }

  extractMessage(line, cwd, linterName) {
    if (!line) {
      return;
    }
    if (line[2] && line[2] === '#') {
      // Found A Package Indicator, Skip For Now
      return;
    }
    let filePath = '';
    if (line[5] && line[5] !== '') {
      if (_path2.default.isAbsolute(line[5])) {
        filePath = line[5];
      } else {
        filePath = _path2.default.join(cwd, line[5]);
      }
    }
    const row = parseInt(line[6]);
    const column = parseInt(line[8]);
    const text = line[9];
    let range;
    if (column && column >= 0) {
      range = new _atom.Range([row - 1, column - 1], [row - 1, 1000]);
    } else {
      range = new _atom.Range([row - 1, 0], [row - 1, 1000]);
    }
    return {
      name: linterName,
      severity: 'error',
      location: { file: filePath, position: range },
      excerpt: text
    };
  }

  hasTests(p) {
    if (p.endsWith('_test.go')) {
      return true;
    }
    const files = _fsExtra2.default.readdirSync(_path2.default.dirname(p));
    return files.some(f => f.endsWith('_test.go'));
  }
}

exports.Builder = Builder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,