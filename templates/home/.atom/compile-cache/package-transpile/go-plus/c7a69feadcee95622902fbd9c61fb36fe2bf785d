Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isVendorSupported = isVendorSupported;
exports.allPackages = allPackages;


let vendorSupported;

async function isVendorSupported(goconfig) {
  if (vendorSupported != null) {
    return vendorSupported;
  }
  const runtime = await goconfig.locator.runtime();
  if (!runtime || !runtime.semver) {
    return goconfig.environment()['GO15VENDOREXPERIMENT'] !== '0';
  }
  const [major, minor] = runtime.semver.split('.').map(v => parseInt(v, 10));

  switch (major) {
    case 0:
      vendorSupported = false;
      break;
    case 1:
      vendorSupported = minor > 6 || (minor === 5 || minor === 6) && goconfig.environment()['GO15VENDOREXPERIMENT'] !== '0';
      break;
    default:
      vendorSupported = true;
      break;
  }
  return vendorSupported;
}

const populatePackages = async (pkgs, goconfig) => {
  const gopkgs = await goconfig.locator.findTool('gopkgs');
  if (!gopkgs) return;

  const options = goconfig.executor.getOptions('project');
  const r = await goconfig.executor.exec(gopkgs, [], options);
  const stderr = r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr;
  if (r.exitcode !== 0) {
    // eslint-disable-next-line no-console
    console.log('go-plus: "gopkgs" returned the following errors:', stderr.trim() || `exitcode ${r.exitcode}`);
  }
  const data = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
  if (!data || !data.trim()) {
    return;
  }
  if (!pkgs) {
    return;
  }

  data.trim().split('\n').forEach(path => {
    if (!pkgs) {
      return;
    }
    const name = path.trim().split('/').pop();
    const p = pkgs.get(name) || [];
    pkgs.set(name, p.concat(path.trim()));
  });

  pkgs.forEach(p => {
    p.sort();
  });
};

// TODO: make this work for modules
let pkgs;
function allPackages(goconfig) {
  if (pkgs) {
    return pkgs;
  }
  pkgs = new Map();
  populatePackages(pkgs, goconfig);
  return pkgs;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvLmpzIl0sIm5hbWVzIjpbImlzVmVuZG9yU3VwcG9ydGVkIiwiYWxsUGFja2FnZXMiLCJ2ZW5kb3JTdXBwb3J0ZWQiLCJnb2NvbmZpZyIsInJ1bnRpbWUiLCJsb2NhdG9yIiwic2VtdmVyIiwiZW52aXJvbm1lbnQiLCJtYWpvciIsIm1pbm9yIiwic3BsaXQiLCJtYXAiLCJ2IiwicGFyc2VJbnQiLCJwb3B1bGF0ZVBhY2thZ2VzIiwicGtncyIsImdvcGtncyIsImZpbmRUb29sIiwib3B0aW9ucyIsImV4ZWN1dG9yIiwiZ2V0T3B0aW9ucyIsInIiLCJleGVjIiwic3RkZXJyIiwiQnVmZmVyIiwidG9TdHJpbmciLCJleGl0Y29kZSIsImNvbnNvbGUiLCJsb2ciLCJ0cmltIiwiZGF0YSIsInN0ZG91dCIsImZvckVhY2giLCJwYXRoIiwibmFtZSIsInBvcCIsInAiLCJnZXQiLCJzZXQiLCJjb25jYXQiLCJzb3J0IiwiTWFwIl0sIm1hcHBpbmdzIjoiOzs7UUFLc0JBLGlCLEdBQUFBLGlCO1FBMEVOQyxXLEdBQUFBLFc7OztBQTNFaEIsSUFBSUMsZUFBSjs7QUFDTyxlQUFlRixpQkFBZixDQUFpQ0csUUFBakMsRUFBdUU7QUFDNUUsTUFBSUQsbUJBQW1CLElBQXZCLEVBQTZCO0FBQzNCLFdBQU9BLGVBQVA7QUFDRDtBQUNELFFBQU1FLFVBQVUsTUFBTUQsU0FBU0UsT0FBVCxDQUFpQkQsT0FBakIsRUFBdEI7QUFDQSxNQUFJLENBQUNBLE9BQUQsSUFBWSxDQUFDQSxRQUFRRSxNQUF6QixFQUFpQztBQUMvQixXQUFPSCxTQUFTSSxXQUFULEdBQXVCLHNCQUF2QixNQUFtRCxHQUExRDtBQUNEO0FBQ0QsUUFBTSxDQUFDQyxLQUFELEVBQVFDLEtBQVIsSUFBaUJMLFFBQVFFLE1BQVIsQ0FBZUksS0FBZixDQUFxQixHQUFyQixFQUEwQkMsR0FBMUIsQ0FBOEJDLEtBQUtDLFNBQVNELENBQVQsRUFBWSxFQUFaLENBQW5DLENBQXZCOztBQUVBLFVBQVFKLEtBQVI7QUFDRSxTQUFLLENBQUw7QUFDRU4sd0JBQWtCLEtBQWxCO0FBQ0E7QUFDRixTQUFLLENBQUw7QUFDRUEsd0JBQ0VPLFFBQVEsQ0FBUixJQUNDLENBQUNBLFVBQVUsQ0FBVixJQUFlQSxVQUFVLENBQTFCLEtBQ0NOLFNBQVNJLFdBQVQsR0FBdUIsc0JBQXZCLE1BQW1ELEdBSHZEO0FBSUE7QUFDRjtBQUNFTCx3QkFBa0IsSUFBbEI7QUFDQTtBQVpKO0FBY0EsU0FBT0EsZUFBUDtBQUNEOztBQUVELE1BQU1ZLG1CQUFtQixPQUN2QkMsSUFEdUIsRUFFdkJaLFFBRnVCLEtBR3BCO0FBQ0gsUUFBTWEsU0FBUyxNQUFNYixTQUFTRSxPQUFULENBQWlCWSxRQUFqQixDQUEwQixRQUExQixDQUFyQjtBQUNBLE1BQUksQ0FBQ0QsTUFBTCxFQUFhOztBQUViLFFBQU1FLFVBQVVmLFNBQVNnQixRQUFULENBQWtCQyxVQUFsQixDQUE2QixTQUE3QixDQUFoQjtBQUNBLFFBQU1DLElBQUksTUFBTWxCLFNBQVNnQixRQUFULENBQWtCRyxJQUFsQixDQUF1Qk4sTUFBdkIsRUFBK0IsRUFBL0IsRUFBbUNFLE9BQW5DLENBQWhCO0FBQ0EsUUFBTUssU0FBU0YsRUFBRUUsTUFBRixZQUFvQkMsTUFBcEIsR0FBNkJILEVBQUVFLE1BQUYsQ0FBU0UsUUFBVCxFQUE3QixHQUFtREosRUFBRUUsTUFBcEU7QUFDQSxNQUFJRixFQUFFSyxRQUFGLEtBQWUsQ0FBbkIsRUFBc0I7QUFDcEI7QUFDQUMsWUFBUUMsR0FBUixDQUNFLGtEQURGLEVBRUVMLE9BQU9NLElBQVAsTUFBa0IsWUFBV1IsRUFBRUssUUFBUyxFQUYxQztBQUlEO0FBQ0QsUUFBTUksT0FBT1QsRUFBRVUsTUFBRixZQUFvQlAsTUFBcEIsR0FBNkJILEVBQUVVLE1BQUYsQ0FBU04sUUFBVCxFQUE3QixHQUFtREosRUFBRVUsTUFBbEU7QUFDQSxNQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxLQUFLRCxJQUFMLEVBQWQsRUFBMkI7QUFDekI7QUFDRDtBQUNELE1BQUksQ0FBQ2QsSUFBTCxFQUFXO0FBQ1Q7QUFDRDs7QUFFRGUsT0FDR0QsSUFESCxHQUVHbkIsS0FGSCxDQUVTLElBRlQsRUFHR3NCLE9BSEgsQ0FHV0MsUUFBUTtBQUNmLFFBQUksQ0FBQ2xCLElBQUwsRUFBVztBQUNUO0FBQ0Q7QUFDRCxVQUFNbUIsT0FBT0QsS0FDVkosSUFEVSxHQUVWbkIsS0FGVSxDQUVKLEdBRkksRUFHVnlCLEdBSFUsRUFBYjtBQUlBLFVBQU1DLElBQUlyQixLQUFLc0IsR0FBTCxDQUFTSCxJQUFULEtBQWtCLEVBQTVCO0FBQ0FuQixTQUFLdUIsR0FBTCxDQUFTSixJQUFULEVBQWVFLEVBQUVHLE1BQUYsQ0FBU04sS0FBS0osSUFBTCxFQUFULENBQWY7QUFDRCxHQWJIOztBQWVBZCxPQUFLaUIsT0FBTCxDQUFhSSxLQUFLO0FBQ2hCQSxNQUFFSSxJQUFGO0FBQ0QsR0FGRDtBQUdELENBM0NEOztBQTZDQTtBQUNBLElBQUl6QixJQUFKO0FBQ08sU0FBU2QsV0FBVCxDQUFxQkUsUUFBckIsRUFBZ0U7QUFDckUsTUFBSVksSUFBSixFQUFVO0FBQ1IsV0FBT0EsSUFBUDtBQUNEO0FBQ0RBLFNBQU8sSUFBSTBCLEdBQUosRUFBUDtBQUNBM0IsbUJBQWlCQyxJQUFqQixFQUF1QlosUUFBdkI7QUFDQSxTQUFPWSxJQUFQO0FBQ0QiLCJmaWxlIjoiZ28uanMiLCJzb3VyY2VSb290IjoiL2hvbWUvbXl1Z2EvLmF0b20vcGFja2FnZXMvZ28tcGx1cy9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IEdvQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvc2VydmljZSdcblxubGV0IHZlbmRvclN1cHBvcnRlZDogP2Jvb2xlYW5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc1ZlbmRvclN1cHBvcnRlZChnb2NvbmZpZzogR29Db25maWcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgaWYgKHZlbmRvclN1cHBvcnRlZCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZlbmRvclN1cHBvcnRlZFxuICB9XG4gIGNvbnN0IHJ1bnRpbWUgPSBhd2FpdCBnb2NvbmZpZy5sb2NhdG9yLnJ1bnRpbWUoKVxuICBpZiAoIXJ1bnRpbWUgfHwgIXJ1bnRpbWUuc2VtdmVyKSB7XG4gICAgcmV0dXJuIGdvY29uZmlnLmVudmlyb25tZW50KClbJ0dPMTVWRU5ET1JFWFBFUklNRU5UJ10gIT09ICcwJ1xuICB9XG4gIGNvbnN0IFttYWpvciwgbWlub3JdID0gcnVudGltZS5zZW12ZXIuc3BsaXQoJy4nKS5tYXAodiA9PiBwYXJzZUludCh2LCAxMCkpXG5cbiAgc3dpdGNoIChtYWpvcikge1xuICAgIGNhc2UgMDpcbiAgICAgIHZlbmRvclN1cHBvcnRlZCA9IGZhbHNlXG4gICAgICBicmVha1xuICAgIGNhc2UgMTpcbiAgICAgIHZlbmRvclN1cHBvcnRlZCA9XG4gICAgICAgIG1pbm9yID4gNiB8fFxuICAgICAgICAoKG1pbm9yID09PSA1IHx8IG1pbm9yID09PSA2KSAmJlxuICAgICAgICAgIGdvY29uZmlnLmVudmlyb25tZW50KClbJ0dPMTVWRU5ET1JFWFBFUklNRU5UJ10gIT09ICcwJylcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHZlbmRvclN1cHBvcnRlZCA9IHRydWVcbiAgICAgIGJyZWFrXG4gIH1cbiAgcmV0dXJuIHZlbmRvclN1cHBvcnRlZFxufVxuXG5jb25zdCBwb3B1bGF0ZVBhY2thZ2VzID0gYXN5bmMgKFxuICBwa2dzOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT4sXG4gIGdvY29uZmlnOiBHb0NvbmZpZ1xuKSA9PiB7XG4gIGNvbnN0IGdvcGtncyA9IGF3YWl0IGdvY29uZmlnLmxvY2F0b3IuZmluZFRvb2woJ2dvcGtncycpXG4gIGlmICghZ29wa2dzKSByZXR1cm5cblxuICBjb25zdCBvcHRpb25zID0gZ29jb25maWcuZXhlY3V0b3IuZ2V0T3B0aW9ucygncHJvamVjdCcpXG4gIGNvbnN0IHIgPSBhd2FpdCBnb2NvbmZpZy5leGVjdXRvci5leGVjKGdvcGtncywgW10sIG9wdGlvbnMpXG4gIGNvbnN0IHN0ZGVyciA9IHIuc3RkZXJyIGluc3RhbmNlb2YgQnVmZmVyID8gci5zdGRlcnIudG9TdHJpbmcoKSA6IHIuc3RkZXJyXG4gIGlmIChyLmV4aXRjb2RlICE9PSAwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdnby1wbHVzOiBcImdvcGtnc1wiIHJldHVybmVkIHRoZSBmb2xsb3dpbmcgZXJyb3JzOicsXG4gICAgICBzdGRlcnIudHJpbSgpIHx8IGBleGl0Y29kZSAke3IuZXhpdGNvZGV9YFxuICAgIClcbiAgfVxuICBjb25zdCBkYXRhID0gci5zdGRvdXQgaW5zdGFuY2VvZiBCdWZmZXIgPyByLnN0ZG91dC50b1N0cmluZygpIDogci5zdGRvdXRcbiAgaWYgKCFkYXRhIHx8ICFkYXRhLnRyaW0oKSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICghcGtncykge1xuICAgIHJldHVyblxuICB9XG5cbiAgZGF0YVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLmZvckVhY2gocGF0aCA9PiB7XG4gICAgICBpZiAoIXBrZ3MpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBuYW1lID0gcGF0aFxuICAgICAgICAudHJpbSgpXG4gICAgICAgIC5zcGxpdCgnLycpXG4gICAgICAgIC5wb3AoKVxuICAgICAgY29uc3QgcCA9IHBrZ3MuZ2V0KG5hbWUpIHx8IFtdXG4gICAgICBwa2dzLnNldChuYW1lLCBwLmNvbmNhdChwYXRoLnRyaW0oKSkpXG4gICAgfSlcblxuICBwa2dzLmZvckVhY2gocCA9PiB7XG4gICAgcC5zb3J0KClcbiAgfSlcbn1cblxuLy8gVE9ETzogbWFrZSB0aGlzIHdvcmsgZm9yIG1vZHVsZXNcbmxldCBwa2dzOiA/TWFwPHN0cmluZywgc3RyaW5nW10+XG5leHBvcnQgZnVuY3Rpb24gYWxsUGFja2FnZXMoZ29jb25maWc6IEdvQ29uZmlnKTogTWFwPHN0cmluZywgc3RyaW5nW10+IHtcbiAgaWYgKHBrZ3MpIHtcbiAgICByZXR1cm4gcGtnc1xuICB9XG4gIHBrZ3MgPSBuZXcgTWFwKClcbiAgcG9wdWxhdGVQYWNrYWdlcyhwa2dzLCBnb2NvbmZpZylcbiAgcmV0dXJuIHBrZ3Ncbn1cbiJdfQ==