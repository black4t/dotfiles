Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Formatter = undefined;

var _atom = require('atom');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Formatter {
  // 'gofmt' 'goimports', 'goreturns'
  constructor(goconfig) {
    this.priority = 2;
    this.grammarScopes = ['source.go', 'go'];

    this.goconfig = goconfig;
    this.subscriptions = new _atom.CompositeDisposable();
    this.updatingFormatterCache = false;
    atom.project.onDidChangePaths(() => this.updateFormatterCache());
    this.observeConfig();
    this.updateFormatterCache();
  }

  dispose() {
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }
    if (this.formatterCache) {
      this.formatterCache.clear();
    }
  }

  async formatEntireFile(editor, range // eslint-disable-line no-unused-vars
  ) {
    const tool = this.tool;
    let cmd = this.cachedToolPath(tool);
    if (!cmd) {
      await this.updateFormatterCache();
      cmd = this.cachedToolPath(tool);
    }
    if (!cmd) {
      console.log('skipping format, could not find tool', tool); // eslint-disable-line no-console
      return null;
    }
    const options = this.goconfig.executor.getOptions('project', editor);
    options.input = editor.getText();
    const args = [];
    if (tool === 'goimports') {
      const p = editor.getPath();
      if (p) {
        args.push('--srcdir');
        args.push(_path2.default.dirname(p));
      }
    }
    const r = await this.goconfig.executor.exec(cmd, args, options);
    if (r.exitcode !== 0) return null;
    const out = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    return { formatted: out };
  }

  observeConfig() {
    this.subscriptions.add(atom.config.observe('go-plus.format.tool', formatTool => {
      this.tool = formatTool;
      this.updateFormatterCache();
    }));
  }

  resetFormatterCache() {
    this.formatterCache.clear();
  }

  async updateFormatterCache() {
    if (this.updatingFormatterCache) {
      return Promise.resolve(false);
    }
    this.updatingFormatterCache = true;

    if (!this.goconfig) {
      this.updatingFormatterCache = false;
      return Promise.resolve(false);
    }

    const cache = new Map();
    const paths = atom.project.getPaths();
    const promises = [];
    for (const p of paths) {
      if (p && p.includes('://')) {
        continue;
      }
      for (const tool of ['gofmt', 'goimports', 'goreturns']) {
        let key = tool + ':' + p;
        if (!p) {
          key = tool;
        }

        promises.push(this.goconfig.locator.findTool(tool).then(cmd => {
          if (cmd) {
            cache.set(key, cmd);
            return cmd;
          }
          return false;
        }));
      }
    }

    try {
      await Promise.all(promises);
      this.formatterCache = cache;
      this.updatingFormatterCache = false;
      return this.formatterCache;
    } catch (e) {
      if (e.handle) {
        e.handle();
      }
      console.log(e); // eslint-disable-line no-console
      this.updatingFormatterCache = false;
    }
  }

  cachedToolPath(toolName) {
    if (!this.formatterCache || !toolName) {
      return false;
    }

    const p = (0, _utils.projectPath)();
    if (p) {
      const key = toolName + ':' + p;
      const cmd = this.formatterCache.get(key);
      if (cmd) {
        return cmd;
      }
    }

    return this.formatterCache.get(toolName) || false;
  }
}

exports.Formatter = Formatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,