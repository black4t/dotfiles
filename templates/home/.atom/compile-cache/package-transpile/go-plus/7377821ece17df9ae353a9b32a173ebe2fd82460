Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImplementsView = undefined;

var _atom = require('atom');

var _etch = require('etch');

var _etch2 = _interopRequireDefault(_etch);

var _etchComponent = require('./../etch-component');

var _utils = require('./../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @jsx etch.dom */
/* eslint-disable react/no-unknown-property */
/* eslint-disable react/jsx-key */

const defaultMessage = 'To find interface implementations, select a type name and run the `golang:implements` command via the command palette.';

class ImplementsView extends _etchComponent.EtchComponent {

  constructor(props) {
    super(props);
    if (props.model) {
      props.model.view = this;
    }
  }

  openFile(gopos) {
    const pos = (0, _utils.parseGoPosition)(gopos);
    if (!pos) {
      return;
    }

    const { file, line = 1, column = 1 } = pos;
    (0, _utils.openFile)(file, _atom.Point.fromObject([line - 1, column - 1])).catch(err => {
      console.log('could not access ' + file, err); // eslint-disable-line no-console
    });
  }

  update(props) {
    this.props = props;
    return _etch2.default.update(this);
  }

  structuredContent(obj) {
    // obj.type: the query input
    // obj.to: present for implementations of a queried interface
    // obj.from: present for interfaces implemented by the queried type
    // obj.fromptr: present for interfaces implemented by pointers to the queried type
    return _etch2.default.dom(
      'div',
      { style: 'width: 100%;' },
      obj.to && obj.to.length ? this.to(obj) : null,
      obj.from && obj.from.length ? this.from(obj) : null,
      obj.fromptr && obj.fromptr.length ? this.fromptr(obj) : null
    );
  }

  to(obj) {
    return _etch2.default.dom(
      'details',
      { className: 'go-plus-accordion-item', open: true },
      this.header(obj, 'is implemented by'),
      obj.to ? this.items(obj.to) : undefined
    );
  }

  from(obj) {
    return _etch2.default.dom(
      'details',
      { className: 'go-plus-accordion-item', open: true },
      this.header(obj, 'implements'),
      obj.from ? this.items(obj.from) : undefined
    );
  }

  fromptr(obj) {
    return _etch2.default.dom(
      'details',
      { className: 'go-plus-accordion-item', open: true },
      this.header(obj, 'implements (by pointer)'),
      obj.fromptr ? this.items(obj.fromptr) : undefined
    );
  }

  header(obj, subtitle) {
    return _etch2.default.dom(
      'summary',
      { className: 'go-plus-accordion-header' },
      _etch2.default.dom(
        'span',
        { className: 'text-subtle' },
        obj.type.kind + ' type '
      ),
      _etch2.default.dom(
        'span',
        { onclick: () => this.openFile(obj.type.pos) },
        obj.type.name
      ),
      _etch2.default.dom(
        'span',
        { className: 'text-subtle' },
        ' ' + subtitle
      )
    );
  }

  items(arr) {
    return _etch2.default.dom(
      'main',
      { className: 'go-plus-accordian-content' },
      _etch2.default.dom(
        'table',
        { className: 'go-plus-table' },
        arr.map(item => {
          return _etch2.default.dom(
            'tr',
            {
              onclick: this.openFile.bind(this, item.pos),
              className: 'go-plus-table-row'
            },
            _etch2.default.dom(
              'td',
              { className: 'go-plus-table-cell go-plus-left-pad' },
              item.name,
              _etch2.default.dom(
                'span',
                { className: 'text-subtle' },
                ' at ' + item.pos
              )
            )
          );
        })
      )
    );
  }

  render() {
    if (typeof this.props === 'string') {
      return _etch2.default.dom(
        'div',
        { className: 'padded-content' },
        this.props
      );
    }
    if (!this.props.type) {
      return _etch2.default.dom(
        'div',
        { className: 'padded-content' },
        defaultMessage
      );
    }
    return this.structuredContent(this.props);
  }
}

exports.ImplementsView = ImplementsView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudHMtdmlldy5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0TWVzc2FnZSIsIkltcGxlbWVudHNWaWV3IiwiRXRjaENvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJtb2RlbCIsInZpZXciLCJvcGVuRmlsZSIsImdvcG9zIiwicG9zIiwiZmlsZSIsImxpbmUiLCJjb2x1bW4iLCJQb2ludCIsImZyb21PYmplY3QiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGUiLCJldGNoIiwic3RydWN0dXJlZENvbnRlbnQiLCJvYmoiLCJ0byIsImxlbmd0aCIsImZyb20iLCJmcm9tcHRyIiwiaGVhZGVyIiwiaXRlbXMiLCJ1bmRlZmluZWQiLCJzdWJ0aXRsZSIsInR5cGUiLCJraW5kIiwibmFtZSIsImFyciIsIm1hcCIsIml0ZW0iLCJiaW5kIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFQQTtBQUNBO0FBQ0E7O0FBVUEsTUFBTUEsaUJBQ0osd0hBREY7O0FBZ0JBLE1BQU1DLGNBQU4sU0FBNkJDLDRCQUE3QixDQUEyQzs7QUFHekNDLGNBQVlDLEtBQVosRUFBMkM7QUFDekMsVUFBTUEsS0FBTjtBQUNBLFFBQUlBLE1BQU1DLEtBQVYsRUFBaUI7QUFDZkQsWUFBTUMsS0FBTixDQUFZQyxJQUFaLEdBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFREMsV0FBU0MsS0FBVCxFQUF3QjtBQUN0QixVQUFNQyxNQUFhLDRCQUFnQkQsS0FBaEIsQ0FBbkI7QUFDQSxRQUFJLENBQUNDLEdBQUwsRUFBVTtBQUNSO0FBQ0Q7O0FBRUQsVUFBTSxFQUFFQyxJQUFGLEVBQVFDLE9BQU8sQ0FBZixFQUFrQkMsU0FBUyxDQUEzQixLQUFpQ0gsR0FBdkM7QUFDQSx5QkFBU0MsSUFBVCxFQUFlRyxZQUFNQyxVQUFOLENBQWlCLENBQUNILE9BQU8sQ0FBUixFQUFXQyxTQUFTLENBQXBCLENBQWpCLENB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QjtBQUErQix5QkFBU0csS0FBSzNCO0FBQTdDO0FBRkY7QUFKRixXQURGO0FBV0QsU0FaQTtBQURIO0FBREYsS0FERjtBQW1CRDs7QUFFRDZCLFdBQVM7QUFDUCxRQUFJLE9BQU8sS0FBS2xDLEtBQVosS0FBc0IsUUFBMUIsRUFBb0M7QUFDbEMsYUFBTztBQUFBO0FBQUEsVUFBSyxXQUFVLGdCQUFmO0FBQWlDLGFBQUtBO0FBQXRDLE9BQVA7QUFDRDtBQUNELFFBQUksQ0FBQyxLQUFLQSxLQUFMLENBQVcyQixJQUFoQixFQUFzQjtBQUNwQixhQUFPO0FBQUE7QUFBQSxVQUFLLFdBQVUsZ0JBQWY7QUFBaUMvQjtBQUFqQyxPQUFQO0FBQ0Q7QUFDRCxXQUFPLEtBQUtxQixpQkFBTCxDQUF1QixLQUFLakIsS0FBNUIsQ0FBUDtBQUNEO0FBNUd3Qzs7UUErR2xDSCxjLEdBQUFBLGMiLCJmaWxlIjoiaW1wbGVtZW50cy12aWV3LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLXBsdXMvbGliL2ltcGxlbWVudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuLyoqIEBqc3ggZXRjaC5kb20gKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXVua25vd24tcHJvcGVydHkgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2pzeC1rZXkgKi9cblxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IGV0Y2ggZnJvbSAnZXRjaCdcbmltcG9ydCB7IEV0Y2hDb21wb25lbnQgfSBmcm9tICcuLy4uL2V0Y2gtY29tcG9uZW50J1xuaW1wb3J0IHsgcGFyc2VHb1Bvc2l0aW9uLCBvcGVuRmlsZSB9IGZyb20gJy4vLi4vdXRpbHMnXG5cbmltcG9ydCB0eXBlIHsgSW1wbGVtZW50cyB9IGZyb20gJy4vaW1wbGVtZW50cydcbmltcG9ydCB0eXBlIHsgR29Qb3MgfSBmcm9tICcuLy4uL3V0aWxzJ1xuXG5jb25zdCBkZWZhdWx0TWVzc2FnZSA9XG4gICdUbyBmaW5kIGludGVyZmFjZSBpbXBsZW1lbnRhdGlvbnMsIHNlbGVjdCBhIHR5cGUgbmFtZSBhbmQgcnVuIHRoZSBgZ29sYW5nOmltcGxlbWVudHNgIGNvbW1hbmQgdmlhIHRoZSBjb21tYW5kIHBhbGV0dGUuJ1xuXG50eXBlIEltcGxlbWVudHNUeXBlID0ge1xuICBuYW1lOiBzdHJpbmcsXG4gIHBvczogc3RyaW5nLFxuICBraW5kOiBzdHJpbmdcbn1cblxudHlwZSBHdXJ1SW1wbGVtZW50c1Jlc3VsdCA9IHtcbiAgdHlwZTogSW1wbGVtZW50c1R5cGUsXG4gIHRvPzogQXJyYXk8SW1wbGVtZW50c1R5cGU+LFxuICBmcm9tPzogQXJyYXk8SW1wbGVtZW50c1R5cGU+LFxuICBmcm9tcHRyPzogQXJyYXk8SW1wbGVtZW50c1R5cGU+XG59XG5cbmNsYXNzIEltcGxlbWVudHNWaWV3IGV4dGVuZHMgRXRjaENvbXBvbmVudCB7XG4gIHByb3BzOiBzdHJpbmcgfCBHdXJ1SW1wbGVtZW50c1Jlc3VsdFxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiB7IG1vZGVsPzogSW1wbGVtZW50cyB9KSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgaWYgKHByb3BzLm1vZGVsKSB7XG4gICAgICBwcm9wcy5tb2RlbC52aWV3ID0gdGhpc1xuICAgIH1cbiAgfVxuXG4gIG9wZW5GaWxlKGdvcG9zOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwb3M6IEdvUG9zID0gcGFyc2VHb1Bvc2l0aW9uKGdvcG9zKVxuICAgIGlmICghcG9zKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7IGZpbGUsIGxpbmUgPSAxLCBjb2x1bW4gPSAxIH0gPSBwb3NcbiAgICBvcGVuRmlsZShmaWxlLCBQb2ludC5mcm9tT2JqZWN0KFtsaW5lIC0gMSwgY29sdW1uIC0gMV0pKS5jYXRjaChlcnIgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2NvdWxkIG5vdCBhY2Nlc3MgJyArIGZpbGUsIGVycikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfSlcbiAgfVxuXG4gIHVwZGF0ZShwcm9wczogYW55KSB7XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gICAgcmV0dXJuIGV0Y2gudXBkYXRlKHRoaXMpXG4gIH1cblxuICBzdHJ1Y3R1cmVkQ29udGVudChvYmo6IEd1cnVJbXBsZW1lbnRzUmVzdWx0KSB7XG4gICAgLy8gb2JqLnR5cGU6IHRoZSBxdWVyeSBpbnB1dFxuICAgIC8vIG9iai50bzogcHJlc2VudCBmb3IgaW1wbGVtZW50YXRpb25zIG9mIGEgcXVlcmllZCBpbnRlcmZhY2VcbiAgICAvLyBvYmouZnJvbTogcHJlc2VudCBmb3IgaW50ZXJmYWNlcyBpbXBsZW1lbnRlZCBieSB0aGUgcXVlcmllZCB0eXBlXG4gICAgLy8gb2JqLmZyb21wdHI6IHByZXNlbnQgZm9yIGludGVyZmFjZXMgaW1wbGVtZW50ZWQgYnkgcG9pbnRlcnMgdG8gdGhlIHF1ZXJpZWQgdHlwZVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXsnd2lkdGg6IDEwMCU7J30+XG4gICAgICAgIHtvYmoudG8gJiYgb2JqLnRvLmxlbmd0aCA/IHRoaXMudG8ob2JqKSA6IG51bGx9XG4gICAgICAgIHtvYmouZnJvbSAmJiBvYmouZnJvbS5sZW5ndGggPyB0aGlzLmZyb20ob2JqKSA6IG51bGx9XG4gICAgICAgIHtvYmouZnJvbXB0ciAmJiBvYmouZnJvbXB0ci5sZW5ndGggPyB0aGlzLmZyb21wdHIob2JqKSA6IG51bGx9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICB0byhvYmo6IEd1cnVJbXBsZW1lbnRzUmVzdWx0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkZXRhaWxzIGNsYXNzTmFtZT1cImdvLXBsdXMtYWNjb3JkaW9uLWl0ZW1cIiBvcGVuPlxuICAgICAgICB7dGhpcy5oZWFkZXIob2JqLCAnaXMgaW1wbGVtZW50ZWQgYnknKX1cbiAgICAgICAge29iai50byA/IHRoaXMuaXRlbXMob2JqLnRvKSA6IHVuZGVmaW5lZH1cbiAgICAgIDwvZGV0YWlscz5cbiAgICApXG4gIH1cblxuICBmcm9tKG9iajogR3VydUltcGxlbWVudHNSZXN1bHQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRldGFpbHMgY2xhc3NOYW1lPVwiZ28tcGx1cy1hY2NvcmRpb24taXRlbVwiIG9wZW4+XG4gICAgICAgIHt0aGlzLmhlYWRlcihvYmosICdpbXBsZW1lbnRzJyl9XG4gICAgICAgIHtvYmouZnJvbSA/IHRoaXMuaXRlbXMob2JqLmZyb20pIDogdW5kZWZpbmVkfVxuICAgICAgPC9kZXRhaWxzPlxuICAgIClcbiAgfVxuXG4gIGZyb21wdHIob2JqOiBHdXJ1SW1wbGVtZW50c1Jlc3VsdCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGV0YWlscyBjbGFzc05hbWU9XCJnby1wbHVzLWFjY29yZGlvbi1pdGVtXCIgb3Blbj5cbiAgICAgICAge3RoaXMuaGVhZGVyKG9iaiwgJ2ltcGxlbWVudHMgKGJ5IHBvaW50ZXIpJyl9XG4gICAgICAgIHtvYmouZnJvbXB0ciA/IHRoaXMuaXRlbXMob2JqLmZyb21wdHIpIDogdW5kZWZpbmVkfVxuICAgICAgPC9kZXRhaWxzPlxuICAgIClcbiAgfVxuXG4gIGhlYWRlcihvYmo6IEd1cnVJbXBsZW1lbnRzUmVzdWx0LCBzdWJ0aXRsZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzdW1tYXJ5IGNsYXNzTmFtZT1cImdvLXBsdXMtYWNjb3JkaW9uLWhlYWRlclwiPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXN1YnRsZVwiPntvYmoudHlwZS5raW5kICsgJyB0eXBlICd9PC9zcGFuPlxuICAgICAgICA8c3BhbiBvbmNsaWNrPXsoKSA9PiB0aGlzLm9wZW5GaWxlKG9iai50eXBlLnBvcyl9PntvYmoudHlwZS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zdWJ0bGVcIj57JyAnICsgc3VidGl0bGV9PC9zcGFuPlxuICAgICAgPC9zdW1tYXJ5PlxuICAgIClcbiAgfVxuXG4gIGl0ZW1zKGFycjogQXJyYXk8SW1wbGVtZW50c1R5cGU+KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxtYWluIGNsYXNzTmFtZT1cImdvLXBsdXMtYWNjb3JkaWFuLWNvbnRlbnRcIj5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cImdvLXBsdXMtdGFibGVcIj5cbiAgICAgICAgICB7YXJyLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDx0clxuICAgICAgICAgICAgICAgIG9uY2xpY2s9e3RoaXMub3BlbkZpbGUuYmluZCh0aGlzLCBpdGVtLnBvcyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ28tcGx1cy10YWJsZS1yb3dcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdvLXBsdXMtdGFibGUtY2VsbCBnby1wbHVzLWxlZnQtcGFkXCI+XG4gICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfVxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zdWJ0bGVcIj57JyBhdCAnICsgaXRlbS5wb3N9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L21haW4+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInBhZGRlZC1jb250ZW50XCI+e3RoaXMucHJvcHN9PC9kaXY+XG4gICAgfVxuICAgIGlmICghdGhpcy5wcm9wcy50eXBlKSB7XG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJwYWRkZWQtY29udGVudFwiPntkZWZhdWx0TWVzc2FnZX08L2Rpdj5cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RydWN0dXJlZENvbnRlbnQodGhpcy5wcm9wcylcbiAgfVxufVxuXG5leHBvcnQgeyBJbXBsZW1lbnRzVmlldyB9XG4iXX0=