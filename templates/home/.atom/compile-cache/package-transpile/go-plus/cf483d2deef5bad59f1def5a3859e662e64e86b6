Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeArgs = exports.currentCursorOffset = exports.buildGuruArchive = exports.adjustPositionForGuru = undefined;

var _utils = require('./utils');

const scopedModes = ['callees', 'callers', 'callstack', 'pointsto', 'whicherrs', 'peers', 'referrers'];

function buildGuruArchive(editor) {
  let archive = '';
  const editors = editor ? [editor] : atom.workspace.getTextEditors();
  for (const e of editors) {
    if (e.isModified() && (0, _utils.isValidEditor)(e)) {
      archive += (e.getPath() || '') + '\n';
      archive += Buffer.byteLength(e.getText(), 'utf8') + '\n';
      archive += e.getText();
    }
  }
  return archive;
}

function computeArgs(mode, options, editor, pos = currentCursorOffset(editor)) {
  if (!mode || !editor || !pos && pos !== 0) {
    return undefined;
  }

  const filePath = editor.getPath();
  if (!filePath) {
    return undefined;
  }

  const args = ['-json'];
  if (scopedModes.includes(mode)) {
    const src = 'src/';
    let relPath = atom.project.relativizePath(filePath);
    if (relPath && relPath.length > 0 && relPath[0] !== null) {
      let scope = relPath[0];
      const srcIndex = scope.indexOf(src);
      if (srcIndex !== -1) {
        scope = scope.substring(srcIndex + src.length, scope.length);
      }
      args.push('-scope', scope + '/...');
    }
  }

  args.push(mode, `${filePath}:#${pos}`);
  return args;
}

function currentCursorOffset(editor) {
  let pos = (0, _utils.getCursorPosition)(editor);
  if (!pos) {
    return 0;
  }
  pos = adjustPositionForGuru(pos, editor);
  return (0, _utils.utf8OffsetForBufferPosition)(pos, editor);
}

function adjustPositionForGuru(pos, editor) {
  if (!pos) {
    return pos;
  }
  // Unfortunately guru fails if the cursor is at the end of a word
  // e.g. "fmt.Println ()"
  //                  â†‘ the cursor is here, between "ln" and "("
  // In order to avoid this problem we have to check whether the char
  // at the given position is considered a part of an identifier.
  // If not step back 1 char as it might contain a valid identifier.
  const char = editor.getTextInBufferRange([pos, pos.translate([0, 1])]);
  const nonWordChars = editor.getNonWordCharacters(pos);
  if (nonWordChars.indexOf(char) >= 0 || /\s/.test(char)) {
    return pos.translate([0, -1]);
  }
  return pos;
}

exports.adjustPositionForGuru = adjustPositionForGuru;
exports.buildGuruArchive = buildGuruArchive;
exports.currentCursorOffset = currentCursorOffset;
exports.computeArgs = computeArgs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1cnUtdXRpbHMuanMiXSwibmFtZXMiOlsic2NvcGVkTW9kZXMiLCJidWlsZEd1cnVBcmNoaXZlIiwiZWRpdG9yIiwiYXJjaGl2ZSIsImVkaXRvcnMiLCJhdG9tIiwid29ya3NwYWNlIiwiZ2V0VGV4dEVkaXRvcnMiLCJlIiwiaXNNb2RpZmllZCIsImdldFBhdGgiLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZ2V0VGV4dCIsImNvbXB1dGVBcmdzIiwibW9kZSIsIm9wdGlvbnMiLCJwb3MiLCJjdXJyZW50Q3Vyc29yT2Zmc2V0IiwidW5kZWZpbmVkIiwiZmlsZVBhdGgiLCJhcmdzIiwiaW5jbHVkZXMiLCJzcmMiLCJyZWxQYXRoIiwicHJvamVjdCIsInJlbGF0aXZpemVQYXRoIiwibGVuZ3RoIiwic2NvcGUiLCJzcmNJbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJwdXNoIiwiYWRqdXN0UG9zaXRpb25Gb3JHdXJ1IiwiY2hhciIsImdldFRleHRJbkJ1ZmZlclJhbmdlIiwidHJhbnNsYXRlIiwibm9uV29yZENoYXJzIiwiZ2V0Tm9uV29yZENoYXJhY3RlcnMiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztBQU1BLE1BQU1BLGNBQWMsQ0FDbEIsU0FEa0IsRUFFbEIsU0FGa0IsRUFHbEIsV0FIa0IsRUFJbEIsVUFKa0IsRUFLbEIsV0FMa0IsRUFNbEIsT0FOa0IsRUFPbEIsV0FQa0IsQ0FBcEI7O0FBVUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLE1BQTFCLEVBQW9EO0FBQ2xELE1BQUlDLFVBQVUsRUFBZDtBQUNBLFFBQU1DLFVBQVVGLFNBQVMsQ0FBQ0EsTUFBRCxDQUFULEdBQW9CRyxLQUFLQyxTQUFMLENBQWVDLGNBQWYsRUFBcEM7QUFDQSxPQUFLLE1BQU1DLENBQVgsSUFBZ0JKLE9BQWhCLEVBQXlCO0FBQ3ZCLFFBQUlJLEVBQUVDLFVBQUYsTUFBa0IsMEJBQWNELENBQWQsQ0FBdEIsRUFBd0M7QUFDdENMLGlCQUFXLENBQUNLLEVBQUVFLE9B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L215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLXBsdXMvbGliIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgZ2V0Q3Vyc29yUG9zaXRpb24sXG4gIGlzVmFsaWRFZGl0b3IsXG4gIHV0ZjhPZmZzZXRGb3JCdWZmZXJQb3NpdGlvblxufSBmcm9tICcuL3V0aWxzJ1xuXG5jb25zdCBzY29wZWRNb2RlcyA9IFtcbiAgJ2NhbGxlZXMnLFxuICAnY2FsbGVycycsXG4gICdjYWxsc3RhY2snLFxuICAncG9pbnRzdG8nLFxuICAnd2hpY2hlcnJzJyxcbiAgJ3BlZXJzJyxcbiAgJ3JlZmVycmVycydcbl1cblxuZnVuY3Rpb24gYnVpbGRHdXJ1QXJjaGl2ZShlZGl0b3I6ID9hdG9tJFRleHRFZGl0b3IpIHtcbiAgbGV0IGFyY2hpdmUgPSAnJ1xuICBjb25zdCBlZGl0b3JzID0gZWRpdG9yID8gW2VkaXRvcl0gOiBhdG9tLndvcmtzcGFjZS5nZXRUZXh0RWRpdG9ycygpXG4gIGZvciAoY29uc3QgZSBvZiBlZGl0b3JzKSB7XG4gICAgaWYgKGUuaXNNb2RpZmllZCgpICYmIGlzVmFsaWRFZGl0b3IoZSkpIHtcbiAgICAgIGFyY2hpdmUgKz0gKGUuZ2V0UGF0aCgpIHx8ICcnKSArICdcXG4nXG4gICAgICBhcmNoaXZlICs9IEJ1ZmZlci5ieXRlTGVuZ3RoKGUuZ2V0VGV4dCgpLCAndXRmOCcpICsgJ1xcbidcbiAgICAgIGFyY2hpdmUgKz0gZS5nZXRUZXh0KClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyY2hpdmVcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUFyZ3MoXG4gIG1vZGU6IHN0cmluZyxcbiAgb3B0aW9uczogP3sgZ29wYXRoOiBzdHJpbmcgfSxcbiAgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsXG4gIHBvczogbnVtYmVyID0gY3VycmVudEN1cnNvck9mZnNldChlZGl0b3IpXG4pOiA/QXJyYXk8c3RyaW5nPiB7XG4gIGlmICghbW9kZSB8fCAhZWRpdG9yIHx8ICghcG9zICYmIHBvcyAhPT0gMCkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBjb25zdCBmaWxlUGF0aCA9IGVkaXRvci5nZXRQYXRoKClcbiAgaWYgKCFmaWxlUGF0aCkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IGFyZ3MgPSBbJy1qc29uJ11cbiAgaWYgKHNjb3BlZE1vZGVzLmluY2x1ZGVzKG1vZGUpKSB7XG4gICAgY29uc3Qgc3JjID0gJ3NyYy8nXG4gICAgbGV0IHJlbFBhdGggPSBhdG9tLnByb2plY3QucmVsYXRpdml6ZVBhdGgoZmlsZVBhdGgpXG4gICAgaWYgKHJlbFBhdGggJiYgcmVsUGF0aC5sZW5ndGggPiAwICYmIHJlbFBhdGhbMF0gIT09IG51bGwpIHtcbiAgICAgIGxldCBzY29wZSA9IHJlbFBhdGhbMF1cbiAgICAgIGNvbnN0IHNyY0luZGV4ID0gc2NvcGUuaW5kZXhPZihzcmMpXG4gICAgICBpZiAoc3JjSW5kZXggIT09IC0xKSB7XG4gICAgICAgIHNjb3BlID0gc2NvcGUuc3Vic3RyaW5nKHNyY0luZGV4ICsgc3JjLmxlbmd0aCwgc2NvcGUubGVuZ3RoKVxuICAgICAgfVxuICAgICAgYXJncy5wdXNoKCctc2NvcGUnLCBzY29wZSArICcvLi4uJylcbiAgICB9XG4gIH1cblxuICBhcmdzLnB1c2gobW9kZSwgYCR7ZmlsZVBhdGh9OiMke3Bvc31gKVxuICByZXR1cm4gYXJnc1xufVxuXG5mdW5jdGlvbiBjdXJyZW50Q3Vyc29yT2Zmc2V0KGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yKTogbnVtYmVyIHtcbiAgbGV0IHBvcyA9IGdldEN1cnNvclBvc2l0aW9uKGVkaXRvcilcbiAgaWYgKCFwb3MpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIHBvcyA9IGFkanVzdFBvc2l0aW9uRm9yR3VydShwb3MsIGVkaXRvcilcbiAgcmV0dXJuIHV0ZjhPZmZzZXRGb3JCdWZmZXJQb3NpdGlvbihwb3MsIGVkaXRvcilcbn1cblxuZnVuY3Rpb24gYWRqdXN0UG9zaXRpb25Gb3JHdXJ1KHBvczogYXRvbSRQb2ludCwgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpIHtcbiAgaWYgKCFwb3MpIHtcbiAgICByZXR1cm4gcG9zXG4gIH1cbiAgLy8gVW5mb3J0dW5hdGVseSBndXJ1IGZhaWxzIGlmIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBvZiBhIHdvcmRcbiAgLy8gZS5nLiBcImZtdC5QcmludGxuICgpXCJcbiAgLy8gICAgICAgICAgICAgICAgICDihpEgdGhlIGN1cnNvciBpcyBoZXJlLCBiZXR3ZWVuIFwibG5cIiBhbmQgXCIoXCJcbiAgLy8gSW4gb3JkZXIgdG8gYXZvaWQgdGhpcyBwcm9ibGVtIHdlIGhhdmUgdG8gY2hlY2sgd2hldGhlciB0aGUgY2hhclxuICAvLyBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgY29uc2lkZXJlZCBhIHBhcnQgb2YgYW4gaWRlbnRpZmllci5cbiAgLy8gSWYgbm90IHN0ZXAgYmFjayAxIGNoYXIgYXMgaXQgbWlnaHQgY29udGFpbiBhIHZhbGlkIGlkZW50aWZpZXIuXG4gIGNvbnN0IGNoYXIgPSBlZGl0b3IuZ2V0VGV4dEluQnVmZmVyUmFuZ2UoW3BvcywgcG9zLnRyYW5zbGF0ZShbMCwgMV0pXSlcbiAgY29uc3Qgbm9uV29yZENoYXJzID0gZWRpdG9yLmdldE5vbldvcmRDaGFyYWN0ZXJzKHBvcylcbiAgaWYgKG5vbldvcmRDaGFycy5pbmRleE9mKGNoYXIpID49IDAgfHwgL1xccy8udGVzdChjaGFyKSkge1xuICAgIHJldHVybiBwb3MudHJhbnNsYXRlKFswLCAtMV0pXG4gIH1cbiAgcmV0dXJuIHBvc1xufVxuXG5leHBvcnQge1xuICBhZGp1c3RQb3NpdGlvbkZvckd1cnUsXG4gIGJ1aWxkR3VydUFyY2hpdmUsXG4gIGN1cnJlbnRDdXJzb3JPZmZzZXQsXG4gIGNvbXB1dGVBcmdzXG59XG4iXX0=