Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Implements = undefined;

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _atom = require('atom');

var _utils = require('./../utils');

var _guruUtils = require('./../guru-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Implements {

  constructor(goconfig) {
    this.goconfig = goconfig;

    this.key = 'implements';
    this.tab = {
      key: 'implements',
      name: 'Implements',
      packageName: 'go-plus',
      icon: 'tasklist',
      order: 450,
      suppressPadding: true
    };

    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.commands.add('atom-workspace', {
      'golang:implements': () => {
        this.handleCommand();
      }
    }));
  }

  handleCommand() {
    if (!this.goconfig || !this.goconfig.locator || !this.goconfig.executor) {
      return;
    }
    const editor = (0, _utils.getEditor)();
    if (!editor) {
      return;
    }
    const args = (0, _guruUtils.computeArgs)('implements', null, editor);
    if (args && args.length) {
      return this.runGuru(args);
    }
  }

  async runGuru(args) {
    const options = {};
    options.timeout = 20000;
    const archive = (0, _guruUtils.buildGuruArchive)();
    if (archive && archive.length) {
      options.input = archive;
      args.unshift('-modified');
    }
    if (this.requestFocus) {
      await this.requestFocus();
    }
    if (this.view) {
      this.view.update('running guru ' + args.join(' '));
    }
    const cmd = await this.goconfig.locator.findTool('guru');
    if (!cmd) {
      return false;
    }
    const r = await this.goconfig.executor.exec(cmd, args, options);
    if (!r) {
      return false;
    }

    const stderr = r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr;
    if (r.error || r.exitcode !== 0 || stderr && stderr.trim() !== '') {
      if (this.view) {
        if (r.exitcode === 124) {
          this.view.update(`guru failed: operation timed out after ${options.timeout} ms`);
        } else {
          this.view.update('guru failed' + _os2.default.EOL + _os2.default.EOL + stderr.trim());
        }
      }
      return false;
    }
    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    const obj = JSON.parse(stdout);
    if (obj && this.requestFocus) {
      this.requestFocus().then(() => {
        if (this.view) {
          this.view.update(obj);
        }
        return;
      }).catch(e => console.log(e)); // eslint-disable-line no-console
    }
  }

  dispose() {
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }
  }
}

exports.Implements = Implements;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,