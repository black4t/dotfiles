Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Executor = undefined;

var _atom = require('atom');

var _child_process = require('child_process');

var _environment = require('./environment');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Executor {

  constructor(getConsole) {
    this.getConsole = getConsole;
  }

  dispose() {}

  execSync(command, args = [], options) {
    const opt = this.ensureOptions(options);
    const done = (0, _child_process.spawnSync)(command, args, opt);

    let code = done.status;
    let stdout = '';
    if (done.stdout && done.stdout.length > 0) {
      stdout = done.stdout;
    }
    let stderr = '';
    if (done.stderr && done.stderr.length > 0) {
      stderr = done.stderr;
    }

    let err = done.error;
    if (err) {
      if (err.code) {
        switch (err.code) {
          case 'ENOENT':
            code = 127;
            break;
          case 'ENOTCONN':
            // https://github.com/iojs/io.js/pull/1214
            err = null;
            code = 0;
            break;
        }
      }
    }

    return { exitcode: code, stdout: stdout, stderr: stderr, error: err };
  }

  exec(command, args = [], options) {
    return new Promise(resolve => {
      const opt = this.ensureOptions(options);
      if (!args) {
        args = [];
      }

      let verbose = false;
      if (process.env.GOPLUSDEV || atom.config.get('go-plus.devMode')) {
        verbose = true; // Warning, this will get very verbose when typing
      }
      if (verbose) {
        console.log('executing: ' + command + ' ' + args.join(' ')); // eslint-disable-line no-console
      }

      let stdout = '';
      let stderr = '';
      const stdoutFn = data => {
        stdout += data;
      };
      const stderrFn = data => {
        stderr += data;
      };

      let timeoutId;
      const exitFn = code => {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (verbose) {
          /* eslint-disable no-console */
          console.log('exited with code: ' + code);
          console.log('stderr: ' + stderr);
          console.log('stdout: ' + stdout);
          /* eslint-enable no-console */
        }
        if (stderr) {
          const nonexistentcommand = "'" + command + "' is not recognized as an internal or external command,operable program or batch file.";
          if (stderr.replace(/\r?\n|\r/g, '') === nonexistentcommand) {
            resolve({
              error: {
                code: 3025,
                errno: 'ENOENT',
                message: 'spawn ' + command + ' ENOENT',
                path: command
              },
              exitcode: 127,
              stdout: stdout,
              stderr: stderr
            });
            return;
          }
        }

        if (code !== 0) {
          const console = this.getConsole();
          if (console) {
            console.error(`${command} ${args.join(' ')} failed with exit code ${code}.`);
            console.warn(`${command} stderr: ${stderr}`);
          }
        }
        resolve({
          error: null,
          exitcode: code,
          stdout: stdout,
          stderr: stderr
        });
      };

      const bufferedprocess = new _atom.BufferedProcess({
        command: command,
        args: args,
        options: opt,
        stdout: stdoutFn,
        stderr: stderrFn,
        exit: exitFn
      });

      if (options.timeout && options.timeout > 0) {
        timeoutId = setTimeout(() => {
          bufferedprocess.kill();
          resolve({
            error: null,
            exitcode: 124,
            stdout: stdout,
            stderr: stderr
          });
        }, options.timeout);
      }
      bufferedprocess.onWillThrowError(err => {
        let e = err;
        if (err) {
          if (err.handle) {
            err.handle();
          }
          if (err.error) {
            e = err.error;
          }
        }
        resolve({
          error: e,
          exitcode: 127,
          stdout: stdout,
          stderr: stderr
        });
      });

      if (opt.input && opt.input.length > 0) {
        bufferedprocess.process.stdin.end(opt.input);
      }
    });
  }

  getOptions(kind = 'file', editor) {
    const result = this.getDefaultOptions(kind, editor);
    return this.ensureOptions(result);
  }

  ensureOptions(options) {
    if (!options.timeout) {
      options.timeout = 10000;
    }
    options.encoding = 'utf8';
    if (!options.env) {
      options.env = (0, _environment.getenvironment)();
    }
    if (options.cwd && options.cwd.length > 0) {
      try {
        options.cwd = _fsExtra2.default.realpathSync(options.cwd);
      } catch (e) {
        if (e.handle) {
          e.handle();
        }
        console.log(e); // eslint-disable-line no-console
      }
    }
    return options;
  }

  getDefaultOptions(key = 'file', editor) {
    let options = {};
    switch (key) {
      case 'file':
        {
          let file = editor && editor.getPath();
          if (file) {
            options.cwd = _path2.default.dirname(file);
          }
          if (!options.cwd) {
            const p = (0, _utils.projectPath)();
            if (p) {
              options.cwd = p;
            }
          }
          break;
        }
      case 'project':
        {
          const p = (0, _utils.projectPath)();
          if (p) {
            options.cwd = p;
          }
          break;
        }
      default:
        throw new Error('Unknown executor option "' + key + '"');
    }
    return options;
  }
}

exports.Executor = Executor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,