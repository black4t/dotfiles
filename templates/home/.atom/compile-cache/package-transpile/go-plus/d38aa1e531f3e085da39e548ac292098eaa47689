Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferencesProvider = undefined;

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _atom = require('atom');

var _guruUtils = require('./../guru-utils');

var _utils = require('./../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ReferencesProvider {

  constructor(goconfig) {
    this.goconfig = goconfig;
  }

  isEditorSupported(editor) {
    return Promise.resolve((0, _utils.isValidEditor)(editor));
  }

  getWordAtPosition(editor, pos) {
    const cursor = editor.getLastCursor();
    const wordRegexp = cursor.wordRegExp();
    // $FlowFixMe
    const ranges = editor.getBuffer().findAllInRangeSync(wordRegexp, new _atom.Range(new _atom.Point(pos.row, 0), new _atom.Point(pos.row, Infinity)));
    const range = ranges.find(range => range.end.column >= pos.column && range.start.column <= pos.column) || new _atom.Range(pos, pos);

    return editor.getTextInBufferRange(range);
  }

  async findReferences(editor, position) {
    const cmd = await this.goconfig.locator.findTool('guru');
    if (!cmd) {
      return {
        type: 'error',
        message: 'Cannot find references. The `guru` tool could not be located.'
      };
    }

    const offset = (0, _utils.utf8OffsetForBufferPosition)(position, editor);
    const args = (0, _guruUtils.computeArgs)('referrers', null, editor, offset) || [];
    const options = {};
    options.timeout = 30000;
    const archive = (0, _guruUtils.buildGuruArchive)(editor);
    if (archive && archive.length) {
      options.input = archive;
      args.unshift('-modified');
    }

    const r = await this.goconfig.executor.exec(cmd, args, options);
    const stderr = r.stderr instanceof Buffer ? r.stderr.toString() : r.stderr;
    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    if (r.error || r.exitcode !== 0) {
      let message;
      if (r.exitcode === 124) {
        message = `operation timed out after ${options.timeout}ms`;
      } else {
        message = stderr.trim() + _os2.default.EOL + stdout.trim();
        if (r.error && r.error.message) {
          message = r.error.message + _os2.default.EOL + message;
        }
      }
      return { type: 'error', message };
    }

    const stream = this.parseStream(stdout);
    const refs = this.parse(stream);
    return {
      type: 'data',
      baseUri: atom.project.getDirectories()[0].getPath(),
      references: refs,
      referencedSymbolName: this.getWordAtPosition(editor, position) || stream[0].desc
    };
  }

  parseStream(jsonStream) {
    if (!jsonStream || !jsonStream.length) {
      return [];
    }
    // A JSON stream is invalid json; characterized by a concatenation of
    // multiple JSON objects
    const r = new RegExp('^}$', 'igm');
    const result = [];
    const objects = jsonStream.split(r);
    for (const obj of objects) {
      if (obj.trim() !== '') {
        result.push(JSON.parse(obj + '}'));
      }
    }
    return result;
  }

  parse(obj) {
    if (!obj || !obj.length) {
      return [];
    }

    const refs = [];
    for (const pkg of obj.slice(1)) {
      if (!pkg || !pkg.refs || !pkg.refs.length) {
        continue;
      }

      for (const ref of pkg.refs) {
        const parsed = (0, _utils.parseGoPosition)(ref.pos);
        if (parsed && typeof parsed.column === 'number' && typeof parsed.line === 'number') {
          const point = [parsed.line, parsed.column];
          refs.push({
            uri: parsed.file,
            range: new _atom.Range(point, point),
            name: ref.text
          });
        }
      }
    }

    return refs;
  }
}

exports.ReferencesProvider = ReferencesProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,