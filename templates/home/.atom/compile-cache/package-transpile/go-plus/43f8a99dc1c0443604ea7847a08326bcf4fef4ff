Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OutlineProvider = undefined;

var _guruUtils = require('../guru-utils');

const toOutline = (editor, goOutline, results) => {
  goOutline.forEach(item => {
    let { label } = item;
    let kind = item.type;

    // omit '-' variable assignments
    if (label === '_' && kind === 'variable') return;

    // distinguish methods from ordinary functions
    if (item.receiverType) {
      label = `(${item.receiverType}).${label}`;
      kind = 'method';
    }

    // there isn't an atom-ide-ui icon for "import", so we'll use
    // 'file' for our top-level container and 'package' for imports
    if (kind === 'package') kind = 'file';
    if (kind === 'import') kind = 'package';

    // TODO: this assumes a character index === byte index
    const start = editor.getBuffer().positionForCharacterIndex(item.start - 1);
    const end = editor.getBuffer().positionForCharacterIndex(item.end - 1);

    const line = editor.lineTextForBufferRow(start.row);

    if (kind === 'type') {
      // distinguish between structs and interfaces
      if (line.includes('type')) {
        if (line.includes('interface')) kind = 'interface';
        if (line.includes('struct')) kind = 'class'; // TODO: is there a better icon?
      }

      // TODO: what about other type definitions?  'type' is not valid..
    }

    // go-outline doesn't distinguish constants from variables,
    // but we can get _some_ constants by looking for const in the line
    // (this won't catch multiple constants in a single GenDecl, though)
    if (kind === 'variable' && line.includes('const')) {
      kind = 'constant';
    }

    const converted = {
      kind: kind,
      plainText: label,
      representativeName: label,
      startPosition: start,
      endPosition: end,
      children: []
    };
    results.push(converted);

    // recurse through children
    if (item.children && item.children.length) {
      toOutline(editor, item.children, converted.children);
    }
  });
};

class OutlineProvider {

  constructor(goconfig) {
    this.name = 'go-plus';
    this.priority = 2;
    this.grammarScopes = ['go', 'source.go'];
    this.updateOnEdit = false;

    this.goconfig = goconfig;
  }

  async getCmd() {
    if (this.cmd) return this.cmd;

    const r = await this.goconfig.locator.findTool('go-outline');
    if (r) this.cmd = r;

    return this.cmd;
  }

  async getOutline(editor) {
    const p = editor.getPath();
    if (!p) return null;

    const cmd = await this.getCmd();
    if (!cmd) return null;

    const options = {};
    options.timeout = 3000;
    const args = ['-f', p];
    const archive = (0, _guruUtils.buildGuruArchive)(editor);
    if (archive && archive.length) {
      args.push('-modified');
      options.input = archive;
    }

    const r = await this.goconfig.executor.exec(cmd, args, options);
    if (r.exitcode !== 0) return null;

    const stdout = typeof r.stdout === 'string' ? r.stdout : r.stdout.toString();
    const goOutlineResult = JSON.parse(stdout);

    const trees = [];
    toOutline(editor, goOutlineResult, trees);
    return { outlineTrees: trees };
  }
}
exports.OutlineProvider = OutlineProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,