Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigService = undefined;

var _executor = require('./executor');

var _locator = require('./locator');

class ConfigService {

  constructor(getConsole) {
    this.executor = new _executor.Executor(getConsole);
    this.locator = new _locator.Locator();
  }

  dispose() {
    if (this.locator) {
      this.locator.dispose();

      // $FlowFixMe
      this.locator = null;
    }

    if (this.executor) {
      this.executor.dispose();

      // $FlowFixMe
      this.executor = null;
    }
  }

  provide() {
    const e = this.executor;
    const l = this.locator;
    return {
      executor: {
        exec: e.exec.bind(e),
        execSync: e.execSync.bind(e),
        getOptions: e.getOptions.bind(e)
      },
      locator: {
        runtimes: l.runtimes.bind(l),
        runtime: l.runtime.bind(l),
        gopath: l.gopath.bind(l),
        findTool: l.findTool.bind(l)
      },
      environment: l.environment.bind(l)
    };
  }
}

exports.ConfigService = ConfigService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UuanMiXSwibmFtZXMiOlsiQ29uZmlnU2VydmljZSIsImNvbnN0cnVjdG9yIiwiZ2V0Q29uc29sZSIsImV4ZWN1dG9yIiwiRXhlY3V0b3IiLCJsb2NhdG9yIiwiTG9jYXRvciIsImRpc3Bvc2UiLCJwcm92aWRlIiwiZSIsImwiLCJleGVjIiwiYmluZCIsImV4ZWNTeW5jIiwiZ2V0T3B0aW9ucyIsInJ1bnRpbWVzIiwicnVudGltZSIsImdvcGF0aCIsImZpbmRUb29sIiwiZW52aXJvbm1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBQ0E7O0FBdUJBLE1BQU1BLGFBQU4sQ0FBb0I7O0FBSWxCQyxjQUFZQyxVQUFaLEVBQTJDO0FBQ3pDLFNBQUtDLFFBQUwsR0FBZ0IsSUFBSUMsa0JBQUosQ0FBYUYsVUFBYixDQUFoQjtBQUNBLFNBQUtHLE9BQUwsR0FBZSxJQUFJQyxnQkFBSixFQUFmO0FBQ0Q7O0FBRURDLFlBQVU7QUFDUixRQUFJLEtBQUtGLE9BQVQsRUFBa0I7QUFDaEIsV0FBS0EsT0FBTCxDQUFhRSxPQUFiOztBQUVBO0FBQ0EsV0FBS0YsT0FBTCxHQUFlLElBQWY7QUFDRDs7QUFFRCxRQUFJLEtBQUtGLFFBQVQsRUFBbUI7QUFDakIsV0FBS0EsUUFBTCxDQUFjSSxPQUFkOztBQUVBO0FBQ0EsV0FBS0osUUFBTCxHQUFnQixJQUFoQjtBQUNEO0FBQ0Y7O0FBRURLLFlBQW9CO0FBQ2xCLFVBQU1DLElBQUksS0FBS04sUUFBZjtBQUNBLFVBQU1PLElBQUksS0FBS0wsT0FBZjtBQUNBLFdBQU87QUFDTEYsZ0JBQVU7QUFDUlEsY0FBTUYsRUFBRUUsSUFBRixDQUFPQyxJQUFQLENBQVlILENBQVosQ0FERTtBQUVSSSxrQkFBVUosRUFBRUksUUFBRixDQUFXRCxJQUFYLENBQWdCSCxDQUFoQixDQUZGO0FBR1JLLG9CQUFZTCxFQUFFSyxVQUFGLENBQWFGLElBQWIsQ0FBa0JILENBQWxCO0FBSEosT0FETDtBQU1MSixlQUFTO0FBQ1BVLGtCQUFVTCxFQUFFSyxRQUFGLENBQVdILElBQVgsQ0FBZ0JGLENBQWhCLENBREg7QUFFUE0saUJBQVNOLEVBQUVNLE9BQUYsQ0FBVUosSUFBVixDQUFlRixDQUFmLENBRkY7QUFHUE8sZ0JBQVFQLEVBQUVPLE1BQUYsQ0FBU0wsSUFBVCxDQUFjRixDQUFkLENBSEQ7QUFJUFEsa0JBQVVSLEVBQUVRLFFBQUYsQ0FBV04sSUFBWCxDQUFnQkYsQ0FBaEI7QUFKSCxPQU5KO0FBWUxTLG1CQUFhVCxFQUFFUyxXQUFGLENBQWNQLElBQWQsQ0FBbUJGLENBQW5CO0FBWlIsS0FBUDtBQWNEO0FBMUNpQjs7UUE2Q1hWLGEsR0FBQUEsYSIsImZpbGUiOiJzZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL215dWdhLy5hdG9tL3BhY2thZ2VzL2dvLXBsdXMvbGliL2NvbmZpZyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IEV4ZWN1dG9yIH0gZnJvbSAnLi9leGVjdXRvcidcbmltcG9ydCB7IExvY2F0b3IgfSBmcm9tICcuL2xvY2F0b3InXG5cbmltcG9ydCB0eXBlIHsgRXhlY3V0b3JPcHRpb25zLCBFeGVjUmVzdWx0IH0gZnJvbSAnLi9leGVjdXRvcidcbmltcG9ydCB0eXBlIHsgRmluZFJlc3VsdCwgUnVudGltZSB9IGZyb20gJy4vbG9jYXRvcidcblxuaW50ZXJmYWNlIFB1YmxpY0V4ZWN1dG9yIHtcbiAgZXhlYyhzdHJpbmcsIEFycmF5PHN0cmluZz4sIEV4ZWN1dG9yT3B0aW9ucyk6IFByb21pc2U8RXhlY1Jlc3VsdD47XG4gIGV4ZWNTeW5jKHN0cmluZywgQXJyYXk8c3RyaW5nPiwgRXhlY3V0b3JPcHRpb25zKTogRXhlY1Jlc3VsdDtcbiAgZ2V0T3B0aW9ucygnZmlsZScsIGVkaXRvcjogVGV4dEVkaXRvcik6IEV4ZWN1dG9yT3B0aW9ucztcbiAgZ2V0T3B0aW9ucygncHJvamVjdCcsIGVkaXRvcj86ID9UZXh0RWRpdG9yKTogRXhlY3V0b3JPcHRpb25zO1xufVxuXG5leHBvcnQgdHlwZSBHb0NvbmZpZyA9IHtcbiAgZXhlY3V0b3I6IFB1YmxpY0V4ZWN1dG9yLFxuICBsb2NhdG9yOiB7XG4gICAgcnVudGltZXM6ICgpID0+IFByb21pc2U8QXJyYXk8UnVudGltZT4+LFxuICAgIHJ1bnRpbWU6ICgpID0+IFByb21pc2U8ZmFsc2UgfCBSdW50aW1lPixcbiAgICBnb3BhdGg6ICgpID0+IHN0cmluZyxcbiAgICBmaW5kVG9vbDogc3RyaW5nID0+IFByb21pc2U8RmluZFJlc3VsdD5cbiAgfSxcbiAgZW52aXJvbm1lbnQ6IGFueVxufVxuXG5jbGFzcyBDb25maWdTZXJ2aWNlIHtcbiAgZXhlY3V0b3I6IEV4ZWN1dG9yXG4gIGxvY2F0b3I6IExvY2F0b3JcblxuICBjb25zdHJ1Y3RvcihnZXRDb25zb2xlOiAoKSA9PiA/Q29uc29sZUFwaSkge1xuICAgIHRoaXMuZXhlY3V0b3IgPSBuZXcgRXhlY3V0b3IoZ2V0Q29uc29sZSlcbiAgICB0aGlzLmxvY2F0b3IgPSBuZXcgTG9jYXRvcigpXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLmxvY2F0b3IpIHtcbiAgICAgIHRoaXMubG9jYXRvci5kaXNwb3NlKClcblxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgdGhpcy5sb2NhdG9yID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLmV4ZWN1dG9yKSB7XG4gICAgICB0aGlzLmV4ZWN1dG9yLmRpc3Bvc2UoKVxuXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICB0aGlzLmV4ZWN1dG9yID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHByb3ZpZGUoKTogR29Db25maWcge1xuICAgIGNvbnN0IGUgPSB0aGlzLmV4ZWN1dG9yXG4gICAgY29uc3QgbCA9IHRoaXMubG9jYXRvclxuICAgIHJldHVybiB7XG4gICAgICBleGVjdXRvcjoge1xuICAgICAgICBleGVjOiBlLmV4ZWMuYmluZChlKSxcbiAgICAgICAgZXhlY1N5bmM6IGUuZXhlY1N5bmMuYmluZChlKSxcbiAgICAgICAgZ2V0T3B0aW9uczogZS5nZXRPcHRpb25zLmJpbmQoZSlcbiAgICAgIH0sXG4gICAgICBsb2NhdG9yOiB7XG4gICAgICAgIHJ1bnRpbWVzOiBsLnJ1bnRpbWVzLmJpbmQobCksXG4gICAgICAgIHJ1bnRpbWU6IGwucnVudGltZS5iaW5kKGwpLFxuICAgICAgICBnb3BhdGg6IGwuZ29wYXRoLmJpbmQobCksXG4gICAgICAgIGZpbmRUb29sOiBsLmZpbmRUb29sLmJpbmQobClcbiAgICAgIH0sXG4gICAgICBlbnZpcm9ubWVudDogbC5lbnZpcm9ubWVudC5iaW5kKGwpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IENvbmZpZ1NlcnZpY2UgfVxuIl19