Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefinitionProvider = undefined;

var _utils = require('../utils');

class DefinitionProvider {

  constructor(navigatorFunc) {
    this.priority = 10;
    this.grammarScopes = ['source.go', 'go'];
    this.navigator = navigatorFunc;
    this.maybeIdentifier = /^[$0-9\w]+$/;

    this.disableForSelector = [
    // original textmate selectors
    '.storage.type', '.string.quoted', '.keyword', '.support.function.builtin', '.constant.numeric.integer', '.constant.language', '.variable.other.assignment', '.variable.other.declaration', '.comment.line', 'entity.name.import.go',

    // tree-sitter selectors
    'comment.block', 'comment.line', 'string.quoted.double', 'constant.character.escape', 'constant.other.rune', 'constant.numeric.float', 'constant.language.nil', 'constant.language.false', 'constant.language.true', 'keyword.operator', 'keyword.import'];
    this.disposed = false;
  }

  dispose() {
    this.disposed = true;
    this.navigator = null;
    this.disableForSelector = [];
  }

  async getDefinition(editor, position) {
    if (!(0, _utils.isValidEditor)(editor)) {
      return null;
    }

    const scopes = editor.scopeDescriptorForBufferPosition(position).getScopesArray();
    const disabled = this.disableForSelector.some(s => scopes.includes(s));
    if (disabled) {
      console.log('skipping Go definition - current scopes:', scopes); // eslint-disable-line no-console
      return null;
    }

    const nav = this.navigator ? this.navigator() : null;
    if (!nav) return null;

    const loc = await nav.definitionForBufferPosition(position, editor);
    if (!loc) return null;

    const def = {
      path: loc.filepath,
      position: loc.pos,
      language: 'Go'
    };
    return { definitions: [def], queryRange: null };
  }
}

exports.DefinitionProvider = DefinitionProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmluaXRpb24tcHJvdmlkZXIuanMiXSwibmFtZXMiOlsiRGVmaW5pdGlvblByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJuYXZpZ2F0b3JGdW5jIiwicHJpb3JpdHkiLCJncmFtbWFyU2NvcGVzIiwibmF2aWdhdG9yIiwibWF5YmVJZGVudGlmaWVyIiwiZGlzYWJsZUZvclNlbGVjdG9yIiwiZGlzcG9zZWQiLCJkaXNwb3NlIiwiZ2V0RGVmaW5pdGlvbiIsImVkaXRvciIsInBvc2l0aW9uIiwic2NvcGVzIiwic2NvcGVEZXNjcmlwdG9yRm9yQnVmZmVyUG9zaXRpb24iLCJnZXRTY29wZXNBcnJheSIsImRpc2FibGVkIiwic29tZSIsInMiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJsb2ciLCJuYXYiLCJsb2MiLCJkZWZpbml0aW9uRm9yQnVmZmVyUG9zaXRpb24iLCJkZWYiLCJwYXRoIiwiZmlsZXBhdGgiLCJwb3MiLCJsYW5ndWFnZSIsImRlZmluaXRpb25zIiwicXVlcnlSYW5nZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQTs7QUFnQkEsTUFBTUEsa0JBQU4sQ0FBeUI7O0FBUXZCQyxjQUFZQyxhQUFaLEVBQTRDO0FBQzFDLFNBQUtDLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLENBQUMsV0FBRCxFQUFjLElBQWQsQ0FBckI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCSCxhQUFqQjtBQUNBLFNBQUtJLGVBQUwsR0FBdUIsYUFBdkI7O0FBRUEsU0FBS0Msa0JBQUwsR0FBMEI7QUFDeEI7QUFDQSxtQkFGd0IsRUFHeEIsZ0JBSHdCLEVBSXhCLFVBSndCLEVBS3hCLDJCQUx3QixFQU14QiwyQkFOd0IsRUFPeEIsb0JBUHdCLEVBUXhCLDRCQVJ3QixFQVN4Qiw2QkFUd0IsRUFVeEIsZUFWd0IsRUFXeEIsdUJBWHdCOztBQWF4QjtBQUNBLG1CQWR3QixFQWV4QixjQWZ3QixFQWdCeEIsc0JBaEJ3QixFQWlCeEIsMkJBakJ3QixFQWtCeEIscUJBbEJ3QixFQW1CeEIsd0JBbkJ3QixFQW9CeEIsdUJBcEJ3QixFQXFCeEIseUJBckJ3QixFQXNCeEIsd0JBdEJ3QixFQXVCeEIsa0JBdkJ3QixFQXdCeEIsZ0JBeEJ3QixDQUExQjtBQTBCQSxTQUFLQyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0Q7O0FBRURDLFlBQVU7QUFDUixTQUFLRCxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBS0gsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtFLGtCQUFMLEdBQTBCLEVBQTFCO0FBQ0Q7O0FBRUQsUUFBTUcsYUFBTixDQUNFQyxNQURGLEVBRUVDLFFBRkYsRUFHbUM7QUFDakMsUUFBSSxDQUFDLDBCQUFjRCxNQUFkLENBQUwsRUFBNEI7QUFDMUIsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBTUUsU0FBU0YsT0FDWkcsZ0NBRFksQ0FDcUJGLFFBRHJCLEVBRVpHLGNBRlksRUFBZjtBQUdBLFVBQU1DLFdBQVcsS0FBS1Qsa0JBQUwsQ0FBd0JVLElBQXhCLENBQTZCQyxLQUFLTCxPQUFPTSxRQUFQLENBQWdCRCxDQUFoQixDQUFsQyxDQUFqQjtBQUNBLFFBQUlGLFFBQUosRUFBYztBQUNaSSxjQUFRQyxHQUFSLENBQVksMENBQVosRUFBd0RSLE1BQXhELEVBRFksQ0FDb0Q7QUFDaEUsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBTVMsTUFBTSxLQUFLakIsU0FBTCxHQUFpQixLQUFLQSxTQUFMLEVBQWpCLEdBQW9DLElBQWhEO0FBQ0EsUUFBSSxDQUFDaUIsR0FBTCxFQUFVLE9BQU8sSUFBUDs7QUFFVixVQUFNQyxNQUFNLE1BQU1ELElBQUlFLDJCQUFKLENBQWdDWixRQUFoQyxFQUEwQ0QsTUFBMUMsQ0FBbEI7QUFDQSxRQUFJLENBQUNZLEdBQUwsRUFBVSxPQUFPLElBQVA7O0FBRVYsVUFBTUUsTUFBTTtBQUNWQyxZQUFNSCxJQUFJSSxRQURBO0FBRVZmLGdCQUFVVyxJQUFJSyxHQUZKO0FBR1ZDLGdCQUFVO0FBSEEsS0FBWjtBQUtBLFdBQU8sRUFBRUMsYUFBYSxDQUFDTCxHQUFELENBQWYsRUFBc0JNLFlBQVksSUFBbEMsRUFBUDtBQUNEO0FBOUVzQjs7UUFpRmhCL0Isa0IsR0FBQUEsa0IiLCJmaWxlIjoiZGVmaW5pdGlvbi1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9teXVnYS8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL2xpYi9uYXZpZ2F0b3IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IE5hdmlnYXRvciB9IGZyb20gJy4vbmF2aWdhdG9yJ1xuaW1wb3J0IHsgaXNWYWxpZEVkaXRvciB9IGZyb20gJy4uL3V0aWxzJ1xuXG50eXBlIERlZmluaXRpb24gPSB7XG4gIHBhdGg6IHN0cmluZywgLy8gUGF0aCBvZiB0aGUgZmlsZSBpbiB3aGljaCB0aGUgZGVmaW5pdGlvbiBpcyBsb2NhdGVkLlxuICBwb3NpdGlvbjogYXRvbSRQb2ludCwgLy8gRmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBkZWZpbml0aW9uJ3MgaWRlbnRpZmllci5cbiAgcmFuZ2U/OiBhdG9tJFJhbmdlLCAvLyB0aGUgcmFuZ2Ugb2YgdGhlIGVudGlyZSBkZWZpbml0aW9uLlxuICBuYW1lPzogc3RyaW5nLCAvLyBkaXNwbGF5IGEgbW9yZSBodW1hbi1yZWFkYWJsZSB0aXRsZSBpbnNpZGUgSHlwZXJjbGlja1xuICBwcm9qZWN0Um9vdD86IHN0cmluZywgLy8gdXNlZCB0byBkaXNwbGF5IGEgcmVsYXRpdml6ZWQgdmVyc2lvbiBvZiBwYXRoXG4gIGxhbmd1YWdlOiBzdHJpbmdcbn1cblxudHlwZSBEZWZpbml0aW9uUXVlcnlSZXN1bHQgPSB7XG4gIHF1ZXJ5UmFuZ2U6ID9BcnJheTxhdG9tJFJhbmdlPixcbiAgZGVmaW5pdGlvbnM6IEFycmF5PERlZmluaXRpb24+IC8vIE11c3QgYmUgbm9uLWVtcHR5LlxufVxuXG5jbGFzcyBEZWZpbml0aW9uUHJvdmlkZXIge1xuICBwcmlvcml0eTogbnVtYmVyXG4gIGdyYW1tYXJTY29wZXM6IEFycmF5PHN0cmluZz5cbiAgbmF2aWdhdG9yOiBudWxsIHwgKCgpID0+IE5hdmlnYXRvcilcbiAgbWF5YmVJZGVudGlmaWVyOiBSZWdFeHBcbiAgZGlzYWJsZUZvclNlbGVjdG9yOiBBcnJheTxzdHJpbmc+XG4gIGRpc3Bvc2VkOiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IobmF2aWdhdG9yRnVuYzogKCkgPT4gTmF2aWdhdG9yKSB7XG4gICAgdGhpcy5wcmlvcml0eSA9IDEwXG4gICAgdGhpcy5ncmFtbWFyU2NvcGVzID0gWydzb3VyY2UuZ28nLCAnZ28nXVxuICAgIHRoaXMubmF2aWdhdG9yID0gbmF2aWdhdG9yRnVuY1xuICAgIHRoaXMubWF5YmVJZGVudGlmaWVyID0gL15bJDAtOVxcd10rJC9cblxuICAgIHRoaXMuZGlzYWJsZUZvclNlbGVjdG9yID0gW1xuICAgICAgLy8gb3JpZ2luYWwgdGV4dG1hdGUgc2VsZWN0b3JzXG4gICAgICAnLnN0b3JhZ2UudHlwZScsXG4gICAgICAnLnN0cmluZy5xdW90ZWQnLFxuICAgICAgJy5rZXl3b3JkJyxcbiAgICAgICcuc3VwcG9ydC5mdW5jdGlvbi5idWlsdGluJyxcbiAgICAgICcuY29uc3RhbnQubnVtZXJpYy5pbnRlZ2VyJyxcbiAgICAgICcuY29uc3RhbnQubGFuZ3VhZ2UnLFxuICAgICAgJy52YXJpYWJsZS5vdGhlci5hc3NpZ25tZW50JyxcbiAgICAgICcudmFyaWFibGUub3RoZXIuZGVjbGFyYXRpb24nLFxuICAgICAgJy5jb21tZW50LmxpbmUnLFxuICAgICAgJ2VudGl0eS5uYW1lLmltcG9ydC5nbycsXG5cbiAgICAgIC8vIHRyZWUtc2l0dGVyIHNlbGVjdG9yc1xuICAgICAgJ2NvbW1lbnQuYmxvY2snLFxuICAgICAgJ2NvbW1lbnQubGluZScsXG4gICAgICAnc3RyaW5nLnF1b3RlZC5kb3VibGUnLFxuICAgICAgJ2NvbnN0YW50LmNoYXJhY3Rlci5lc2NhcGUnLFxuICAgICAgJ2NvbnN0YW50Lm90aGVyLnJ1bmUnLFxuICAgICAgJ2NvbnN0YW50Lm51bWVyaWMuZmxvYXQnLFxuICAgICAgJ2NvbnN0YW50Lmxhbmd1YWdlLm5pbCcsXG4gICAgICAnY29uc3RhbnQubGFuZ3VhZ2UuZmFsc2UnLFxuICAgICAgJ2NvbnN0YW50Lmxhbmd1YWdlLnRydWUnLFxuICAgICAgJ2tleXdvcmQub3BlcmF0b3InLFxuICAgICAgJ2tleXdvcmQuaW1wb3J0J1xuICAgIF1cbiAgICB0aGlzLmRpc3Bvc2VkID0gZmFsc2VcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5kaXNwb3NlZCA9IHRydWVcbiAgICB0aGlzLm5hdmlnYXRvciA9IG51bGxcbiAgICB0aGlzLmRpc2FibGVGb3JTZWxlY3RvciA9IFtdXG4gIH1cblxuICBhc3luYyBnZXREZWZpbml0aW9uKFxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxuICAgIHBvc2l0aW9uOiBhdG9tJFBvaW50XG4gICk6IFByb21pc2U8P0RlZmluaXRpb25RdWVyeVJlc3VsdD4ge1xuICAgIGlmICghaXNWYWxpZEVkaXRvcihlZGl0b3IpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHNjb3BlcyA9IGVkaXRvclxuICAgICAgLnNjb3BlRGVzY3JpcHRvckZvckJ1ZmZlclBvc2l0aW9uKHBvc2l0aW9uKVxuICAgICAgLmdldFNjb3Blc0FycmF5KClcbiAgICBjb25zdCBkaXNhYmxlZCA9IHRoaXMuZGlzYWJsZUZvclNlbGVjdG9yLnNvbWUocyA9PiBzY29wZXMuaW5jbHVkZXMocykpXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnc2tpcHBpbmcgR28gZGVmaW5pdGlvbiAtIGN1cnJlbnQgc2NvcGVzOicsIHNjb3BlcykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IG5hdiA9IHRoaXMubmF2aWdhdG9yID8gdGhpcy5uYXZpZ2F0b3IoKSA6IG51bGxcbiAgICBpZiAoIW5hdikgcmV0dXJuIG51bGxcblxuICAgIGNvbnN0IGxvYyA9IGF3YWl0IG5hdi5kZWZpbml0aW9uRm9yQnVmZmVyUG9zaXRpb24ocG9zaXRpb24sIGVkaXRvcilcbiAgICBpZiAoIWxvYykgcmV0dXJuIG51bGxcblxuICAgIGNvbnN0IGRlZiA9IHtcbiAgICAgIHBhdGg6IGxvYy5maWxlcGF0aCxcbiAgICAgIHBvc2l0aW9uOiBsb2MucG9zLFxuICAgICAgbGFuZ3VhZ2U6ICdHbydcbiAgICB9XG4gICAgcmV0dXJuIHsgZGVmaW5pdGlvbnM6IFtkZWZdLCBxdWVyeVJhbmdlOiBudWxsIH1cbiAgfVxufVxuXG5leHBvcnQgeyBEZWZpbml0aW9uUHJvdmlkZXIgfVxuIl19