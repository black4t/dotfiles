Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Navigator = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _guruUtils = require('../guru-utils');

var _utils = require('../utils');

var _navigationStack = require('./navigation-stack');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Navigator {

  constructor(goconfig) {
    this.goconfig = goconfig;
    this.godefCommand = 'golang:godef';
    this.returnCommand = 'golang:godef-return';
    this.navigationStack = new _navigationStack.NavigationStack();
    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.commands.add('atom-workspace', 'golang:godef', () => {
      if (!this.disposed) {
        this.gotoDefinitionForWordAtCursor();
      }
    }));
    this.subscriptions.add(atom.commands.add('atom-workspace', 'golang:godef-return', () => {
      if (this.navigationStack && !this.disposed) {
        this.navigationStack.restorePreviousLocation();
      }
    }));
    this.disposed = false;
  }

  dispose() {
    this.disposed = true;
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }
  }

  async gotoDefinitionForWordAtCursor() {
    const editor = (0, _utils.getEditor)();
    if (!editor) {
      return false;
    }

    if (editor.hasMultipleCursors()) {
      atom.notifications.addWarning('go-plus', {
        dismissable: true,
        icon: 'location',
        detail: 'go to definition only works with a single cursor'
      });
      return false;
    }

    return this.gotoDefinitionForBufferPosition(editor.getCursorBufferPosition(), editor);
  }

  async definitionForBufferPosition(pos, editor) {
    const tool = atom.config.get('go-plus.navigator.mode');
    const r = tool === 'guru' ? await this.executeGuru(pos, editor) : await this.executeGodef(pos, editor);
    if (!r || r.exitcode !== 0) {
      return null;
    }
    const stdout = r.stdout instanceof Buffer ? r.stdout.toString() : r.stdout;
    return tool === 'guru' ? this.parseGuruLocation(stdout) : this.parseGodefLocation(stdout);
  }

  async gotoDefinitionForBufferPosition(pos, editor) {
    if (!editor || !pos) {
      return false;
    }

    const def = await this.definitionForBufferPosition(pos, editor);
    if (!def || !def.pos) return false;

    return this.visitLocation(def);
  }

  async executeGuru(pos, editor) {
    if (!editor || !pos) {
      return false;
    }
    const cmd = await this.goconfig.locator.findTool('guru');
    if (!cmd) {
      return false;
    }
    const filepath = editor.getPath();
    if (!filepath) {
      return false;
    }
    const archive = (0, _guruUtils.buildGuruArchive)();

    const options = this.goconfig.executor.getOptions('file', editor);
    if (archive && archive !== '') {
      options.input = archive;
    }

    pos = (0, _guruUtils.adjustPositionForGuru)(pos, editor);
    const offset = (0, _utils.utf8OffsetForBufferPosition)(pos, editor);
    const args = ['-json', 'definition', filepath + ':#' + offset];
    if (archive && archive !== '') {
      args.unshift('-modified');
    }
    return this.goconfig.executor.exec(cmd, args, options);
  }

  async executeGodef(pos, editor) {
    const cmd = await this.goconfig.locator.findTool('godef');
    if (!cmd) {
      return false;
    }
    const filepath = editor.getPath();
    if (!filepath) {
      return false;
    }
    const offset = (0, _utils.utf8OffsetForBufferPosition)(pos, editor);
    const args = ['-f', filepath, '-o', offset.toString(), '-i'];
    const options = this.goconfig.executor.getOptions('file', editor);
    options.input = editor.getText();
    return this.goconfig.executor.exec(cmd, args, options);
  }

  parseGuruLocation(stdout) {
    let output;
    try {
      output = JSON.parse(stdout);
    } catch (e) {
      console.log(e); // eslint-disable-line no-console
    }

    if (!output || !output.objpos) {
      return null;
    }

    const parsed = (0, _utils.parseGoPosition)(output.objpos.trim());
    if (!parsed) {
      return null;
    }
    const result = {};
    result.filepath = parsed.file;
    result.raw = stdout;

    if (parsed.line !== false && parsed.column !== false) {
      result.pos = new _atom.Point(parseInt(parsed.line) - 1, parseInt(parsed.column) - 1);
    }
    return result;
  }

  parseGodefLocation(godefStdout) {
    const pos = (0, _utils.parseGoPosition)(godefStdout);

    const result = {};
    result.filepath = pos.file;
    result.raw = godefStdout;

    if (pos.hasOwnProperty('line') && pos.hasOwnProperty('column')) {
      // atom's cursors are 0-based; godef uses diff-like 1-based
      const correct = str => parseInt(str, 10) - 1;
      result.pos = new _atom.Point(correct(pos.line), correct(pos.column));
    }
    return result;
  }

  async visitLocation(loc) {
    if (!loc || !loc.filepath) {
      const opts = {};
      opts.dismissable = true;
      opts.icon = 'location';
      opts.detail = 'definition tool returned malformed output';

      if (loc) {
        opts.description = JSON.stringify(loc.raw);
      }
      atom.notifications.addWarning('go-plus', opts);
      return false;
    }
    try {
      const l = loc;
      const stats = await (0, _utils.stat)(loc.filepath);
      this.navigationStack.pushCurrentLocation();
      if (stats.isDirectory()) {
        return this.visitDirectory(l);
      } else {
        return this.visitFile(l);
      }
    } catch (e) {
      atom.notifications.addWarning('go-plus', {
        dismissable: true,
        icon: 'location',
        detail: 'definition tool returned invalid file path',
        description: loc.filepath
      });
      return false;
    }
  }

  async visitFile(loc) {
    return (0, _utils.openFile)(loc.filepath, loc.pos);
  }

  async visitDirectory(loc) {
    try {
      const file = await this.findFirstGoFile(loc.filepath);
      loc.filepath = file;
      return this.visitFile(loc);
    } catch (err) {
      if (err.handle) {
        err.handle();
      }
      atom.notifications.addWarning('go-plus', {
        dismissable: true,
        icon: 'location',
        detail: 'godef return invalid directory',
        description: loc.filepath
      });
    }
  }

  findFirstGoFile(dir) {
    return new Promise((resolve, reject) => {
      _fs2.default.readdir(dir, (err, files) => {
        if (err) {
          reject(err);
        }

        const filepath = this.firstGoFilePath(dir, files.sort());
        if (filepath) {
          resolve(filepath);
        } else {
          reject(new Error(dir + 'has no non-test .go file'));
        }
      });
    });
  }

  firstGoFilePath(dir, files) {
    for (const file of files) {
      if (file.endsWith('.go') && file.indexOf('_test') === -1) {
        return _path2.default.join(dir, file);
      }
    }
    return null;
  }
}

exports.Navigator = Navigator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,